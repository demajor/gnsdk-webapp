# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gnsdk', [dirname(__file__)])
        except ImportError:
            import _gnsdk
            return _gnsdk
        if fp is not None:
            try:
                _mod = imp.load_module('_gnsdk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gnsdk = swig_import_helper()
    del swig_import_helper
else:
    import _gnsdk
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class IGnUserStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnUserStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnUserStore, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnUserStore
    __del__ = lambda self : None;
    def LoadSerializedUser(self): return _gnsdk.IGnUserStore_LoadSerializedUser(self)
    def StoreSerializedUser(self, *args): return _gnsdk.IGnUserStore_StoreSerializedUser(self, *args)
    def __init__(self): 
        if self.__class__ == IGnUserStore:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_IGnUserStore(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_IGnUserStore(self)
        return weakref_proxy(self)
IGnUserStore_swigregister = _gnsdk.IGnUserStore_swigregister
IGnUserStore_swigregister(IGnUserStore)


def cdata(*args):
  return _gnsdk.cdata(*args)
cdata = _gnsdk.cdata

def memmove(*args):
  return _gnsdk.memmove(*args)
memmove = _gnsdk.memmove
class byte_buffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, byte_buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, byte_buffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_byte_buffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_byte_buffer
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _gnsdk.byte_buffer___getitem__(self, *args)
    def __setitem__(self, *args): return _gnsdk.byte_buffer___setitem__(self, *args)
    def cast(self): return _gnsdk.byte_buffer_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _gnsdk.byte_buffer_frompointer
    if _newclass:frompointer = staticmethod(_gnsdk.byte_buffer_frompointer)
byte_buffer_swigregister = _gnsdk.byte_buffer_swigregister
byte_buffer_swigregister(byte_buffer)

def byte_buffer_frompointer(*args):
  return _gnsdk.byte_buffer_frompointer(*args)
byte_buffer_frompointer = _gnsdk.byte_buffer_frompointer

class GnsdkErrorInfoT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnsdkErrorInfoT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnsdkErrorInfoT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_code"] = _gnsdk.GnsdkErrorInfoT_error_code_set
    __swig_getmethods__["error_code"] = _gnsdk.GnsdkErrorInfoT_error_code_get
    if _newclass:error_code = _swig_property(_gnsdk.GnsdkErrorInfoT_error_code_get, _gnsdk.GnsdkErrorInfoT_error_code_set)
    __swig_setmethods__["source_error_code"] = _gnsdk.GnsdkErrorInfoT_source_error_code_set
    __swig_getmethods__["source_error_code"] = _gnsdk.GnsdkErrorInfoT_source_error_code_get
    if _newclass:source_error_code = _swig_property(_gnsdk.GnsdkErrorInfoT_source_error_code_get, _gnsdk.GnsdkErrorInfoT_source_error_code_set)
    __swig_setmethods__["error_description"] = _gnsdk.GnsdkErrorInfoT_error_description_set
    __swig_getmethods__["error_description"] = _gnsdk.GnsdkErrorInfoT_error_description_get
    if _newclass:error_description = _swig_property(_gnsdk.GnsdkErrorInfoT_error_description_get, _gnsdk.GnsdkErrorInfoT_error_description_set)
    __swig_setmethods__["error_api"] = _gnsdk.GnsdkErrorInfoT_error_api_set
    __swig_getmethods__["error_api"] = _gnsdk.GnsdkErrorInfoT_error_api_get
    if _newclass:error_api = _swig_property(_gnsdk.GnsdkErrorInfoT_error_api_get, _gnsdk.GnsdkErrorInfoT_error_api_set)
    __swig_setmethods__["error_module"] = _gnsdk.GnsdkErrorInfoT_error_module_set
    __swig_getmethods__["error_module"] = _gnsdk.GnsdkErrorInfoT_error_module_get
    if _newclass:error_module = _swig_property(_gnsdk.GnsdkErrorInfoT_error_module_get, _gnsdk.GnsdkErrorInfoT_error_module_set)
    __swig_setmethods__["source_error_module"] = _gnsdk.GnsdkErrorInfoT_source_error_module_set
    __swig_getmethods__["source_error_module"] = _gnsdk.GnsdkErrorInfoT_source_error_module_get
    if _newclass:source_error_module = _swig_property(_gnsdk.GnsdkErrorInfoT_source_error_module_get, _gnsdk.GnsdkErrorInfoT_source_error_module_set)
    def __init__(self): 
        this = _gnsdk.new_GnsdkErrorInfoT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnsdkErrorInfoT
    __del__ = lambda self : None;
GnsdkErrorInfoT_swigregister = _gnsdk.GnsdkErrorInfoT_swigregister
GnsdkErrorInfoT_swigregister(GnsdkErrorInfoT)

GNSDK_CONTENT_DATA_TYPE_VALUE_JPEG = _gnsdk.GNSDK_CONTENT_DATA_TYPE_VALUE_JPEG
GNSDK_GDO_VALUE_RESULT_SOURCE = _gnsdk.GNSDK_GDO_VALUE_RESULT_SOURCE
GNSDK_RESULT_SOURCE_ONLINE = _gnsdk.GNSDK_RESULT_SOURCE_ONLINE
GNSDK_RESULT_SOURCE_LOCAL_PRIMARY = _gnsdk.GNSDK_RESULT_SOURCE_LOCAL_PRIMARY
GNSDK_RESULT_SOURCE_LOCAL_BUNDLE = _gnsdk.GNSDK_RESULT_SOURCE_LOCAL_BUNDLE
GNSDK_RESULT_SOURCE_RENDERED = _gnsdk.GNSDK_RESULT_SOURCE_RENDERED
GNSDK_GDO_VALUE_INPUT_TOC_ALBUM = _gnsdk.GNSDK_GDO_VALUE_INPUT_TOC_ALBUM
GNSDK_GDO_VALUE_USER_DATA = _gnsdk.GNSDK_GDO_VALUE_USER_DATA
class GnException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnException, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_GnException()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnException
    __del__ = lambda self : None;
GnException_swigregister = _gnsdk.GnException_swigregister
GnException_swigregister(GnException)

class GnLocaleInfoIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLocaleInfoIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLocaleInfoIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnLocaleInfoIterator
    __del__ = lambda self : None;
    def next(self): return _gnsdk.GnLocaleInfoIterator_next(self)
    def has_next(self): return _gnsdk.GnLocaleInfoIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnLocaleInfoIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnLocaleInfoIterator(*args)
        try: self.this.append(this)
        except: self.this = this
GnLocaleInfoIterator_swigregister = _gnsdk.GnLocaleInfoIterator_swigregister
GnLocaleInfoIterator_swigregister(GnLocaleInfoIterator)

class GnLocaleInfoIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLocaleInfoIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLocaleInfoIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnLocaleInfoIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLocaleInfoIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnLocaleInfoIterable_get_iterator(self)
    def end(self): return _gnsdk.GnLocaleInfoIterable_end(self)
    def count(self): return _gnsdk.GnLocaleInfoIterable_count(self)
    def at(self, *args): return _gnsdk.GnLocaleInfoIterable_at(self, *args)
GnLocaleInfoIterable_swigregister = _gnsdk.GnLocaleInfoIterable_swigregister
GnLocaleInfoIterable_swigregister(GnLocaleInfoIterable)

kLookupModeInvalid = _gnsdk.kLookupModeInvalid
kLookupModeLocal = _gnsdk.kLookupModeLocal
kLookupModeOnline = _gnsdk.kLookupModeOnline
kLookupModeOnlineNoCache = _gnsdk.kLookupModeOnlineNoCache
kLookupModeOnlineNoCacheRead = _gnsdk.kLookupModeOnlineNoCacheRead
kLookupModeOnlineCacheOnly = _gnsdk.kLookupModeOnlineCacheOnly
kLookupDataInvalid = _gnsdk.kLookupDataInvalid
kLookupDataContent = _gnsdk.kLookupDataContent
kLookupDataClassical = _gnsdk.kLookupDataClassical
kLookupDataSonicData = _gnsdk.kLookupDataSonicData
kLookupDataPlaylist = _gnsdk.kLookupDataPlaylist
kLookupDataExternalIds = _gnsdk.kLookupDataExternalIds
kLookupDataGlobalIds = _gnsdk.kLookupDataGlobalIds
kLookupDataAdditionalCredits = _gnsdk.kLookupDataAdditionalCredits
kThreadPriorityInvalid = _gnsdk.kThreadPriorityInvalid
kThreadPriorityDefault = _gnsdk.kThreadPriorityDefault
kThreadPriorityIdle = _gnsdk.kThreadPriorityIdle
kThreadPriorityLow = _gnsdk.kThreadPriorityLow
kThreadPriorityNormal = _gnsdk.kThreadPriorityNormal
kThreadPriorityHigh = _gnsdk.kThreadPriorityHigh
kFingerprintTypeInvalid = _gnsdk.kFingerprintTypeInvalid
kFingerprintTypeFile = _gnsdk.kFingerprintTypeFile
kFingerprintTypeStream3 = _gnsdk.kFingerprintTypeStream3
kFingerprintTypeStream6 = _gnsdk.kFingerprintTypeStream6
kFingerprintTypeCMX = _gnsdk.kFingerprintTypeCMX
kFingerprintTypeGNFPX = _gnsdk.kFingerprintTypeGNFPX
kStatusUnknown = _gnsdk.kStatusUnknown
kStatusBegin = _gnsdk.kStatusBegin
kStatusProgress = _gnsdk.kStatusProgress
kStatusComplete = _gnsdk.kStatusComplete
kStatusErrorInfo = _gnsdk.kStatusErrorInfo
kStatusConnecting = _gnsdk.kStatusConnecting
kStatusSending = _gnsdk.kStatusSending
kStatusReceiving = _gnsdk.kStatusReceiving
kStatusDisconnected = _gnsdk.kStatusDisconnected
kStatusReading = _gnsdk.kStatusReading
kStatusWriting = _gnsdk.kStatusWriting
kLanguageInvalid = _gnsdk.kLanguageInvalid
kLanguageArabic = _gnsdk.kLanguageArabic
kLanguageBulgarian = _gnsdk.kLanguageBulgarian
kLanguageChineseSimplified = _gnsdk.kLanguageChineseSimplified
kLanguageChineseTraditional = _gnsdk.kLanguageChineseTraditional
kLanguageCroatian = _gnsdk.kLanguageCroatian
kLanguageCzech = _gnsdk.kLanguageCzech
kLanguageDanish = _gnsdk.kLanguageDanish
kLanguageDutch = _gnsdk.kLanguageDutch
kLanguageEnglish = _gnsdk.kLanguageEnglish
kLanguageFarsi = _gnsdk.kLanguageFarsi
kLanguageFinnish = _gnsdk.kLanguageFinnish
kLanguageFrench = _gnsdk.kLanguageFrench
kLanguageGerman = _gnsdk.kLanguageGerman
kLanguageGreek = _gnsdk.kLanguageGreek
kLanguageHungarian = _gnsdk.kLanguageHungarian
kLanguageIndonesian = _gnsdk.kLanguageIndonesian
kLanguageItalian = _gnsdk.kLanguageItalian
kLanguageJapanese = _gnsdk.kLanguageJapanese
kLanguageKorean = _gnsdk.kLanguageKorean
kLanguageNorwegian = _gnsdk.kLanguageNorwegian
kLanguagePolish = _gnsdk.kLanguagePolish
kLanguagePortuguese = _gnsdk.kLanguagePortuguese
kLanguageRomanian = _gnsdk.kLanguageRomanian
kLanguageRussian = _gnsdk.kLanguageRussian
kLanguageSerbianCyrillic = _gnsdk.kLanguageSerbianCyrillic
kLanguageSerbianLatin = _gnsdk.kLanguageSerbianLatin
kLanguageSlovak = _gnsdk.kLanguageSlovak
kLanguageSpanish = _gnsdk.kLanguageSpanish
kLanguageSwedish = _gnsdk.kLanguageSwedish
kLanguageThai = _gnsdk.kLanguageThai
kLanguageTurkish = _gnsdk.kLanguageTurkish
kLanguageVietnamese = _gnsdk.kLanguageVietnamese
kRegionDefault = _gnsdk.kRegionDefault
kRegionGlobal = _gnsdk.kRegionGlobal
kRegionUS = _gnsdk.kRegionUS
kRegionJapan = _gnsdk.kRegionJapan
kRegionChina = _gnsdk.kRegionChina
kRegionTaiwan = _gnsdk.kRegionTaiwan
kRegionKorea = _gnsdk.kRegionKorea
kRegionEurope = _gnsdk.kRegionEurope
kRegionNorthAmerica = _gnsdk.kRegionNorthAmerica
kRegionLatinAmerica = _gnsdk.kRegionLatinAmerica
kRegionIndia = _gnsdk.kRegionIndia
kDescriptorDefault = _gnsdk.kDescriptorDefault
kDescriptorSimplified = _gnsdk.kDescriptorSimplified
kDescriptorDetailed = _gnsdk.kDescriptorDetailed
kListTypeInvalid = _gnsdk.kListTypeInvalid
kListTypeLanguages = _gnsdk.kListTypeLanguages
kListTypeGenres = _gnsdk.kListTypeGenres
kListTypeOrigins = _gnsdk.kListTypeOrigins
kListTypeEras = _gnsdk.kListTypeEras
kListTypeArtistTypes = _gnsdk.kListTypeArtistTypes
kListTypeRoles = _gnsdk.kListTypeRoles
kListTypeGenreVideos = _gnsdk.kListTypeGenreVideos
kListTypeRatings = _gnsdk.kListTypeRatings
kListTypeRatingTypes = _gnsdk.kListTypeRatingTypes
kListTypeContributors = _gnsdk.kListTypeContributors
kListTypeFeatureTypes = _gnsdk.kListTypeFeatureTypes
kListTypeVideoRegions = _gnsdk.kListTypeVideoRegions
kListTypeVideoTypes = _gnsdk.kListTypeVideoTypes
kListTypeMediaTypes = _gnsdk.kListTypeMediaTypes
kListTypeVideoSerialTypes = _gnsdk.kListTypeVideoSerialTypes
kListTypeWorkTypes = _gnsdk.kListTypeWorkTypes
kListTypeMediaSpaces = _gnsdk.kListTypeMediaSpaces
kListTypeMoods = _gnsdk.kListTypeMoods
kListTypeTempos = _gnsdk.kListTypeTempos
kListTypeCompostionForm = _gnsdk.kListTypeCompostionForm
kListTypeInstrumentation = _gnsdk.kListTypeInstrumentation
kListTypeVideoStoryType = _gnsdk.kListTypeVideoStoryType
kListTypeVideoAudience = _gnsdk.kListTypeVideoAudience
kListTypeVideoMood = _gnsdk.kListTypeVideoMood
kListTypeVideoReputation = _gnsdk.kListTypeVideoReputation
kListTypeVideoScenario = _gnsdk.kListTypeVideoScenario
kListTypeVideoSettingEnv = _gnsdk.kListTypeVideoSettingEnv
kListTypeVideoSettingPeriod = _gnsdk.kListTypeVideoSettingPeriod
kListTypeVideoSource = _gnsdk.kListTypeVideoSource
kListTypeVideoStyle = _gnsdk.kListTypeVideoStyle
kListTypeVideoTopic = _gnsdk.kListTypeVideoTopic
kListTypeEpgViewingTypes = _gnsdk.kListTypeEpgViewingTypes
kListTypeEpgAudioTypes = _gnsdk.kListTypeEpgAudioTypes
kListTypeEpgVideoTypes = _gnsdk.kListTypeEpgVideoTypes
kListTypeEpgCaptionTypes = _gnsdk.kListTypeEpgCaptionTypes
kListTypeIpgCategoriesL1 = _gnsdk.kListTypeIpgCategoriesL1
kListTypeIpgCategoriesL2 = _gnsdk.kListTypeIpgCategoriesL2
kListTypeEpgProductionTypes = _gnsdk.kListTypeEpgProductionTypes
kListTypeEpgDeviceTypes = _gnsdk.kListTypeEpgDeviceTypes
kStorageTypeQueryCache = _gnsdk.kStorageTypeQueryCache
kStorageTypeListsCache = _gnsdk.kStorageTypeListsCache
kStorageTypeContentCache = _gnsdk.kStorageTypeContentCache
kContentTypeUnknown = _gnsdk.kContentTypeUnknown
kContentTypeImageCover = _gnsdk.kContentTypeImageCover
kContentTypeImageArtist = _gnsdk.kContentTypeImageArtist
kContentTypeImageVideo = _gnsdk.kContentTypeImageVideo
kContentTypeBiography = _gnsdk.kContentTypeBiography
kContentTypeReview = _gnsdk.kContentTypeReview
kContentTypeNews = _gnsdk.kContentTypeNews
kContentTypeArtistNews = _gnsdk.kContentTypeArtistNews
kContentTypeListenerComments = _gnsdk.kContentTypeListenerComments
kContentTypeReleaseComments = _gnsdk.kContentTypeReleaseComments
kImageSizeUnknown = _gnsdk.kImageSizeUnknown
kImageSize75 = _gnsdk.kImageSize75
kImageSize110 = _gnsdk.kImageSize110
kImageSize170 = _gnsdk.kImageSize170
kImageSize220 = _gnsdk.kImageSize220
kImageSize300 = _gnsdk.kImageSize300
kImageSize450 = _gnsdk.kImageSize450
kImageSize720 = _gnsdk.kImageSize720
kImageSize1080 = _gnsdk.kImageSize1080
kImageSizeThumbnail = _gnsdk.kImageSizeThumbnail
kImageSizeSmall = _gnsdk.kImageSizeSmall
kImageSizeMedium = _gnsdk.kImageSizeMedium
kImageSizeLarge = _gnsdk.kImageSizeLarge
kImageSizeXLarge = _gnsdk.kImageSizeXLarge
class GnObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
GnObject_swigregister = _gnsdk.GnObject_swigregister
GnObject_swigregister(GnObject)

class GnString(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnString, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GnString
        __init__(self, gnsdk_cstr_t str) -> GnString
        __init__(self, GnString str) -> GnString
        """
        this = _gnsdk.new_GnString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnString
    __del__ = lambda self : None;
    def c_str(self):
        """c_str(self) -> char"""
        return _gnsdk.GnString_c_str(self)

    def is_empty(self):
        """is_empty(self) -> bool"""
        return _gnsdk.GnString_is_empty(self)

    def manage(*args):
        """manage(gnsdk_cstr_t str) -> GnString"""
        return _gnsdk.GnString_manage(*args)

    if _newclass:manage = staticmethod(manage)
    __swig_getmethods__["manage"] = lambda x: manage
GnString_swigregister = _gnsdk.GnString_swigregister
GnString_swigregister(GnString)

def GnString_manage(*args):
  """GnString_manage(gnsdk_cstr_t str) -> GnString"""
  return _gnsdk.GnString_manage(*args)

class IGnCancellable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnCancellable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnCancellable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnCancellable
    __del__ = lambda self : None;
    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.IGnCancellable_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.IGnCancellable_is_cancelled(self)

IGnCancellable_swigregister = _gnsdk.IGnCancellable_swigregister
IGnCancellable_swigregister(IGnCancellable)

class IGnStatusEvents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnStatusEvents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnStatusEvents, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnStatusEvents
    __del__ = lambda self : None;
    def status_event(self, *args):
        """
        status_event(self, GNSTATUS status, gnsdk_uint32_t percentComplete, gnsdk_size_t bytesTotalSent, 
            gnsdk_size_t bytesTotalReceived, 
            IGnCancellable canceller)
        """
        return _gnsdk.IGnStatusEvents_status_event(self, *args)

    def __init__(self): 
        if self.__class__ == IGnStatusEvents:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_IGnStatusEvents(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_IGnStatusEvents(self)
        return weakref_proxy(self)
IGnStatusEvents_swigregister = _gnsdk.IGnStatusEvents_swigregister
IGnStatusEvents_swigregister(IGnStatusEvents)

class GnUserOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnUserOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnUserOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnUserOptions"""
        this = _gnsdk.new_GnUserOptions()
        try: self.this.append(this)
        except: self.this = this
    def lookup_mode(self, *args):
        """
        lookup_mode(self) -> GNLOOKUPMODE
        lookup_mode(self, GNLOOKUPMODE lookupMode)
        """
        return _gnsdk.GnUserOptions_lookup_mode(self, *args)

    def network_proxy(self, *args):
        """
        network_proxy(self) -> gnsdk_cstr_t
        network_proxy(self, gnsdk_cstr_t hostname, gnsdk_cstr_t username, gnsdk_cstr_t password)
        """
        return _gnsdk.GnUserOptions_network_proxy(self, *args)

    def network_timeout(self, *args):
        """
        network_timeout(self) -> gnsdk_uint32_t
        network_timeout(self, gnsdk_uint32_t timeout_ms)
        """
        return _gnsdk.GnUserOptions_network_timeout(self, *args)

    def network_load_balance(self, *args):
        """
        network_load_balance(self) -> bool
        network_load_balance(self, bool b_enable)
        """
        return _gnsdk.GnUserOptions_network_load_balance(self, *args)

    def user_info(self, *args):
        """
        user_info(self, gnsdk_cstr_t location_id, gnsdk_cstr_t mfg, gnsdk_cstr_t os, 
            gnsdk_cstr_t uid)
        """
        return _gnsdk.GnUserOptions_user_info(self, *args)

    def cache_expiration(self, *args):
        """
        cache_expiration(self) -> gnsdk_uint32_t
        cache_expiration(self, gnsdk_uint32_t durationSec)
        """
        return _gnsdk.GnUserOptions_cache_expiration(self, *args)

    def service_url(self, *args):
        """service_url(self, gnsdk_cstr_t base_url)"""
        return _gnsdk.GnUserOptions_service_url(self, *args)

    def custom(self, *args):
        """
        custom(self, gnsdk_cstr_t key) -> gnsdk_cstr_t
        custom(self, gnsdk_cstr_t key, gnsdk_cstr_t value)
        """
        return _gnsdk.GnUserOptions_custom(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnUserOptions
    __del__ = lambda self : None;
GnUserOptions_swigregister = _gnsdk.GnUserOptions_swigregister
GnUserOptions_swigregister(GnUserOptions)

class GnUser(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnUser, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnUser, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GnUser
        __init__(self, gnsdk_cstr_t serializedUser, gnsdk_cstr_t clientIdTest = (0)) -> GnUser
        __init__(self, gnsdk_cstr_t serializedUser) -> GnUser
        __init__(self, IGnUserStore userStore, gnsdk_cstr_t clientId, gnsdk_cstr_t clientTag, 
            gnsdk_cstr_t applicationVersion) -> GnUser
        """
        this = _gnsdk.new_GnUser(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_local_only(self):
        """is_local_only(self) -> bool"""
        return _gnsdk.GnUser_is_local_only(self)

    def options(self):
        """options(self) -> GnUserOptions"""
        return _gnsdk.GnUser_options(self)

    __swig_destroy__ = _gnsdk.delete_GnUser
    __del__ = lambda self : None;
GnUser_swigregister = _gnsdk.GnUser_swigregister
GnUser_swigregister(GnUser)

kLicenseInputModeInvalid = _gnsdk.kLicenseInputModeInvalid
kLicenseInputModeString = _gnsdk.kLicenseInputModeString
kLicenseInputModeFilename = _gnsdk.kLicenseInputModeFilename
kLicenseInputModeStandardIn = _gnsdk.kLicenseInputModeStandardIn
kUserRegisterModeOnline = _gnsdk.kUserRegisterModeOnline
kUserRegisterModeLocalOnly = _gnsdk.kUserRegisterModeLocalOnly
class GnSDK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnSDK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnSDK, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnSDK
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnSDK_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def product_version():
        """product_version() -> gnsdk_cstr_t"""
        return _gnsdk.GnSDK_product_version()

    if _newclass:product_version = staticmethod(product_version)
    __swig_getmethods__["product_version"] = lambda x: product_version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnSDK_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def global_id_magic():
        """global_id_magic() -> gnsdk_cstr_t"""
        return _gnsdk.GnSDK_global_id_magic()

    if _newclass:global_id_magic = staticmethod(global_id_magic)
    __swig_getmethods__["global_id_magic"] = lambda x: global_id_magic
    def user_register(self, *args):
        """
        user_register(self, GNUSERREGISTERMODE registerMode, gnsdk_cstr_t clientId, 
            gnsdk_cstr_t clientTag, gnsdk_cstr_t applicationVersion) -> GnString
        """
        return _gnsdk.GnSDK_user_register(self, *args)

    def storage_location(self, *args):
        """storage_location(self, GNSTORAGETYPE storage, gnsdk_cstr_t location)"""
        return _gnsdk.GnSDK_storage_location(self, *args)

    def storage_flush(self, *args):
        """storage_flush(self, GNSTORAGETYPE storage, bool bAsync)"""
        return _gnsdk.GnSDK_storage_flush(self, *args)

    def storage_compact(self, *args):
        """storage_compact(self, GNSTORAGETYPE storage, bool bAsync)"""
        return _gnsdk.GnSDK_storage_compact(self, *args)

    def storage_cleanup(self, *args):
        """storage_cleanup(self, GNSTORAGETYPE storage, bool bAsync)"""
        return _gnsdk.GnSDK_storage_cleanup(self, *args)

    def test_gracenote_connection(self, *args):
        """test_gracenote_connection(self, GnUser user)"""
        return _gnsdk.GnSDK_test_gracenote_connection(self, *args)

    def init_gnsdk_module(*args):
        """init_gnsdk_module(gnsdk_uint32_t module_id)"""
        return _gnsdk.GnSDK_init_gnsdk_module(*args)

    if _newclass:init_gnsdk_module = staticmethod(init_gnsdk_module)
    __swig_getmethods__["init_gnsdk_module"] = lambda x: init_gnsdk_module
    def is_initialized():
        """is_initialized() -> bool"""
        return _gnsdk.GnSDK_is_initialized()

    if _newclass:is_initialized = staticmethod(is_initialized)
    __swig_getmethods__["is_initialized"] = lambda x: is_initialized
    def addref():
        """addref()"""
        return _gnsdk.GnSDK_addref()

    if _newclass:addref = staticmethod(addref)
    __swig_getmethods__["addref"] = lambda x: addref
    def release():
        """release()"""
        return _gnsdk.GnSDK_release()

    if _newclass:release = staticmethod(release)
    __swig_getmethods__["release"] = lambda x: release
    def __init__(self, *args): 
        this = _gnsdk.new_GnSDK(*args)
        try: self.this.append(this)
        except: self.this = this
GnSDK_swigregister = _gnsdk.GnSDK_swigregister
GnSDK_swigregister(GnSDK)

def GnSDK_version():
  """GnSDK_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnSDK_version()

def GnSDK_product_version():
  """GnSDK_product_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnSDK_product_version()

def GnSDK_build_date():
  """GnSDK_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnSDK_build_date()

def GnSDK_global_id_magic():
  """GnSDK_global_id_magic() -> gnsdk_cstr_t"""
  return _gnsdk.GnSDK_global_id_magic()

def GnSDK_init_gnsdk_module(*args):
  """GnSDK_init_gnsdk_module(gnsdk_uint32_t module_id)"""
  return _gnsdk.GnSDK_init_gnsdk_module(*args)

def GnSDK_is_initialized():
  """GnSDK_is_initialized() -> bool"""
  return _gnsdk.GnSDK_is_initialized()

def GnSDK_addref():
  """GnSDK_addref()"""
  return _gnsdk.GnSDK_addref()

def GnSDK_release():
  """GnSDK_release()"""
  return _gnsdk.GnSDK_release()

class GnError(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnError, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnError(*args)
        try: self.this.append(this)
        except: self.this = this
    def error_code(self): return _gnsdk.GnError_error_code(self)
    def error_description(self): return _gnsdk.GnError_error_description(self)
    def error_api(self): return _gnsdk.GnError_error_api(self)
    def error_module(self): return _gnsdk.GnError_error_module(self)
    def source_error_code(self): return _gnsdk.GnError_source_error_code(self)
    def source_error_module(self): return _gnsdk.GnError_source_error_module(self)
    __swig_destroy__ = _gnsdk.delete_GnError
    __del__ = lambda self : None;
GnError_swigregister = _gnsdk.GnError_swigregister
GnError_swigregister(GnError)

kDataLevelInvalid = _gnsdk.kDataLevelInvalid
kDataLevel_1 = _gnsdk.kDataLevel_1
kDataLevel_2 = _gnsdk.kDataLevel_2
kDataLevel_3 = _gnsdk.kDataLevel_3
kDataLevel_4 = _gnsdk.kDataLevel_4
class GnRenderOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnRenderOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnRenderOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnRenderOptions"""
        this = _gnsdk.new_GnRenderOptions()
        try: self.this.append(this)
        except: self.this = this
    def xml(self):
        """xml(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_xml(self)

    def json(self):
        """json(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_json(self)

    def standard(self):
        """standard(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_standard(self)

    def credits(self):
        """credits(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_credits(self)

    def sortable(self):
        """sortable(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_sortable(self)

    def serial_gdos(self):
        """serial_gdos(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_serial_gdos(self)

    def product_ids(self):
        """product_ids(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_product_ids(self)

    def raw_tuis(self):
        """raw_tuis(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_raw_tuis(self)

    def gn_ids(self):
        """gn_ids(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_gn_ids(self)

    def gn_uids(self):
        """gn_uids(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_gn_uids(self)

    def genres(self, *args):
        """genres(self, GNDATALEVEL level) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_genres(self, *args)

    def default(self):
        """default(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_default(self)

    def full(self):
        """full(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_full(self)

    def clear(self):
        """clear(self) -> GnRenderOptions"""
        return _gnsdk.GnRenderOptions_clear(self)

    __swig_destroy__ = _gnsdk.delete_GnRenderOptions
    __del__ = lambda self : None;
GnRenderOptions_swigregister = _gnsdk.GnRenderOptions_swigregister
GnRenderOptions_swigregister(GnRenderOptions)

class GnDataObject(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnDataObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GnDataObject
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag, gnsdk_cstr_t idSrc) -> GnDataObject
        """
        this = _gnsdk.new_GnDataObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def deserialize(*args):
        """deserialize(gnsdk_cstr_t serializedGdo) -> GnDataObject"""
        return _gnsdk.GnDataObject_deserialize(*args)

    if _newclass:deserialize = staticmethod(deserialize)
    __swig_getmethods__["deserialize"] = lambda x: deserialize
    def create_from_xml(*args):
        """create_from_xml(gnsdk_cstr_t xml) -> GnDataObject"""
        return _gnsdk.GnDataObject_create_from_xml(*args)

    if _newclass:create_from_xml = staticmethod(create_from_xml)
    __swig_getmethods__["create_from_xml"] = lambda x: create_from_xml
    def is_null(self):
        """is_null(self) -> bool"""
        return _gnsdk.GnDataObject_is_null(self)

    def serialize(self):
        """serialize(self) -> GnString"""
        return _gnsdk.GnDataObject_serialize(self)

    def string_value(self, *args):
        """
        string_value(self, gnsdk_cstr_t valueKey, gnsdk_uint32_t ordinal = 1) -> gnsdk_cstr_t
        string_value(self, gnsdk_cstr_t valueKey) -> gnsdk_cstr_t
        """
        return _gnsdk.GnDataObject_string_value(self, *args)

    def child_count(self, *args):
        """child_count(self, gnsdk_cstr_t childKey) -> gnsdk_uint32_t"""
        return _gnsdk.GnDataObject_child_count(self, *args)

    def render(self, *args):
        """render(self, GnRenderOptions options) -> GnString"""
        return _gnsdk.GnDataObject_render(self, *args)

    def locale(self, *args):
        """locale(self, GnLocale locale)"""
        return _gnsdk.GnDataObject_locale(self, *args)

    def get_type(self):
        """get_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnDataObject_get_type(self)

    def is_type(self, *args):
        """is_type(self, gnsdk_cstr_t strType) -> bool"""
        return _gnsdk.GnDataObject_is_type(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnDataObject
    __del__ = lambda self : None;
GnDataObject_swigregister = _gnsdk.GnDataObject_swigregister
GnDataObject_swigregister(GnDataObject)

def GnDataObject_deserialize(*args):
  """GnDataObject_deserialize(gnsdk_cstr_t serializedGdo) -> GnDataObject"""
  return _gnsdk.GnDataObject_deserialize(*args)

def GnDataObject_create_from_xml(*args):
  """GnDataObject_create_from_xml(gnsdk_cstr_t xml) -> GnDataObject"""
  return _gnsdk.GnDataObject_create_from_xml(*args)

class GnAsset(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAsset, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAsset, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnAsset"""
        this = _gnsdk.new_GnAsset()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAsset
    __del__ = lambda self : None;
    def dimension(self):
        """dimension(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAsset_dimension(self)

    def bytes(self):
        """bytes(self) -> int"""
        return _gnsdk.GnAsset_bytes(self)

    def size(self):
        """size(self) -> GNIMAGESIZE"""
        return _gnsdk.GnAsset_size(self)

    def url(self):
        """url(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAsset_url(self)

GnAsset_swigregister = _gnsdk.GnAsset_swigregister
GnAsset_swigregister(GnAsset)

class GnContent(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContent, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnContent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnContent"""
        this = _gnsdk.new_GnContent()
        try: self.this.append(this)
        except: self.this = this
    def id(self):
        """id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContent_id(self)

    def content_type(self):
        """content_type(self) -> GNCONTENTTYPE"""
        return _gnsdk.GnContent_content_type(self)

    def mime_type(self):
        """mime_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContent_mime_type(self)

    def asset(self, *args):
        """asset(self, GNIMAGESIZE imageSize) -> GnAsset"""
        return _gnsdk.GnContent_asset(self, *args)

    def assets(self):
        """assets(self) -> gracenote::gn_iterable_container<(gracenote::metadata::asset_iterator)>"""
        return _gnsdk.GnContent_assets(self)

    __swig_destroy__ = _gnsdk.delete_GnContent
    __del__ = lambda self : None;
GnContent_swigregister = _gnsdk.GnContent_swigregister
GnContent_swigregister(GnContent)

class GnExternalId(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnExternalId, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnExternalId, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnExternalId_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnExternalId"""
        return _gnsdk.GnExternalId__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnExternalId"""
        this = _gnsdk.new_GnExternalId()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnExternalId
    __del__ = lambda self : None;
    def source(self):
        """source(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnExternalId_source(self)

    def type(self):
        """type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnExternalId_type(self)

    def value(self):
        """value(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnExternalId_value(self)

GnExternalId_swigregister = _gnsdk.GnExternalId_swigregister
GnExternalId_swigregister(GnExternalId)

def GnExternalId_gn_type():
  """GnExternalId_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnExternalId_gn_type()

def GnExternalId__From(*args):
  """GnExternalId__From(GnDataObject obj) -> GnExternalId"""
  return _gnsdk.GnExternalId__From(*args)

class GnRole(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnRole, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnRole, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnRole"""
        this = _gnsdk.new_GnRole()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnRole
    __del__ = lambda self : None;
    def category(self):
        """category(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRole_category(self)

    def role(self):
        """role(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRole_role(self)

GnRole_swigregister = _gnsdk.GnRole_swigregister
GnRole_swigregister(GnRole)

class GnName(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnName, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnName, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnName_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnName"""
        return _gnsdk.GnName__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnName"""
        this = _gnsdk.new_GnName()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnName
    __del__ = lambda self : None;
    def language(self):
        """language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_language(self)

    def language_code(self):
        """language_code(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_language_code(self)

    def display(self):
        """display(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_display(self)

    def sortable(self):
        """sortable(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_sortable(self)

    def sortable_scheme(self):
        """sortable_scheme(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_sortable_scheme(self)

    def prefix(self):
        """prefix(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_prefix(self)

    def family(self):
        """family(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_family(self)

    def given(self):
        """given(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_given(self)

    def global_id(self):
        """global_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnName_global_id(self)

GnName_swigregister = _gnsdk.GnName_swigregister
GnName_swigregister(GnName)

def GnName_gn_type():
  """GnName_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnName_gn_type()

def GnName__From(*args):
  """GnName__From(GnDataObject obj) -> GnName"""
  return _gnsdk.GnName__From(*args)

class GnTitle(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTitle, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTitle, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnTitle"""
        return _gnsdk.GnTitle__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnTitle"""
        this = _gnsdk.new_GnTitle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTitle
    __del__ = lambda self : None;
    def language(self):
        """language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_language(self)

    def language_code(self):
        """language_code(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_language_code(self)

    def display(self):
        """display(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_display(self)

    def prefix(self):
        """prefix(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_prefix(self)

    def sortable(self):
        """sortable(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_sortable(self)

    def sortable_scheme(self):
        """sortable_scheme(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_sortable_scheme(self)

    def main_title(self):
        """main_title(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_main_title(self)

    def edition(self):
        """edition(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTitle_edition(self)

GnTitle_swigregister = _gnsdk.GnTitle_swigregister
GnTitle_swigregister(GnTitle)

def GnTitle_gn_type():
  """GnTitle_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnTitle_gn_type()

def GnTitle__From(*args):
  """GnTitle__From(GnDataObject obj) -> GnTitle"""
  return _gnsdk.GnTitle__From(*args)

class GnContributor(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContributor, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnContributor, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnContributor"""
        return _gnsdk.GnContributor__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnContributor
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnContributor
        """
        this = _gnsdk.new_GnContributor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContributor
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnContributor_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_tui_tag(self)

    def biography(self):
        """biography(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_biography(self)

    def birth_date(self):
        """birth_date(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_birth_date(self)

    def birth_place(self):
        """birth_place(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_birth_place(self)

    def death_date(self):
        """death_date(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_death_date(self)

    def death_place(self):
        """death_place(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_death_place(self)

    def media_space(self):
        """media_space(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_media_space(self)

    def content(self, *args):
        """content(self, GNCONTENTTYPE contentType) -> GnContent"""
        return _gnsdk.GnContributor_content(self, *args)

    def name(self):
        """name(self) -> GnName"""
        return _gnsdk.GnContributor_name(self)

    def names_official(self):
        """names_official(self) -> gracenote::gn_iterable_container<(gracenote::metadata::name_iterator)>"""
        return _gnsdk.GnContributor_names_official(self)

    def names_regional(self):
        """names_regional(self) -> gracenote::gn_iterable_container<(gracenote::metadata::name_iterator)>"""
        return _gnsdk.GnContributor_names_regional(self)

    def contents(self):
        """contents(self) -> gracenote::gn_iterable_container<(gracenote::metadata::content_iterator)>"""
        return _gnsdk.GnContributor_contents(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnContributor_external_ids(self)

    def collaborator(self):
        """collaborator(self) -> GnContributor"""
        return _gnsdk.GnContributor_collaborator(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_genre(self, *args)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_origin(self, *args)

    def era(self, *args):
        """era(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_era(self, *args)

    def artist_type(self, *args):
        """artist_type(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnContributor_artist_type(self, *args)

    def collaborator_result(self):
        """collaborator_result(self) -> bool"""
        return _gnsdk.GnContributor_collaborator_result(self)

GnContributor_swigregister = _gnsdk.GnContributor_swigregister
GnContributor_swigregister(GnContributor)

def GnContributor_gn_type():
  """GnContributor_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnContributor_gn_type()

def GnContributor__From(*args):
  """GnContributor__From(GnDataObject obj) -> GnContributor"""
  return _gnsdk.GnContributor__From(*args)

class GnCredit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnCredit, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnCredit_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnCredit"""
        return _gnsdk.GnCredit__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnCredit"""
        this = _gnsdk.new_GnCredit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCredit
    __del__ = lambda self : None;
    def name(self):
        """name(self) -> GnName"""
        return _gnsdk.GnCredit_name(self)

    def role(self):
        """role(self) -> GnRole"""
        return _gnsdk.GnCredit_role(self)

    def contributor(self):
        """contributor(self) -> GnContributor"""
        return _gnsdk.GnCredit_contributor(self)

GnCredit_swigregister = _gnsdk.GnCredit_swigregister
GnCredit_swigregister(GnCredit)

def GnCredit_gn_type():
  """GnCredit_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnCredit_gn_type()

def GnCredit__From(*args):
  """GnCredit__From(GnDataObject obj) -> GnCredit"""
  return _gnsdk.GnCredit__From(*args)

class GnAudioWork(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAudioWork, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAudioWork, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnAudioWork"""
        return _gnsdk.GnAudioWork__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnAudioWork"""
        this = _gnsdk.new_GnAudioWork()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAudioWork
    __del__ = lambda self : None;
    def title(self):
        """title(self) -> GnTitle"""
        return _gnsdk.GnAudioWork_title(self)

    def credit(self):
        """credit(self) -> GnCredit"""
        return _gnsdk.GnAudioWork_credit(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_tui_tag(self)

    def tag_id(self):
        """tag_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_tag_id(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_gn_uid(self)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_origin(self, *args)

    def era(self, *args):
        """era(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_era(self, *args)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_genre(self, *args)

    def composition_form(self):
        """composition_form(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAudioWork_composition_form(self)

GnAudioWork_swigregister = _gnsdk.GnAudioWork_swigregister
GnAudioWork_swigregister(GnAudioWork)

def GnAudioWork_gn_type():
  """GnAudioWork_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnAudioWork_gn_type()

def GnAudioWork__From(*args):
  """GnAudioWork__From(GnDataObject obj) -> GnAudioWork"""
  return _gnsdk.GnAudioWork__From(*args)

class GnArtist(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnArtist, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnArtist, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnArtist_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnArtist"""
        return _gnsdk.GnArtist__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnArtist"""
        this = _gnsdk.new_GnArtist()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnArtist
    __del__ = lambda self : None;
    def name(self):
        """name(self) -> GnName"""
        return _gnsdk.GnArtist_name(self)

    def contributor(self):
        """contributor(self) -> GnContributor"""
        return _gnsdk.GnArtist_contributor(self)

GnArtist_swigregister = _gnsdk.GnArtist_swigregister
GnArtist_swigregister(GnArtist)

def GnArtist_gn_type():
  """GnArtist_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnArtist_gn_type()

def GnArtist__From(*args):
  """GnArtist__From(GnDataObject obj) -> GnArtist"""
  return _gnsdk.GnArtist__From(*args)

class GnTrack(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrack, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrack, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnTrack"""
        return _gnsdk.GnTrack__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnTrack
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnTrack
        """
        this = _gnsdk.new_GnTrack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrack
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnTrack_is_full_result(self)

    def title(self):
        """title(self) -> GnTitle"""
        return _gnsdk.GnTrack_title(self)

    def artist(self):
        """artist(self) -> GnArtist"""
        return _gnsdk.GnTrack_artist(self)

    def work(self):
        """work(self) -> GnAudioWork"""
        return _gnsdk.GnTrack_work(self)

    def mood(self, *args):
        """mood(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_mood(self, *args)

    def tempo(self, *args):
        """tempo(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_tempo(self, *args)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_genre(self, *args)

    def content(self, *args):
        """content(self, GNCONTENTTYPE contentType) -> GnContent"""
        return _gnsdk.GnTrack_content(self, *args)

    def matched(self):
        """matched(self) -> bool"""
        return _gnsdk.GnTrack_matched(self)

    def match_position(self):
        """match_position(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnTrack_match_position(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnTrack_duration(self)

    def credits(self):
        """credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::credit_iterator)>"""
        return _gnsdk.GnTrack_credits(self)

    def contents(self):
        """contents(self) -> gracenote::gn_iterable_container<(gracenote::metadata::content_iterator)>"""
        return _gnsdk.GnTrack_contents(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnTrack_external_ids(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_tui_tag(self)

    def tag_id(self):
        """tag_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_tag_id(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_gn_uid(self)

    def track_number(self):
        """track_number(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_track_number(self)

    def year(self):
        """year(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_year(self)

    def matched_ident(self):
        """matched_ident(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_matched_ident(self)

    def matched_filename(self):
        """matched_filename(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_matched_filename(self)

    def match_lookup_type(self):
        """match_lookup_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_match_lookup_type(self)

    def match_confidence(self):
        """match_confidence(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTrack_match_confidence(self)

    def match_score(self):
        """match_score(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnTrack_match_score(self)

    def title_tls(self):
        """title_tls(self) -> GnTitle"""
        return _gnsdk.GnTrack_title_tls(self)

    def title_regional(self):
        """title_regional(self) -> GnTitle"""
        return _gnsdk.GnTrack_title_regional(self)

GnTrack_swigregister = _gnsdk.GnTrack_swigregister
GnTrack_swigregister(GnTrack)

def GnTrack_gn_type():
  """GnTrack_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnTrack_gn_type()

def GnTrack__From(*args):
  """GnTrack__From(GnDataObject obj) -> GnTrack"""
  return _gnsdk.GnTrack__From(*args)

class GnResponseTracks(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseTracks, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseTracks, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseTracks_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseTracks"""
        return _gnsdk.GnResponseTracks__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseTracks"""
        this = _gnsdk.new_GnResponseTracks()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseTracks
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseTracks_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseTracks_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseTracks_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseTracks_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseTracks_needs_decision(self)

    def tracks(self):
        """tracks(self) -> gracenote::gn_iterable_container<(gracenote::metadata::track_iterator)>"""
        return _gnsdk.GnResponseTracks_tracks(self)

GnResponseTracks_swigregister = _gnsdk.GnResponseTracks_swigregister
GnResponseTracks_swigregister(GnResponseTracks)

def GnResponseTracks_gn_type():
  """GnResponseTracks_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseTracks_gn_type()

def GnResponseTracks__From(*args):
  """GnResponseTracks__From(GnDataObject obj) -> GnResponseTracks"""
  return _gnsdk.GnResponseTracks__From(*args)

class GnAlbum(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAlbum, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAlbum, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnAlbum"""
        return _gnsdk.GnAlbum__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnAlbum
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnAlbum
        """
        this = _gnsdk.new_GnAlbum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAlbum
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnAlbum_is_full_result(self)

    def title(self):
        """title(self) -> GnTitle"""
        return _gnsdk.GnAlbum_title(self)

    def artist(self):
        """artist(self) -> GnArtist"""
        return _gnsdk.GnAlbum_artist(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_genre(self, *args)

    def label(self):
        """label(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_label(self)

    def language(self):
        """language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_language(self)

    def language_code(self):
        """language_code(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_language_code(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_tui_tag(self)

    def tag_id(self):
        """tag_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_tag_id(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_gn_uid(self)

    def global_id(self):
        """global_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_global_id(self)

    def disc_in_set(self):
        """disc_in_set(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnAlbum_disc_in_set(self)

    def total_in_set(self):
        """total_in_set(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnAlbum_total_in_set(self)

    def year(self):
        """year(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_year(self)

    def is_classical(self):
        """is_classical(self) -> bool"""
        return _gnsdk.GnAlbum_is_classical(self)

    def track_count(self):
        """track_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnAlbum_track_count(self)

    def compilation(self):
        """compilation(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAlbum_compilation(self)

    def match_score(self):
        """match_score(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnAlbum_match_score(self)

    def match_position(self):
        """match_position(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnAlbum_match_position(self)

    def track(self, *args):
        """track(self, gnsdk_uint32_t trackNumber) -> GnTrack"""
        return _gnsdk.GnAlbum_track(self, *args)

    def track_matched(self, ordinal = 1):
        """
        track_matched(self, gnsdk_uint32_t ordinal = 1) -> GnTrack
        track_matched(self) -> GnTrack
        """
        return _gnsdk.GnAlbum_track_matched(self, ordinal)

    def track_match_number(self, ordinal = 1):
        """
        track_match_number(self, gnsdk_uint32_t ordinal = 1) -> gnsdk_uint32_t
        track_match_number(self) -> gnsdk_uint32_t
        """
        return _gnsdk.GnAlbum_track_match_number(self, ordinal)

    def content(self, *args):
        """content(self, GNCONTENTTYPE contentType) -> GnContent"""
        return _gnsdk.GnAlbum_content(self, *args)

    def tracks(self):
        """tracks(self) -> gracenote::gn_iterable_container<(gracenote::metadata::track_iterator)>"""
        return _gnsdk.GnAlbum_tracks(self)

    def tracks_matched(self):
        """tracks_matched(self) -> gracenote::gn_iterable_container<(gracenote::metadata::track_iterator)>"""
        return _gnsdk.GnAlbum_tracks_matched(self)

    def credits(self):
        """credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::credit_iterator)>"""
        return _gnsdk.GnAlbum_credits(self)

    def contents(self):
        """contents(self) -> gracenote::gn_iterable_container<(gracenote::metadata::content_iterator)>"""
        return _gnsdk.GnAlbum_contents(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnAlbum_external_ids(self)

    def title_tls(self):
        """title_tls(self) -> GnTitle"""
        return _gnsdk.GnAlbum_title_tls(self)

    def title_regional(self):
        """title_regional(self) -> GnTitle"""
        return _gnsdk.GnAlbum_title_regional(self)

    def title_regional_locale(self):
        """title_regional_locale(self) -> GnTitle"""
        return _gnsdk.GnAlbum_title_regional_locale(self)

GnAlbum_swigregister = _gnsdk.GnAlbum_swigregister
GnAlbum_swigregister(GnAlbum)

def GnAlbum_gn_type():
  """GnAlbum_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnAlbum_gn_type()

def GnAlbum__From(*args):
  """GnAlbum__From(GnDataObject obj) -> GnAlbum"""
  return _gnsdk.GnAlbum__From(*args)

class GnResponseAlbums(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseAlbums, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseAlbums, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseAlbums_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseAlbums"""
        return _gnsdk.GnResponseAlbums__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseAlbums"""
        this = _gnsdk.new_GnResponseAlbums()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseAlbums
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAlbums_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAlbums_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAlbums_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAlbums_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseAlbums_needs_decision(self)

    def albums(self):
        """albums(self) -> gracenote::gn_iterable_container<(gracenote::metadata::album_iterator)>"""
        return _gnsdk.GnResponseAlbums_albums(self)

GnResponseAlbums_swigregister = _gnsdk.GnResponseAlbums_swigregister
GnResponseAlbums_swigregister(GnResponseAlbums)

def GnResponseAlbums_gn_type():
  """GnResponseAlbums_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseAlbums_gn_type()

def GnResponseAlbums__From(*args):
  """GnResponseAlbums__From(GnDataObject obj) -> GnResponseAlbums"""
  return _gnsdk.GnResponseAlbums__From(*args)

class GnMatch(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMatch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMatch"""
        this = _gnsdk.new_GnMatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMatch
    __del__ = lambda self : None;
    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMatch_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMatch_tui_tag(self)

    def match_info(self):
        """match_info(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMatch_match_info(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnMatch_external_ids(self)

GnMatch_swigregister = _gnsdk.GnMatch_swigregister
GnMatch_swigregister(GnMatch)

class GnResponseMatches(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseMatches, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseMatches, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnResponseMatches"""
        this = _gnsdk.new_GnResponseMatches()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseMatches
    __del__ = lambda self : None;
    def matches(self):
        """matches(self) -> gracenote::gn_iterable_container<(gracenote::metadata::match_iterator)>"""
        return _gnsdk.GnResponseMatches_matches(self)

GnResponseMatches_swigregister = _gnsdk.GnResponseMatches_swigregister
GnResponseMatches_swigregister(GnResponseMatches)

class GnDataMatch(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDataMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnDataMatch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnDataMatch"""
        this = _gnsdk.new_GnDataMatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnDataMatch
    __del__ = lambda self : None;
    def is_album(self):
        """is_album(self) -> bool"""
        return _gnsdk.GnDataMatch_is_album(self)

    def is_contributor(self):
        """is_contributor(self) -> bool"""
        return _gnsdk.GnDataMatch_is_contributor(self)

    def get_as_album(self):
        """get_as_album(self) -> GnAlbum"""
        return _gnsdk.GnDataMatch_get_as_album(self)

    def get_as_contributor(self):
        """get_as_contributor(self) -> GnContributor"""
        return _gnsdk.GnDataMatch_get_as_contributor(self)

GnDataMatch_swigregister = _gnsdk.GnDataMatch_swigregister
GnDataMatch_swigregister(GnDataMatch)

class GnResponseDataMatches(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseDataMatches, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseDataMatches, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnResponseDataMatches"""
        this = _gnsdk.new_GnResponseDataMatches()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseDataMatches
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseDataMatches_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseDataMatches_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseDataMatches_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseDataMatches_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseDataMatches_needs_decision(self)

    def data_matches(self):
        """data_matches(self) -> gracenote::gn_iterable_container<(gracenote::metadata::datamatch_iterator)>"""
        return _gnsdk.GnResponseDataMatches_data_matches(self)

GnResponseDataMatches_swigregister = _gnsdk.GnResponseDataMatches_swigregister
GnResponseDataMatches_swigregister(GnResponseDataMatches)

class GnContentProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContentProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContentProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnContentProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContentProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnContentProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnContentProvider_count(self)
    k_ordinal_start = _gnsdk.GnContentProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnContentProvider_k_count_offset
GnContentProvider_swigregister = _gnsdk.GnContentProvider_swigregister
GnContentProvider_swigregister(GnContentProvider)

class GnContentIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContentIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnContentIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnContentIterator__next(self)
    def has_next(self): return _gnsdk.GnContentIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnContentIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnContentIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnContentIterator_swigregister = _gnsdk.GnContentIterator_swigregister
GnContentIterator_swigregister(GnContentIterator)

class GnContentIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContentIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContentIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnContentIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContentIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnContentIterable_get_iterator(self)
    def end(self): return _gnsdk.GnContentIterable_end(self)
    def count(self): return _gnsdk.GnContentIterable_count(self)
    def at(self, *args): return _gnsdk.GnContentIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnContentIterable_swigregister = _gnsdk.GnContentIterable_swigregister
GnContentIterable_swigregister(GnContentIterable)

class GnListElementChildEnumerable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnListElementChildEnumerable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnListElementChildEnumerable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnListElementChildEnumerable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnListElementChildEnumerable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnListElementChildEnumerable_begin(self)
    def end(self): return _gnsdk.GnListElementChildEnumerable_end(self)
    def count(self): return _gnsdk.GnListElementChildEnumerable_count(self)
    def at(self, *args): return _gnsdk.GnListElementChildEnumerable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnListElementChildEnumerable_swigregister = _gnsdk.GnListElementChildEnumerable_swigregister
GnListElementChildEnumerable_swigregister(GnListElementChildEnumerable)

class GnListElementChildEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnListElementChildEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnListElementChildEnumerator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnListElementChildEnumerator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnListElementChildEnumerator___ref__(self)
    def _next(self): return _gnsdk.GnListElementChildEnumerator__next(self)
    def has_next(self): return _gnsdk.GnListElementChildEnumerator_has_next(self)
    def distance(self, *args): return _gnsdk.GnListElementChildEnumerator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnListElementChildEnumerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnListElementChildEnumerator_swigregister = _gnsdk.GnListElementChildEnumerator_swigregister
GnListElementChildEnumerator_swigregister(GnListElementChildEnumerator)

class GnListElementEnumerable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnListElementEnumerable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnListElementEnumerable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnListElementEnumerable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnListElementEnumerable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnListElementEnumerable_begin(self)
    def end(self): return _gnsdk.GnListElementEnumerable_end(self)
    def count(self): return _gnsdk.GnListElementEnumerable_count(self)
    def at(self, *args): return _gnsdk.GnListElementEnumerable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnListElementEnumerable_swigregister = _gnsdk.GnListElementEnumerable_swigregister
GnListElementEnumerable_swigregister(GnListElementEnumerable)

class GnListElementEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnListElementEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnListElementEnumerator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnListElementEnumerator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnListElementEnumerator___ref__(self)
    def _next(self): return _gnsdk.GnListElementEnumerator__next(self)
    def has_next(self): return _gnsdk.GnListElementEnumerator_has_next(self)
    def distance(self, *args): return _gnsdk.GnListElementEnumerator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnListElementEnumerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnListElementEnumerator_swigregister = _gnsdk.GnListElementEnumerator_swigregister
GnListElementEnumerator_swigregister(GnListElementEnumerator)

kRenderDefault = _gnsdk.kRenderDefault
kRenderMinimal = _gnsdk.kRenderMinimal
kRenderFull = _gnsdk.kRenderFull
class ListElementChildProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListElementChildProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListElementChildProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_ListElementChildProvider()
        try: self.this.append(this)
        except: self.this = this
    def get_data(self, *args): return _gnsdk.ListElementChildProvider_get_data(self, *args)
    __swig_destroy__ = _gnsdk.delete_ListElementChildProvider
    __del__ = lambda self : None;
ListElementChildProvider_swigregister = _gnsdk.ListElementChildProvider_swigregister
ListElementChildProvider_swigregister(ListElementChildProvider)

class GnListElement(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnListElement, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnListElement, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnListElement"""
        this = _gnsdk.new_GnListElement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnListElement
    __del__ = lambda self : None;
    def display_string(self):
        """display_string(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnListElement_display_string(self)

    def id(self):
        """id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnListElement_id(self)

    def id_for_submit(self):
        """id_for_submit(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnListElement_id_for_submit(self)

    def description(self):
        """description(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnListElement_description(self)

    def rating_type_id(self):
        """rating_type_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnListElement_rating_type_id(self)

    def parent(self):
        """parent(self) -> GnListElement"""
        return _gnsdk.GnListElement_parent(self)

    def level(self):
        """level(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnListElement_level(self)

    def children(self):
        """children(self) -> gracenote::gn_iterable_container<(gracenote::list_element_child_iterator)>"""
        return _gnsdk.GnListElement_children(self)

GnListElement_swigregister = _gnsdk.GnListElement_swigregister
GnListElement_swigregister(GnListElement)

class ListElementProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListElementProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListElementProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_ListElementProvider()
        try: self.this.append(this)
        except: self.this = this
    def get_data(self, *args): return _gnsdk.ListElementProvider_get_data(self, *args)
    __swig_destroy__ = _gnsdk.delete_ListElementProvider
    __del__ = lambda self : None;
ListElementProvider_swigregister = _gnsdk.ListElementProvider_swigregister
ListElementProvider_swigregister(ListElementProvider)

class GnList(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnList, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GNLISTTYPE listType, GNLANGUAGE language, GNREGION region, 
            GNDESCRIPTOR descriptor, GnUser user, 
            IGnStatusEvents pEventHandler = (0)) -> GnList
        __init__(self, GNLISTTYPE listType, GNLANGUAGE language, GNREGION region, 
            GNDESCRIPTOR descriptor, GnUser user) -> GnList
        __init__(self, GNLISTTYPE listType, GnLocale locale, GnUser user, 
            IGnStatusEvents pEventHandler = (0)) -> GnList
        __init__(self, GNLISTTYPE listType, GnLocale locale, GnUser user) -> GnList
        __init__(self, gnsdk_cstr_t serializedList) -> GnList
        """
        this = _gnsdk.new_GnList(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(self, *args):
        """update(self, GnUser user) -> bool"""
        return _gnsdk.GnList_update(self, *args)

    def is_update_available(self, *args):
        """is_update_available(self, GnUser user) -> bool"""
        return _gnsdk.GnList_is_update_available(self, *args)

    def serialize(self):
        """serialize(self) -> GnString"""
        return _gnsdk.GnList_serialize(self)

    def render_to_xml(self, *args):
        """render_to_xml(self, gnsdk_uint32_t levels, GNLISTRENDERFLAGS renderFlags) -> GnString"""
        return _gnsdk.GnList_render_to_xml(self, *args)

    def type(self):
        """type(self) -> GNLISTTYPE"""
        return _gnsdk.GnList_type(self)

    def descriptor(self):
        """descriptor(self) -> GNDESCRIPTOR"""
        return _gnsdk.GnList_descriptor(self)

    def language(self):
        """language(self) -> GNLANGUAGE"""
        return _gnsdk.GnList_language(self)

    def region(self):
        """region(self) -> GNREGION"""
        return _gnsdk.GnList_region(self)

    def revision(self):
        """revision(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnList_revision(self)

    def level_count(self):
        """level_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnList_level_count(self)

    def list_elements(self, *args):
        """list_elements(self, gnsdk_uint32_t level) -> gracenote::gn_iterable_container<(gracenote::list_element_iterator)>"""
        return _gnsdk.GnList_list_elements(self, *args)

    def element_by_id(self, *args):
        """element_by_id(self, gnsdk_uint32_t itemId) -> GnListElement"""
        return _gnsdk.GnList_element_by_id(self, *args)

    def element_by_range(self, *args):
        """element_by_range(self, gnsdk_uint32_t range) -> GnListElement"""
        return _gnsdk.GnList_element_by_range(self, *args)

    def element_by_string(self, *args):
        """element_by_string(self, gnsdk_cstr_t strEquality) -> GnListElement"""
        return _gnsdk.GnList_element_by_string(self, *args)

    def element_by_gn_data_object(self, *args):
        """element_by_gn_data_object(self, GnDataObject dataObject, gnsdk_uint32_t ordinal, gnsdk_uint32_t level) -> GnListElement"""
        return _gnsdk.GnList_element_by_gn_data_object(self, *args)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnList_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnList_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnList_is_cancelled(self)

    __swig_destroy__ = _gnsdk.delete_GnList
    __del__ = lambda self : None;
GnList_swigregister = _gnsdk.GnList_swigregister
GnList_swigregister(GnList)

kLocaleGroupMusic = _gnsdk.kLocaleGroupMusic
kLocaleGroupVideo = _gnsdk.kLocaleGroupVideo
kLocaleGroupPlaylist = _gnsdk.kLocaleGroupPlaylist
kLocaleGroupEpg = _gnsdk.kLocaleGroupEpg
class GnLocaleInfo(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLocaleInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLocaleInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLocaleInfo"""
        this = _gnsdk.new_GnLocaleInfo()
        try: self.this.append(this)
        except: self.this = this
    def group(self):
        """group(self) -> GNLOCALEGROUP"""
        return _gnsdk.GnLocaleInfo_group(self)

    def descriptor(self):
        """descriptor(self) -> GNDESCRIPTOR"""
        return _gnsdk.GnLocaleInfo_descriptor(self)

    def language(self):
        """language(self) -> GNLANGUAGE"""
        return _gnsdk.GnLocaleInfo_language(self)

    def region(self):
        """region(self) -> GNREGION"""
        return _gnsdk.GnLocaleInfo_region(self)

    __swig_destroy__ = _gnsdk.delete_GnLocaleInfo
    __del__ = lambda self : None;
GnLocaleInfo_swigregister = _gnsdk.GnLocaleInfo_swigregister
GnLocaleInfo_swigregister(GnLocaleInfo)

class LocaleInfoProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleInfoProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleInfoProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_LocaleInfoProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_LocaleInfoProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.LocaleInfoProvider_get_data(self, *args)
    def count(self): return _gnsdk.LocaleInfoProvider_count(self)
    k_ordinal_start = _gnsdk.LocaleInfoProvider_k_ordinal_start
    k_count_offset = _gnsdk.LocaleInfoProvider_k_count_offset
LocaleInfoProvider_swigregister = _gnsdk.LocaleInfoProvider_swigregister
LocaleInfoProvider_swigregister(LocaleInfoProvider)

class GnLocale(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLocale, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLocale, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GNLOCALEGROUP localeGroup, GNLANGUAGE language, GNREGION region, 
            GNDESCRIPTOR descriptor, GnUser user, 
            IGnStatusEvents pEventHandler = (0)) -> GnLocale
        __init__(self, GNLOCALEGROUP localeGroup, GNLANGUAGE language, GNREGION region, 
            GNDESCRIPTOR descriptor, GnUser user) -> GnLocale
        __init__(self, GNLOCALEGROUP localeGroup, gnsdk_cstr_t langIsoCode, 
            GNREGION region, GNDESCRIPTOR descriptor, GnUser user, 
            IGnStatusEvents pEventHandler = (0)) -> GnLocale
        __init__(self, GNLOCALEGROUP localeGroup, gnsdk_cstr_t langIsoCode, 
            GNREGION region, GNDESCRIPTOR descriptor, GnUser user) -> GnLocale
        __init__(self, gnsdk_cstr_t serializedLocale, IGnStatusEvents pEventHandler = (0)) -> GnLocale
        __init__(self, gnsdk_cstr_t serializedLocale) -> GnLocale
        """
        this = _gnsdk.new_GnLocale(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLocale
    __del__ = lambda self : None;
    def group(self):
        """group(self) -> GNLOCALEGROUP"""
        return _gnsdk.GnLocale_group(self)

    def descriptor(self):
        """descriptor(self) -> GNDESCRIPTOR"""
        return _gnsdk.GnLocale_descriptor(self)

    def language(self):
        """language(self) -> GNLANGUAGE"""
        return _gnsdk.GnLocale_language(self)

    def region(self):
        """region(self) -> GNREGION"""
        return _gnsdk.GnLocale_region(self)

    def revision(self):
        """revision(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnLocale_revision(self)

    def set_group_default(self):
        """set_group_default(self)"""
        return _gnsdk.GnLocale_set_group_default(self)

    def locales_available():
        """locales_available() -> gracenote::gn_iterable_container<(gracenote::locale_info_iterator)>"""
        return _gnsdk.GnLocale_locales_available()

    if _newclass:locales_available = staticmethod(locales_available)
    __swig_getmethods__["locales_available"] = lambda x: locales_available
    def update(self, *args):
        """update(self, GnUser user) -> bool"""
        return _gnsdk.GnLocale_update(self, *args)

    def update_check(self, *args):
        """update_check(self, GnUser user) -> bool"""
        return _gnsdk.GnLocale_update_check(self, *args)

    def serialize(self):
        """serialize(self) -> GnString"""
        return _gnsdk.GnLocale_serialize(self)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnLocale_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnLocale_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnLocale_is_cancelled(self)

GnLocale_swigregister = _gnsdk.GnLocale_swigregister
GnLocale_swigregister(GnLocale)

def GnLocale_locales_available():
  """GnLocale_locales_available() -> gracenote::gn_iterable_container<(gracenote::locale_info_iterator)>"""
  return _gnsdk.GnLocale_locales_available()

kLoggingMessageTypeError = _gnsdk.kLoggingMessageTypeError
kLoggingMessageTypeWarning = _gnsdk.kLoggingMessageTypeWarning
kLoggingMessageTypeInfo = _gnsdk.kLoggingMessageTypeInfo
kLoggingMessageTypeDebug = _gnsdk.kLoggingMessageTypeDebug
class IGnLogEvents(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnLogEvents, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnLogEvents, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnLogEvents
    __del__ = lambda self : None;
    def log_message(self, *args):
        """
        log_message(self, gnsdk_uint16_t packageId, gnsdk_uint32_t filterMask, 
            gnsdk_uint32_t errorCode, gnsdk_cstr_t message) -> bool
        """
        return _gnsdk.IGnLogEvents_log_message(self, *args)

    def __init__(self): 
        if self.__class__ == IGnLogEvents:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_IGnLogEvents(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_IGnLogEvents(self)
        return weakref_proxy(self)
IGnLogEvents_swigregister = _gnsdk.IGnLogEvents_swigregister
IGnLogEvents_swigregister(IGnLogEvents)

class GnLogFilters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLogFilters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLogFilters, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLogFilters"""
        this = _gnsdk.new_GnLogFilters()
        try: self.this.append(this)
        except: self.this = this
    def clear(self):
        """clear(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_clear(self)

    def error(self):
        """error(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_error(self)

    def warning(self):
        """warning(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_warning(self)

    def info(self):
        """info(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_info(self)

    def debug(self):
        """debug(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_debug(self)

    def all(self):
        """all(self) -> GnLogFilters"""
        return _gnsdk.GnLogFilters_all(self)

    __swig_destroy__ = _gnsdk.delete_GnLogFilters
    __del__ = lambda self : None;
GnLogFilters_swigregister = _gnsdk.GnLogFilters_swigregister
GnLogFilters_swigregister(GnLogFilters)

class GnLogPackages(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLogPackages, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLogPackages, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLogPackages"""
        this = _gnsdk.new_GnLogPackages()
        try: self.this.append(this)
        except: self.this = this
    def all(self):
        """all(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_all(self)

    def all_gnsdk(self):
        """all_gnsdk(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_all_gnsdk(self)

    def all_internal(self):
        """all_internal(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_all_internal(self)

    def manager(self):
        """manager(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_manager(self)

    def music_id(self):
        """music_id(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_music_id(self)

    def music_id_file(self):
        """music_id_file(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_music_id_file(self)

    def music_id_stream(self):
        """music_id_stream(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_music_id_stream(self)

    def link(self):
        """link(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_link(self)

    def video(self):
        """video(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_video(self)

    def submit(self):
        """submit(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_submit(self)

    def playlist(self):
        """playlist(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_playlist(self)

    def epg(self):
        """epg(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_epg(self)

    def moodgrid(self):
        """moodgrid(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_moodgrid(self)

    def correlates(self):
        """correlates(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_correlates(self)

    def taste(self):
        """taste(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_taste(self)

    def dsp(self):
        """dsp(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_dsp(self)

    def acr(self):
        """acr(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_acr(self)

    def lookup_local(self):
        """lookup_local(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_lookup_local(self)

    def lookup_fp_local(self):
        """lookup_fp_local(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_lookup_fp_local(self)

    def lookup_local_stream(self):
        """lookup_local_stream(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_lookup_local_stream(self)

    def storage_sqlite(self):
        """storage_sqlite(self) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_storage_sqlite(self)

    def custom(self, *args):
        """custom(self, gnsdk_uint16_t customPackageId, gnsdk_cstr_t customPackageName) -> GnLogPackages"""
        return _gnsdk.GnLogPackages_custom(self, *args)

    def custom_min_package_id():
        """custom_min_package_id() -> int"""
        return _gnsdk.GnLogPackages_custom_min_package_id()

    if _newclass:custom_min_package_id = staticmethod(custom_min_package_id)
    __swig_getmethods__["custom_min_package_id"] = lambda x: custom_min_package_id
    def custom_max_package_id():
        """custom_max_package_id() -> int"""
        return _gnsdk.GnLogPackages_custom_max_package_id()

    if _newclass:custom_max_package_id = staticmethod(custom_max_package_id)
    __swig_getmethods__["custom_max_package_id"] = lambda x: custom_max_package_id
    __swig_destroy__ = _gnsdk.delete_GnLogPackages
    __del__ = lambda self : None;
GnLogPackages_swigregister = _gnsdk.GnLogPackages_swigregister
GnLogPackages_swigregister(GnLogPackages)

def GnLogPackages_custom_min_package_id():
  """GnLogPackages_custom_min_package_id() -> int"""
  return _gnsdk.GnLogPackages_custom_min_package_id()

def GnLogPackages_custom_max_package_id():
  """GnLogPackages_custom_max_package_id() -> int"""
  return _gnsdk.GnLogPackages_custom_max_package_id()

class GnLogColumns(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLogColumns, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLogColumns, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLogColumns"""
        this = _gnsdk.new_GnLogColumns()
        try: self.this.append(this)
        except: self.this = this
    def none(self):
        """none(self)"""
        return _gnsdk.GnLogColumns_none(self)

    def time_stamp(self):
        """time_stamp(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_time_stamp(self)

    def category(self):
        """category(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_category(self)

    def package_name(self):
        """package_name(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_package_name(self)

    def thread(self):
        """thread(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_thread(self)

    def source_info(self):
        """source_info(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_source_info(self)

    def new_line(self):
        """new_line(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_new_line(self)

    def all(self):
        """all(self) -> GnLogColumns"""
        return _gnsdk.GnLogColumns_all(self)

    __swig_destroy__ = _gnsdk.delete_GnLogColumns
    __del__ = lambda self : None;
GnLogColumns_swigregister = _gnsdk.GnLogColumns_swigregister
GnLogColumns_swigregister(GnLogColumns)

class GnLogOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLogOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLogOptions, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLogOptions"""
        this = _gnsdk.new_GnLogOptions()
        try: self.this.append(this)
        except: self.this = this
    def synchronous(self, *args):
        """synchronous(self, bool bSyncWrite) -> GnLogOptions"""
        return _gnsdk.GnLogOptions_synchronous(self, *args)

    def archive(self, *args):
        """archive(self, bool bArchive) -> GnLogOptions"""
        return _gnsdk.GnLogOptions_archive(self, *args)

    def archive_daily(self):
        """archive_daily(self) -> GnLogOptions"""
        return _gnsdk.GnLogOptions_archive_daily(self)

    def max_size(self, *args):
        """max_size(self, gnsdk_uint64_t maxSize) -> GnLogOptions"""
        return _gnsdk.GnLogOptions_max_size(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnLogOptions
    __del__ = lambda self : None;
GnLogOptions_swigregister = _gnsdk.GnLogOptions_swigregister
GnLogOptions_swigregister(GnLogOptions)

class GnLog(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLog, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLog, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, gnsdk_cstr_t logFilePath, IGnLogEvents pLoggingDelegate) -> GnLog
        __init__(self, gnsdk_cstr_t logFilePath, GnLogPackages packages, GnLogFilters filters, 
            GnLogColumns columns, GnLogOptions options, 
            IGnLogEvents pLoggingDelegate) -> GnLog
        """
        this = _gnsdk.new_GnLog(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLog
    __del__ = lambda self : None;
    def options(self):
        """options(self) -> GnLogOptions"""
        return _gnsdk.GnLog_options(self)

    def packages(self):
        """packages(self) -> GnLogPackages"""
        return _gnsdk.GnLog_packages(self)

    def filters(self):
        """filters(self) -> GnLogFilters"""
        return _gnsdk.GnLog_filters(self)

    def columns(self):
        """columns(self) -> GnLogColumns"""
        return _gnsdk.GnLog_columns(self)

    def enable(self, *args):
        """enable(self, bool bEnabled)"""
        return _gnsdk.GnLog_enable(self, *args)

    def write(*args):
        """
        write(gnsdk_int32_t line, gnsdk_cstr_t fileName, gnsdk_uint16_t customPackageId, 
            GNLOGMESSAGETYPE messageType, 
            gnsdk_cstr_t format, v(...) *args)
        """
        return _gnsdk.GnLog_write(*args)

    if _newclass:write = staticmethod(write)
    __swig_getmethods__["write"] = lambda x: write
GnLog_swigregister = _gnsdk.GnLog_swigregister
GnLog_swigregister(GnLog)

def GnLog_write(*args):
  """
    GnLog_write(gnsdk_int32_t line, gnsdk_cstr_t fileName, gnsdk_uint16_t customPackageId, 
        GNLOGMESSAGETYPE messageType, 
        gnsdk_cstr_t format, v(...) *args)
    """
  return _gnsdk.GnLog_write(*args)

class IGnAudioSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnAudioSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnAudioSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnAudioSource
    __del__ = lambda self : None;
    def source_init(self): return _gnsdk.IGnAudioSource_source_init(self)
    def source_close(self): return _gnsdk.IGnAudioSource_source_close(self)
    def samples_per_second(self): return _gnsdk.IGnAudioSource_samples_per_second(self)
    def sample_size_in_bits(self): return _gnsdk.IGnAudioSource_sample_size_in_bits(self)
    def number_of_channels(self): return _gnsdk.IGnAudioSource_number_of_channels(self)
    def get_data(self, *args): return _gnsdk.IGnAudioSource_get_data(self, *args)
    def __init__(self): 
        if self.__class__ == IGnAudioSource:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_IGnAudioSource(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_IGnAudioSource(self)
        return weakref_proxy(self)
IGnAudioSource_swigregister = _gnsdk.IGnAudioSource_swigregister
IGnAudioSource_swigregister(IGnAudioSource)

class IGnBundleSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGnBundleSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGnBundleSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_IGnBundleSource
    __del__ = lambda self : None;
    def get_bundle_data(self, *args): return _gnsdk.IGnBundleSource_get_bundle_data(self, *args)
    def __init__(self): 
        if self.__class__ == IGnBundleSource:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_IGnBundleSource(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_IGnBundleSource(self)
        return weakref_proxy(self)
IGnBundleSource_swigregister = _gnsdk.IGnBundleSource_swigregister
IGnBundleSource_swigregister(IGnBundleSource)

class GnAlbumProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAlbumProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAlbumProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAlbumProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAlbumProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnAlbumProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnAlbumProvider_count(self)
    k_ordinal_start = _gnsdk.GnAlbumProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnAlbumProvider_k_count_offset
GnAlbumProvider_swigregister = _gnsdk.GnAlbumProvider_swigregister
GnAlbumProvider_swigregister(GnAlbumProvider)

class GnTrackProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrackProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnTrackProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnTrackProvider_count(self)
    k_ordinal_start = _gnsdk.GnTrackProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnTrackProvider_k_count_offset
GnTrackProvider_swigregister = _gnsdk.GnTrackProvider_swigregister
GnTrackProvider_swigregister(GnTrackProvider)

class GnCreditProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCreditProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnCreditProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnCreditProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCreditProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnCreditProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnCreditProvider_count(self)
    k_ordinal_start = _gnsdk.GnCreditProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnCreditProvider_k_count_offset
GnCreditProvider_swigregister = _gnsdk.GnCreditProvider_swigregister
GnCreditProvider_swigregister(GnCreditProvider)

class GnNameProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnNameProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnNameProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnNameProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnNameProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnNameProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnNameProvider_count(self)
    k_ordinal_start = _gnsdk.GnNameProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnNameProvider_k_count_offset
GnNameProvider_swigregister = _gnsdk.GnNameProvider_swigregister
GnNameProvider_swigregister(GnNameProvider)

class GnMatchProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMatchProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMatchProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMatchProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMatchProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnMatchProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnMatchProvider_count(self)
    k_ordinal_start = _gnsdk.GnMatchProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnMatchProvider_k_count_offset
GnMatchProvider_swigregister = _gnsdk.GnMatchProvider_swigregister
GnMatchProvider_swigregister(GnMatchProvider)

class GnDataMatchProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDataMatchProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnDataMatchProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnDataMatchProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnDataMatchProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnDataMatchProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnDataMatchProvider_count(self)
    k_ordinal_start = _gnsdk.GnDataMatchProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnDataMatchProvider_k_count_offset
GnDataMatchProvider_swigregister = _gnsdk.GnDataMatchProvider_swigregister
GnDataMatchProvider_swigregister(GnDataMatchProvider)

class GnExternalIdProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnExternalIdProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnExternalIdProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnExternalIdProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnExternalIdProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnExternalIdProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnExternalIdProvider_count(self)
    k_ordinal_start = _gnsdk.GnExternalIdProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnExternalIdProvider_k_count_offset
GnExternalIdProvider_swigregister = _gnsdk.GnExternalIdProvider_swigregister
GnExternalIdProvider_swigregister(GnExternalIdProvider)

class GnAssetProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAssetProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAssetProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAssetProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAssetProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnAssetProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnAssetProvider_count(self)
    k_ordinal_start = _gnsdk.GnAssetProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnAssetProvider_k_count_offset
GnAssetProvider_swigregister = _gnsdk.GnAssetProvider_swigregister
GnAssetProvider_swigregister(GnAssetProvider)

class GnAlbumIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAlbumIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAlbumIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnAlbumIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnAlbumIterator__next(self)
    def has_next(self): return _gnsdk.GnAlbumIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnAlbumIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnAlbumIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnAlbumIterator_swigregister = _gnsdk.GnAlbumIterator_swigregister
GnAlbumIterator_swigregister(GnAlbumIterator)

class GnTrackIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnTrackIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnTrackIterator__next(self)
    def has_next(self): return _gnsdk.GnTrackIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnTrackIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnTrackIterator_swigregister = _gnsdk.GnTrackIterator_swigregister
GnTrackIterator_swigregister(GnTrackIterator)

class GnCreditIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCreditIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnCreditIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnCreditIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnCreditIterator__next(self)
    def has_next(self): return _gnsdk.GnCreditIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnCreditIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnCreditIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnCreditIterator_swigregister = _gnsdk.GnCreditIterator_swigregister
GnCreditIterator_swigregister(GnCreditIterator)

class GnNameIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnNameIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnNameIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnNameIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnNameIterator__next(self)
    def has_next(self): return _gnsdk.GnNameIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnNameIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnNameIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnNameIterator_swigregister = _gnsdk.GnNameIterator_swigregister
GnNameIterator_swigregister(GnNameIterator)

class GnMatchIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMatchIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMatchIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMatchIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnMatchIterator__next(self)
    def has_next(self): return _gnsdk.GnMatchIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnMatchIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnMatchIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnMatchIterator_swigregister = _gnsdk.GnMatchIterator_swigregister
GnMatchIterator_swigregister(GnMatchIterator)

class GnDataMatchIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDataMatchIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnDataMatchIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnDataMatchIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnDataMatchIterator__next(self)
    def has_next(self): return _gnsdk.GnDataMatchIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnDataMatchIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnDataMatchIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnDataMatchIterator_swigregister = _gnsdk.GnDataMatchIterator_swigregister
GnDataMatchIterator_swigregister(GnDataMatchIterator)

class GnExternalIdIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnExternalIdIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnExternalIdIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnExternalIdIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnExternalIdIterator__next(self)
    def has_next(self): return _gnsdk.GnExternalIdIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnExternalIdIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnExternalIdIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnExternalIdIterator_swigregister = _gnsdk.GnExternalIdIterator_swigregister
GnExternalIdIterator_swigregister(GnExternalIdIterator)

class GnAssetIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAssetIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAssetIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnAssetIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnAssetIterator___ref__(self)
    def _next(self): return _gnsdk.GnAssetIterator__next(self)
    def has_next(self): return _gnsdk.GnAssetIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnAssetIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnAssetIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnAssetIterator_swigregister = _gnsdk.GnAssetIterator_swigregister
GnAssetIterator_swigregister(GnAssetIterator)

class GnAlbumIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAlbumIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAlbumIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAlbumIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAlbumIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnAlbumIterable_get_iterator(self)
    def end(self): return _gnsdk.GnAlbumIterable_end(self)
    def count(self): return _gnsdk.GnAlbumIterable_count(self)
    def at(self, *args): return _gnsdk.GnAlbumIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnAlbumIterable_swigregister = _gnsdk.GnAlbumIterable_swigregister
GnAlbumIterable_swigregister(GnAlbumIterable)

class GnTrackIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrackIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnTrackIterable_get_iterator(self)
    def end(self): return _gnsdk.GnTrackIterable_end(self)
    def count(self): return _gnsdk.GnTrackIterable_count(self)
    def at(self, *args): return _gnsdk.GnTrackIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnTrackIterable_swigregister = _gnsdk.GnTrackIterable_swigregister
GnTrackIterable_swigregister(GnTrackIterable)

class GnCreditIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCreditIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnCreditIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnCreditIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCreditIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnCreditIterable_get_iterator(self)
    def end(self): return _gnsdk.GnCreditIterable_end(self)
    def count(self): return _gnsdk.GnCreditIterable_count(self)
    def at(self, *args): return _gnsdk.GnCreditIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnCreditIterable_swigregister = _gnsdk.GnCreditIterable_swigregister
GnCreditIterable_swigregister(GnCreditIterable)

class GnNameIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnNameIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnNameIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnNameIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnNameIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnNameIterable_get_iterator(self)
    def end(self): return _gnsdk.GnNameIterable_end(self)
    def count(self): return _gnsdk.GnNameIterable_count(self)
    def at(self, *args): return _gnsdk.GnNameIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnNameIterable_swigregister = _gnsdk.GnNameIterable_swigregister
GnNameIterable_swigregister(GnNameIterable)

class GnMatchIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMatchIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMatchIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMatchIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMatchIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnMatchIterable_get_iterator(self)
    def end(self): return _gnsdk.GnMatchIterable_end(self)
    def count(self): return _gnsdk.GnMatchIterable_count(self)
    def at(self, *args): return _gnsdk.GnMatchIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnMatchIterable_swigregister = _gnsdk.GnMatchIterable_swigregister
GnMatchIterable_swigregister(GnMatchIterable)

class GnDataMatchIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDataMatchIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnDataMatchIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnDataMatchIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnDataMatchIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnDataMatchIterable_get_iterator(self)
    def end(self): return _gnsdk.GnDataMatchIterable_end(self)
    def count(self): return _gnsdk.GnDataMatchIterable_count(self)
    def at(self, *args): return _gnsdk.GnDataMatchIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnDataMatchIterable_swigregister = _gnsdk.GnDataMatchIterable_swigregister
GnDataMatchIterable_swigregister(GnDataMatchIterable)

class GnExternalIdIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnExternalIdIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnExternalIdIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnExternalIdIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnExternalIdIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnExternalIdIterable_get_iterator(self)
    def end(self): return _gnsdk.GnExternalIdIterable_end(self)
    def count(self): return _gnsdk.GnExternalIdIterable_count(self)
    def at(self, *args): return _gnsdk.GnExternalIdIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnExternalIdIterable_swigregister = _gnsdk.GnExternalIdIterable_swigregister
GnExternalIdIterable_swigregister(GnExternalIdIterable)

class GnAssetIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAssetIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAssetIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAssetIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAssetIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnAssetIterable_begin(self)
    def end(self): return _gnsdk.GnAssetIterable_end(self)
    def count(self): return _gnsdk.GnAssetIterable_count(self)
    def at(self, *args): return _gnsdk.GnAssetIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnAssetIterable_swigregister = _gnsdk.GnAssetIterable_swigregister
GnAssetIterable_swigregister(GnAssetIterable)

class GnMusicIdOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def lookup_mode(self, *args):
        """lookup_mode(self, GNLOOKUPMODE lookupMode)"""
        return _gnsdk.GnMusicIdOptions_lookup_mode(self, *args)

    def lookup_data(self, *args):
        """lookup_data(self, GNLOOKUPDATA lookupData, bool bEnable)"""
        return _gnsdk.GnMusicIdOptions_lookup_data(self, *args)

    def prefer_result_language(self, *args):
        """prefer_result_language(self, GNLANGUAGE preferredLanguage)"""
        return _gnsdk.GnMusicIdOptions_prefer_result_language(self, *args)

    def prefer_result_external_id(self, *args):
        """prefer_result_external_id(self, gnsdk_cstr_t strExternalId)"""
        return _gnsdk.GnMusicIdOptions_prefer_result_external_id(self, *args)

    def prefer_result_coverart(self, *args):
        """prefer_result_coverart(self, bool bEnable)"""
        return _gnsdk.GnMusicIdOptions_prefer_result_coverart(self, *args)

    def result_single(self, *args):
        """result_single(self, bool bEnable)"""
        return _gnsdk.GnMusicIdOptions_result_single(self, *args)

    def revision_check(self, *args):
        """revision_check(self, bool bEnable)"""
        return _gnsdk.GnMusicIdOptions_revision_check(self, *args)

    def result_range_start(self, *args):
        """result_range_start(self, gnsdk_uint32_t resultStart)"""
        return _gnsdk.GnMusicIdOptions_result_range_start(self, *args)

    def result_count(self, *args):
        """result_count(self, gnsdk_uint32_t resultCount)"""
        return _gnsdk.GnMusicIdOptions_result_count(self, *args)

    def custom(self, *args):
        """
        custom(self, gnsdk_cstr_t option, gnsdk_cstr_t value)
        custom(self, gnsdk_cstr_t option, bool bEnable)
        """
        return _gnsdk.GnMusicIdOptions_custom(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMusicIdOptions
    __del__ = lambda self : None;
GnMusicIdOptions_swigregister = _gnsdk.GnMusicIdOptions_swigregister
GnMusicIdOptions_swigregister(GnMusicIdOptions)

class GnMusicId(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicId, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnMusicId
        __init__(self, GnUser user) -> GnMusicId
        __init__(self, GnUser user, GnLocale locale, IGnStatusEvents pEventHandler = (0)) -> GnMusicId
        __init__(self, GnUser user, GnLocale locale) -> GnMusicId
        """
        this = _gnsdk.new_GnMusicId(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMusicId
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicId_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicId_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def fingerprint_data_get(self):
        """fingerprint_data_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicId_fingerprint_data_get(self)

    def fingerprint_begin(self, *args):
        """
        fingerprint_begin(self, GNFINGERPRINTTYPE fpType, gnsdk_uint32_t audioSampleRate, 
            gnsdk_uint32_t audioSampleSize, gnsdk_uint32_t audioChannels)
        """
        return _gnsdk.GnMusicId_fingerprint_begin(self, *args)

    def fingerprint_write(self, *args):
        """fingerprint_write(self, gnsdk_byte_t audioData, gnsdk_size_t audioDataSize) -> bool"""
        return _gnsdk.GnMusicId_fingerprint_write(self, *args)

    def fingerprint_end(self):
        """fingerprint_end(self)"""
        return _gnsdk.GnMusicId_fingerprint_end(self)

    def fingerprint_from_source(self, *args):
        """fingerprint_from_source(self, IGnAudioSource audioSource, GNFINGERPRINTTYPE fpType)"""
        return _gnsdk.GnMusicId_fingerprint_from_source(self, *args)

    def find_albums(self, *args):
        """
        find_albums(self, gnsdk_cstr_t albumTitle, gnsdk_cstr_t trackTitle, gnsdk_cstr_t albumArtistName, 
            gnsdk_cstr_t trackArtistName, 
            gnsdk_cstr_t composerName) -> GnResponseAlbums
        find_albums(self, gnsdk_cstr_t CDTOC) -> GnResponseAlbums
        find_albums(self, gnsdk_cstr_t CDTOC, gnsdk_cstr_t strFingerprintData, 
            GNFINGERPRINTTYPE fpType) -> GnResponseAlbums
        find_albums(self, gnsdk_cstr_t fingerprintData, GNFINGERPRINTTYPE fpType) -> GnResponseAlbums
        find_albums(self, GnDataObject gnDataObject) -> GnResponseAlbums
        find_albums(self, IGnAudioSource audioSource, GNFINGERPRINTTYPE fpType) -> GnResponseAlbums
        """
        return _gnsdk.GnMusicId_find_albums(self, *args)

    def find_matches(self, *args):
        """
        find_matches(self, gnsdk_cstr_t albumTitle, gnsdk_cstr_t trackTitle, gnsdk_cstr_t albumArtistName, 
            gnsdk_cstr_t trackArtistName, 
            gnsdk_cstr_t composerName) -> GnResponseDataMatches
        """
        return _gnsdk.GnMusicId_find_matches(self, *args)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnMusicId_event_handler(self)

    def options(self):
        """options(self) -> GnMusicIdOptions"""
        return _gnsdk.GnMusicId_options(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnMusicId_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnMusicId_is_cancelled(self)

GnMusicId_swigregister = _gnsdk.GnMusicId_swigregister
GnMusicId_swigregister(GnMusicId)

def GnMusicId_version():
  """GnMusicId_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicId_version()

def GnMusicId_build_date():
  """GnMusicId_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicId_build_date()

kMusicIdFileInfoStatusUnprocessed = _gnsdk.kMusicIdFileInfoStatusUnprocessed
kMusicIdFileInfoStatusProcessing = _gnsdk.kMusicIdFileInfoStatusProcessing
kGnMusicIdFileInfoStatusError = _gnsdk.kGnMusicIdFileInfoStatusError
kMusicIdFileInfoStatusResultNone = _gnsdk.kMusicIdFileInfoStatusResultNone
kMusicIdFileInfoStatusResultSingle = _gnsdk.kMusicIdFileInfoStatusResultSingle
kGnMusicIdFileInfoStatusResultAll = _gnsdk.kGnMusicIdFileInfoStatusResultAll
kMusicIdFileCallbackStatusProcessingBegin = _gnsdk.kMusicIdFileCallbackStatusProcessingBegin
kMusicIdFileCallbackStatusFileInfoQuery = _gnsdk.kMusicIdFileCallbackStatusFileInfoQuery
kMusicIdFileCallbackStatusProcessingComplete = _gnsdk.kMusicIdFileCallbackStatusProcessingComplete
kMusicIdFileCallbackStatusProcessingError = _gnsdk.kMusicIdFileCallbackStatusProcessingError
kMusicIdFileCallbackStatusError = _gnsdk.kMusicIdFileCallbackStatusError
class GnMusicIdFileInfo(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMusicIdFileInfo"""
        this = _gnsdk.new_GnMusicIdFileInfo()
        try: self.this.append(this)
        except: self.this = this
    def identifier(self):
        """identifier(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdFileInfo_identifier(self)

    def file_name(self, *args):
        """
        file_name(self) -> gnsdk_cstr_t
        file_name(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_file_name(self, *args)

    def cddb_id(self, *args):
        """
        cddb_id(self) -> gnsdk_cstr_t
        cddb_id(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_cddb_id(self, *args)

    def album_artist(self, *args):
        """
        album_artist(self) -> gnsdk_cstr_t
        album_artist(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_album_artist(self, *args)

    def album_title(self, *args):
        """
        album_title(self) -> gnsdk_cstr_t
        album_title(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_album_title(self, *args)

    def track_artist(self, *args):
        """
        track_artist(self) -> gnsdk_cstr_t
        track_artist(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_track_artist(self, *args)

    def track_title(self, *args):
        """
        track_title(self) -> gnsdk_cstr_t
        track_title(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_track_title(self, *args)

    def track_number(self, *args):
        """
        track_number(self) -> gnsdk_uint32_t
        track_number(self, gnsdk_uint32_t trackNumber)
        """
        return _gnsdk.GnMusicIdFileInfo_track_number(self, *args)

    def disc_number(self, *args):
        """
        disc_number(self) -> gnsdk_uint32_t
        disc_number(self, gnsdk_uint32_t discNumber)
        """
        return _gnsdk.GnMusicIdFileInfo_disc_number(self, *args)

    def tag_id(self, *args):
        """
        tag_id(self) -> gnsdk_cstr_t
        tag_id(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_tag_id(self, *args)

    def fingerprint(self, *args):
        """
        fingerprint(self) -> gnsdk_cstr_t
        fingerprint(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_fingerprint(self, *args)

    def media_id(self, *args):
        """
        media_id(self) -> gnsdk_cstr_t
        media_id(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_media_id(self, *args)

    def mui(self, *args):
        """
        mui(self) -> gnsdk_cstr_t
        mui(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_mui(self, *args)

    def cd_toc(self, *args):
        """
        cd_toc(self) -> gnsdk_cstr_t
        cd_toc(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_cd_toc(self, *args)

    def tui(self, *args):
        """
        tui(self) -> gnsdk_cstr_t
        tui(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_tui(self, *args)

    def tui_tag(self, *args):
        """
        tui_tag(self) -> gnsdk_cstr_t
        tui_tag(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileInfo_tui_tag(self, *args)

    def fingerprint_begin(self, *args):
        """
        fingerprint_begin(self, gnsdk_uint32_t audioSampleRate, gnsdk_uint32_t audioSampleSize, 
            gnsdk_uint32_t audioChannels)
        """
        return _gnsdk.GnMusicIdFileInfo_fingerprint_begin(self, *args)

    def fingerprint_write(self, *args):
        """fingerprint_write(self, gnsdk_byte_t audioData, gnsdk_size_t audioDataSize) -> bool"""
        return _gnsdk.GnMusicIdFileInfo_fingerprint_write(self, *args)

    def fingerprint_end(self):
        """fingerprint_end(self)"""
        return _gnsdk.GnMusicIdFileInfo_fingerprint_end(self)

    def fingerprint_from_source(self, *args):
        """fingerprint_from_source(self, IGnAudioSource audiosource)"""
        return _gnsdk.GnMusicIdFileInfo_fingerprint_from_source(self, *args)

    def status(self):
        """status(self) -> GNMUSICIDFILEINFOSTATUS"""
        return _gnsdk.GnMusicIdFileInfo_status(self)

    def error_information(self):
        """error_information(self) -> GnError"""
        return _gnsdk.GnMusicIdFileInfo_error_information(self)

    def album_response(self):
        """album_response(self) -> GnResponseAlbums"""
        return _gnsdk.GnMusicIdFileInfo_album_response(self)

    def data_match_response(self):
        """data_match_response(self) -> GnResponseDataMatches"""
        return _gnsdk.GnMusicIdFileInfo_data_match_response(self)

    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileInfo
    __del__ = lambda self : None;
GnMusicIdFileInfo_swigregister = _gnsdk.GnMusicIdFileInfo_swigregister
GnMusicIdFileInfo_swigregister(GnMusicIdFileInfo)

class MusicidFileInfoProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MusicidFileInfoProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MusicidFileInfoProvider, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_MusicidFileInfoProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.MusicidFileInfoProvider_get_data(self, *args)
    def count(self): return _gnsdk.MusicidFileInfoProvider_count(self)
    k_ordinal_start = _gnsdk.MusicidFileInfoProvider_k_ordinal_start
    k_count_offset = _gnsdk.MusicidFileInfoProvider_k_count_offset
MusicidFileInfoProvider_swigregister = _gnsdk.MusicidFileInfoProvider_swigregister
MusicidFileInfoProvider_swigregister(MusicidFileInfoProvider)

kQueryReturnSingle = _gnsdk.kQueryReturnSingle
kQueryReturnAll = _gnsdk.kQueryReturnAll
kResponseAlbums = _gnsdk.kResponseAlbums
kResponseMatches = _gnsdk.kResponseMatches
class GnMusicIdFileOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def lookup_mode(self, *args):
        """lookup_mode(self, GNLOOKUPMODE lookupMode)"""
        return _gnsdk.GnMusicIdFileOptions_lookup_mode(self, *args)

    def lookup_data(self, *args):
        """lookup_data(self, GNLOOKUPDATA val, bool enable)"""
        return _gnsdk.GnMusicIdFileOptions_lookup_data(self, *args)

    def batch_size(self, *args):
        """batch_size(self, gnsdk_uint32_t size)"""
        return _gnsdk.GnMusicIdFileOptions_batch_size(self, *args)

    def online_processing(self, *args):
        """online_processing(self, bool enable)"""
        return _gnsdk.GnMusicIdFileOptions_online_processing(self, *args)

    def prefer_result_language(self, *args):
        """prefer_result_language(self, GNLANGUAGE preferredLangauge)"""
        return _gnsdk.GnMusicIdFileOptions_prefer_result_language(self, *args)

    def prefer_result_external_id(self, *args):
        """prefer_result_external_id(self, gnsdk_cstr_t preferredExternalId)"""
        return _gnsdk.GnMusicIdFileOptions_prefer_result_external_id(self, *args)

    def thread_priority(self, *args):
        """thread_priority(self, GNTHREADPRIORITY threadPriority)"""
        return _gnsdk.GnMusicIdFileOptions_thread_priority(self, *args)

    def custom(self, *args):
        """
        custom(self, gnsdk_cstr_t optionKey, bool enable)
        custom(self, gnsdk_cstr_t option, gnsdk_cstr_t value)
        """
        return _gnsdk.GnMusicIdFileOptions_custom(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileOptions
    __del__ = lambda self : None;
GnMusicIdFileOptions_swigregister = _gnsdk.GnMusicIdFileOptions_swigregister
GnMusicIdFileOptions_swigregister(GnMusicIdFileOptions)

class GnMusicIdFileInfoManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileInfoManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileInfoManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def add(self, *args):
        """
        add(self, gnsdk_cstr_t uniqueIdentifier, GnMusicIdFileInfoEventsDelegate pEventHandler = (0)) -> GnMusicIdFileInfo
        add(self, gnsdk_cstr_t uniqueIdentifier) -> GnMusicIdFileInfo
        """
        return _gnsdk.GnMusicIdFileInfoManager_add(self, *args)

    def add_from_xml(self, *args):
        """add_from_xml(self, gnsdk_cstr_t xmlStr) -> gnsdk_uint32_t"""
        return _gnsdk.GnMusicIdFileInfoManager_add_from_xml(self, *args)

    def render_to_xml(self):
        """render_to_xml(self) -> GnString"""
        return _gnsdk.GnMusicIdFileInfoManager_render_to_xml(self)

    def remove(self, *args):
        """remove(self, GnMusicIdFileInfo fileInfo)"""
        return _gnsdk.GnMusicIdFileInfoManager_remove(self, *args)

    def begin(self):
        """begin(self) -> musicid_file_info_iterator"""
        return _gnsdk.GnMusicIdFileInfoManager_begin(self)

    def end(self):
        """end(self) -> musicid_file_info_iterator"""
        return _gnsdk.GnMusicIdFileInfoManager_end(self)

    def count(self):
        """count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnMusicIdFileInfoManager_count(self)

    def at(self, *args):
        """at(self, gnsdk_uint32_t index) -> GnMusicIdFileInfo"""
        return _gnsdk.GnMusicIdFileInfoManager_at(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileInfoManager
    __del__ = lambda self : None;
GnMusicIdFileInfoManager_swigregister = _gnsdk.GnMusicIdFileInfoManager_swigregister
GnMusicIdFileInfoManager_swigregister(GnMusicIdFileInfoManager)

class GnMusicIdFile(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFile, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, GnMusicIdFileEventsDelegate pEventHandler = (0)) -> GnMusicIdFile
        __init__(self, GnUser user) -> GnMusicIdFile
        """
        this = _gnsdk.new_GnMusicIdFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMusicIdFile
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdFile_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdFile_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def options(self):
        """options(self) -> GnMusicIdFileOptions"""
        return _gnsdk.GnMusicIdFile_options(self)

    def file_infos(self):
        """file_infos(self) -> GnMusicIdFileInfoManager"""
        return _gnsdk.GnMusicIdFile_file_infos(self)

    def do_track_id(self, *args):
        """do_track_id(self, GNMUSICIDFILEPROCESSTYPE processType, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_track_id(self, *args)

    def do_track_id_async(self, *args):
        """do_track_id_async(self, GNMUSICIDFILEPROCESSTYPE processType, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_track_id_async(self, *args)

    def do_album_id(self, *args):
        """do_album_id(self, GNMUSICIDFILEPROCESSTYPE processType, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_album_id(self, *args)

    def do_album_id_async(self, *args):
        """do_album_id_async(self, GNMUSICIDFILEPROCESSTYPE processType, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_album_id_async(self, *args)

    def do_library_id(self, *args):
        """do_library_id(self, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_library_id(self, *args)

    def do_library_id_async(self, *args):
        """do_library_id_async(self, GNMUSICIDFILERESPONSETYPE responseType)"""
        return _gnsdk.GnMusicIdFile_do_library_id_async(self, *args)

    __swig_setmethods__["k_time_value_infinite"] = _gnsdk.GnMusicIdFile_k_time_value_infinite_set
    __swig_getmethods__["k_time_value_infinite"] = _gnsdk.GnMusicIdFile_k_time_value_infinite_get
    if _newclass:k_time_value_infinite = _swig_property(_gnsdk.GnMusicIdFile_k_time_value_infinite_get, _gnsdk.GnMusicIdFile_k_time_value_infinite_set)
    def wait_for_complete(self, *args):
        """
        wait_for_complete(self, gnsdk_uint32_t timeoutValue = k_time_value_infinite)
        wait_for_complete(self)
        """
        return _gnsdk.GnMusicIdFile_wait_for_complete(self, *args)

    def event_handler(self):
        """event_handler(self) -> GnMusicIdFileEventsDelegate"""
        return _gnsdk.GnMusicIdFile_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnMusicIdFile_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnMusicIdFile_is_cancelled(self)

GnMusicIdFile_swigregister = _gnsdk.GnMusicIdFile_swigregister
GnMusicIdFile_swigregister(GnMusicIdFile)

def GnMusicIdFile_version():
  """GnMusicIdFile_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdFile_version()

def GnMusicIdFile_build_date():
  """GnMusicIdFile_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdFile_build_date()
cvar = _gnsdk.cvar

class GnMusicIdFileEventsDelegate(IGnStatusEvents):
    __swig_setmethods__ = {}
    for _s in [IGnStatusEvents]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileEventsDelegate, name, value)
    __swig_getmethods__ = {}
    for _s in [IGnStatusEvents]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileEventsDelegate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileEventsDelegate
    __del__ = lambda self : None;
    def music_id_file_status_event(self, *args):
        """
        music_id_file_status_event(self, GnMusicIdFileInfo fileinfo, GNMUSICIDFILECALLBACKSTATUS status, 
            gnsdk_uint32_t currentFile, gnsdk_uint32_t totalFiles, 
            IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_music_id_file_status_event(self, *args)

    def gather_fingerprint(self, *args):
        """
        gather_fingerprint(self, GnMusicIdFileInfo fileInfo, gnsdk_uint32_t currentFile, 
            gnsdk_uint32_t totalFiles, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_gather_fingerprint(self, *args)

    def gather_metadata(self, *args):
        """
        gather_metadata(self, GnMusicIdFileInfo fileInfo, gnsdk_uint32_t currentFile, 
            gnsdk_uint32_t totalFiles, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_gather_metadata(self, *args)

    def music_id_file_album_result(self, *args):
        """
        music_id_file_album_result(self, GnResponseAlbums album_result, gnsdk_uint32_t current_album, 
            gnsdk_uint32_t total_albums, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_music_id_file_album_result(self, *args)

    def music_id_file_match_result(self, *args):
        """
        music_id_file_match_result(self, GnResponseDataMatches matches_result, gnsdk_uint32_t current_album, 
            gnsdk_uint32_t total_albums, 
            IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_music_id_file_match_result(self, *args)

    def music_id_file_result_not_found(self, *args):
        """
        music_id_file_result_not_found(self, GnMusicIdFileInfo fileinfo, gnsdk_uint32_t currentFile, 
            gnsdk_uint32_t totalFiles, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileEventsDelegate_music_id_file_result_not_found(self, *args)

    def music_id_file_complete(self, *args):
        """music_id_file_complete(self, GnError completeError)"""
        return _gnsdk.GnMusicIdFileEventsDelegate_music_id_file_complete(self, *args)

    def __init__(self): 
        if self.__class__ == GnMusicIdFileEventsDelegate:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_GnMusicIdFileEventsDelegate(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_GnMusicIdFileEventsDelegate(self)
        return weakref_proxy(self)
GnMusicIdFileEventsDelegate_swigregister = _gnsdk.GnMusicIdFileEventsDelegate_swigregister
GnMusicIdFileEventsDelegate_swigregister(GnMusicIdFileEventsDelegate)

class GnMusicIdFileInfoEventsDelegate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileInfoEventsDelegate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileInfoEventsDelegate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileInfoEventsDelegate
    __del__ = lambda self : None;
    def gather_fingerprint(self, *args):
        """
        gather_fingerprint(self, GnMusicIdFileInfo fileinfo, gnsdk_uint32_t currentFile, 
            gnsdk_uint32_t totalFiles, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileInfoEventsDelegate_gather_fingerprint(self, *args)

    def gather_metadata(self, *args):
        """
        gather_metadata(self, GnMusicIdFileInfo fileinfo, gnsdk_uint32_t currentFile, 
            gnsdk_uint32_t totalFiles, IGnCancellable canceller)
        """
        return _gnsdk.GnMusicIdFileInfoEventsDelegate_gather_metadata(self, *args)

    def __init__(self): 
        if self.__class__ == GnMusicIdFileInfoEventsDelegate:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_GnMusicIdFileInfoEventsDelegate(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_GnMusicIdFileInfoEventsDelegate(self)
        return weakref_proxy(self)
GnMusicIdFileInfoEventsDelegate_swigregister = _gnsdk.GnMusicIdFileInfoEventsDelegate_swigregister
GnMusicIdFileInfoEventsDelegate_swigregister(GnMusicIdFileInfoEventsDelegate)

class GnMusicIdFileInfoIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileInfoIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileInfoIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileInfoIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnMusicIdFileInfoIterator__next(self)
    def has_next(self): return _gnsdk.GnMusicIdFileInfoIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnMusicIdFileInfoIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnMusicIdFileInfoIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnMusicIdFileInfoIterator_swigregister = _gnsdk.GnMusicIdFileInfoIterator_swigregister
GnMusicIdFileInfoIterator_swigregister(GnMusicIdFileInfoIterator)

class GnMusicIdFileInfoIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdFileInfoIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdFileInfoIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMusicIdFileInfoIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMusicIdFileInfoIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnMusicIdFileInfoIterable_get_iterator(self)
    def end(self): return _gnsdk.GnMusicIdFileInfoIterable_end(self)
    def count(self): return _gnsdk.GnMusicIdFileInfoIterable_count(self)
    def at(self, *args): return _gnsdk.GnMusicIdFileInfoIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnMusicIdFileInfoIterable_swigregister = _gnsdk.GnMusicIdFileInfoIterable_swigregister
GnMusicIdFileInfoIterable_swigregister(GnMusicIdFileInfoIterable)

kStatusInvalid = _gnsdk.kStatusInvalid
kStatusStarted = _gnsdk.kStatusStarted
kStatusFpGenerated = _gnsdk.kStatusFpGenerated
kStatusIdentifyingLocalQueryStarted = _gnsdk.kStatusIdentifyingLocalQueryStarted
kStatusIdentifyingLocalQueryEnded = _gnsdk.kStatusIdentifyingLocalQueryEnded
kStatusIdentifyingOnlineQueryStarted = _gnsdk.kStatusIdentifyingOnlineQueryStarted
kStatusIdentifyingOnlineQueryEnded = _gnsdk.kStatusIdentifyingOnlineQueryEnded
kStatusIdentifyingEnded = _gnsdk.kStatusIdentifyingEnded
kStatusAudioNone = _gnsdk.kStatusAudioNone
kStatusAudioSilence = _gnsdk.kStatusAudioSilence
kStatusAudioNoise = _gnsdk.kStatusAudioNoise
kStatusAudioSpeech = _gnsdk.kStatusAudioSpeech
kStatusAudioMusic = _gnsdk.kStatusAudioMusic
kStatusTransitionNone = _gnsdk.kStatusTransitionNone
kStatusTransitionChannelChange = _gnsdk.kStatusTransitionChannelChange
kStatusTransitionContentToContent = _gnsdk.kStatusTransitionContentToContent
kStatusErrorNoClassifier = _gnsdk.kStatusErrorNoClassifier
class GnMusicIdStreamOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdStreamOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdStreamOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def lookup_mode(self, *args):
        """lookup_mode(self, GNLOOKUPMODE lookupMode)"""
        return _gnsdk.GnMusicIdStreamOptions_lookup_mode(self, *args)

    def lookup_data(self, *args):
        """lookup_data(self, GNLOOKUPDATA val, bool enable)"""
        return _gnsdk.GnMusicIdStreamOptions_lookup_data(self, *args)

    def prefer_result_language(self, *args):
        """prefer_result_language(self, gnsdk_cstr_t preferedLanguage)"""
        return _gnsdk.GnMusicIdStreamOptions_prefer_result_language(self, *args)

    def prefer_result_external_id(self, *args):
        """prefer_result_external_id(self, gnsdk_cstr_t preferredExternalId)"""
        return _gnsdk.GnMusicIdStreamOptions_prefer_result_external_id(self, *args)

    def prefer_result_coverart(self, *args):
        """prefer_result_coverart(self, bool bEnable)"""
        return _gnsdk.GnMusicIdStreamOptions_prefer_result_coverart(self, *args)

    def result_single(self, *args):
        """result_single(self, bool bEnable)"""
        return _gnsdk.GnMusicIdStreamOptions_result_single(self, *args)

    def result_range_start(self, *args):
        """result_range_start(self, gnsdk_uint32_t resultStart)"""
        return _gnsdk.GnMusicIdStreamOptions_result_range_start(self, *args)

    def result_count(self, *args):
        """result_count(self, gnsdk_uint32_t resultCount)"""
        return _gnsdk.GnMusicIdStreamOptions_result_count(self, *args)

    def revision_check(self, *args):
        """revision_check(self, bool bEnable)"""
        return _gnsdk.GnMusicIdStreamOptions_revision_check(self, *args)

    def custom(self, *args):
        """custom(self, gnsdk_cstr_t optionKey, gnsdk_cstr_t value)"""
        return _gnsdk.GnMusicIdStreamOptions_custom(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMusicIdStreamOptions
    __del__ = lambda self : None;
GnMusicIdStreamOptions_swigregister = _gnsdk.GnMusicIdStreamOptions_swigregister
GnMusicIdStreamOptions_swigregister(GnMusicIdStreamOptions)

class GnMusicIdStream(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdStream, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdStream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, GnMusicIdStreamEventsDelegate pEventDelegate) -> GnMusicIdStream
        __init__(self, GnUser user, GnLocale locale, GnMusicIdStreamEventsDelegate pEventDelegate) -> GnMusicIdStream
        """
        this = _gnsdk.new_GnMusicIdStream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMusicIdStream
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdStream_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdStream_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def options(self):
        """options(self) -> GnMusicIdStreamOptions"""
        return _gnsdk.GnMusicIdStream_options(self)

    def audio_process_start(self, *args):
        """
        audio_process_start(self, IGnAudioSource audioSource)
        audio_process_start(self, gnsdk_uint32_t samplesPerSecond, gnsdk_uint32_t bitsPerSample, 
            gnsdk_uint32_t numberOfChannels)
        """
        return _gnsdk.GnMusicIdStream_audio_process_start(self, *args)

    def audio_process_stop(self):
        """audio_process_stop(self)"""
        return _gnsdk.GnMusicIdStream_audio_process_stop(self)

    def audio_process(self, *args):
        """audio_process(self, gnsdk_byte_t pAudioData, gnsdk_uint32_t audioDataLength)"""
        return _gnsdk.GnMusicIdStream_audio_process(self, *args)

    def identify_async(self):
        """identify_async(self)"""
        return _gnsdk.GnMusicIdStream_identify_async(self)

    def event_handler(self):
        """event_handler(self) -> GnMusicIdStreamEventsDelegate"""
        return _gnsdk.GnMusicIdStream_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnMusicIdStream_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnMusicIdStream_is_cancelled(self)

GnMusicIdStream_swigregister = _gnsdk.GnMusicIdStream_swigregister
GnMusicIdStream_swigregister(GnMusicIdStream)

def GnMusicIdStream_version():
  """GnMusicIdStream_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdStream_version()

def GnMusicIdStream_build_date():
  """GnMusicIdStream_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdStream_build_date()

class GnMusicIdStreamEventsDelegate(IGnStatusEvents):
    __swig_setmethods__ = {}
    for _s in [IGnStatusEvents]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdStreamEventsDelegate, name, value)
    __swig_getmethods__ = {}
    for _s in [IGnStatusEvents]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdStreamEventsDelegate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMusicIdStreamEventsDelegate
    __del__ = lambda self : None;
    def music_id_stream_status_event(self, *args):
        """music_id_stream_status_event(self, GNMUSICIDSTREAMSTATUS status, IGnCancellable canceller)"""
        return _gnsdk.GnMusicIdStreamEventsDelegate_music_id_stream_status_event(self, *args)

    def music_id_stream_result_available(self, *args):
        """music_id_stream_result_available(self, GnResponseAlbums result, IGnCancellable canceller)"""
        return _gnsdk.GnMusicIdStreamEventsDelegate_music_id_stream_result_available(self, *args)

    def __init__(self): 
        if self.__class__ == GnMusicIdStreamEventsDelegate:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_GnMusicIdStreamEventsDelegate(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_GnMusicIdStreamEventsDelegate(self)
        return weakref_proxy(self)
GnMusicIdStreamEventsDelegate_swigregister = _gnsdk.GnMusicIdStreamEventsDelegate_swigregister
GnMusicIdStreamEventsDelegate_swigregister(GnMusicIdStreamEventsDelegate)

class GnMusicIdMatch(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMusicIdMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMusicIdMatch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, gnsdk_cstr_t idDataSource, IGnStatusEvents pEventHandler = (0)) -> GnMusicIdMatch
        __init__(self, GnUser user, gnsdk_cstr_t idDataSource) -> GnMusicIdMatch
        """
        this = _gnsdk.new_GnMusicIdMatch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMusicIdMatch
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdMatch_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnMusicIdMatch_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def set_lookup_fingerprint(self, *args):
        """set_lookup_fingerprint(self, gnsdk_cstr_t ident, gnsdk_cstr_t fingerprintData)"""
        return _gnsdk.GnMusicIdMatch_set_lookup_fingerprint(self, *args)

    def set_compare_fingerprint(self, *args):
        """set_compare_fingerprint(self, gnsdk_cstr_t ident, gnsdk_cstr_t fingerprintData)"""
        return _gnsdk.GnMusicIdMatch_set_compare_fingerprint(self, *args)

    def set_compare_data(self, *args):
        """
        set_compare_data(self, gnsdk_cstr_t ident, GnExternalId externalId)
        set_compare_data(self, gnsdk_cstr_t ident, GnMatch match, bool includeTui = False)
        set_compare_data(self, gnsdk_cstr_t ident, GnMatch match)
        set_compare_data(self, gnsdk_cstr_t ident, match_iterator _from, match_iterator end, 
            bool includeTui = False)
        set_compare_data(self, gnsdk_cstr_t ident, match_iterator _from, match_iterator end)
        set_compare_data(self, gnsdk_cstr_t ident, gnsdk_cstr_t otherId)
        """
        return _gnsdk.GnMusicIdMatch_set_compare_data(self, *args)

    def find_matches(self):
        """find_matches(self)"""
        return _gnsdk.GnMusicIdMatch_find_matches(self)

    def get_response(self, *args):
        """get_response(self, gnsdk_cstr_t ident) -> GnResponseMatches"""
        return _gnsdk.GnMusicIdMatch_get_response(self, *args)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnMusicIdMatch_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnMusicIdMatch_is_cancelled(self)

GnMusicIdMatch_swigregister = _gnsdk.GnMusicIdMatch_swigregister
GnMusicIdMatch_swigregister(GnMusicIdMatch)

def GnMusicIdMatch_version():
  """GnMusicIdMatch_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdMatch_version()

def GnMusicIdMatch_build_date():
  """GnMusicIdMatch_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnMusicIdMatch_build_date()

exact = _gnsdk.exact
largest = _gnsdk.largest
smallest = _gnsdk.smallest
kLinkContentUnknown = _gnsdk.kLinkContentUnknown
kLinkContentCoverArt = _gnsdk.kLinkContentCoverArt
kLinkContentGenreArt = _gnsdk.kLinkContentGenreArt
kLinkContentReview = _gnsdk.kLinkContentReview
kLinkContentBiography = _gnsdk.kLinkContentBiography
kLinkContentArtistNews = _gnsdk.kLinkContentArtistNews
kLinkContentLyricXML = _gnsdk.kLinkContentLyricXML
kLinkContentLyricText = _gnsdk.kLinkContentLyricText
kLinkContentDspData = _gnsdk.kLinkContentDspData
kLinkContentCommentsListener = _gnsdk.kLinkContentCommentsListener
kLinkContentCommentsRelease = _gnsdk.kLinkContentCommentsRelease
kLinkContentNews = _gnsdk.kLinkContentNews
kLinkContentImage = _gnsdk.kLinkContentImage
kLinkContentImageArtist = _gnsdk.kLinkContentImageArtist
kLinkDataUnknown = _gnsdk.kLinkDataUnknown
kLinkDataTextPlain = _gnsdk.kLinkDataTextPlain
kLinkDataTextXML = _gnsdk.kLinkDataTextXML
kLinkDataNumber = _gnsdk.kLinkDataNumber
kLinkDataImageJpeg = _gnsdk.kLinkDataImageJpeg
kLinkDataImagePng = _gnsdk.kLinkDataImagePng
kLinkDataImageBinary = _gnsdk.kLinkDataImageBinary
class GnLinkOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLinkOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnLinkOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def lookup_mode(self, *args):
        """lookup_mode(self, GNLOOKUPMODE lookupMode)"""
        return _gnsdk.GnLinkOptions_lookup_mode(self, *args)

    def track_ordinal(self, *args):
        """track_ordinal(self, gnsdk_uint32_t number)"""
        return _gnsdk.GnLinkOptions_track_ordinal(self, *args)

    def data_source(self, *args):
        """data_source(self, gnsdk_cstr_t datasource)"""
        return _gnsdk.GnLinkOptions_data_source(self, *args)

    def data_type(self, *args):
        """data_type(self, gnsdk_cstr_t datatype)"""
        return _gnsdk.GnLinkOptions_data_type(self, *args)

    def clear(self):
        """clear(self)"""
        return _gnsdk.GnLinkOptions_clear(self)

    __swig_destroy__ = _gnsdk.delete_GnLinkOptions
    __del__ = lambda self : None;
GnLinkOptions_swigregister = _gnsdk.GnLinkOptions_swigregister
GnLinkOptions_swigregister(GnLinkOptions)

class GnLink(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLink, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnDataObject gnDataObject, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnLink
        __init__(self, GnDataObject gnDataObject, GnUser user) -> GnLink
        __init__(self, GnListElement listElement, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnLink
        __init__(self, GnListElement listElement, GnUser user) -> GnLink
        """
        this = _gnsdk.new_GnLink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLink
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnLink_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnLink_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def count(self, *args):
        """count(self, GNLINKCONTENTTYPE contentType) -> gnsdk_uint32_t"""
        return _gnsdk.GnLink_count(self, *args)

    def options(self):
        """options(self) -> GnLinkOptions"""
        return _gnsdk.GnLink_options(self)

    def cover_art(self, *args):
        """
        cover_art(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference, 
            gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        cover_art(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference) -> GnLinkContent
        """
        return _gnsdk.GnLink_cover_art(self, *args)

    def genre_art(self, *args):
        """
        genre_art(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference, 
            gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        genre_art(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference) -> GnLinkContent
        """
        return _gnsdk.GnLink_genre_art(self, *args)

    def image(self, *args):
        """
        image(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference, 
            gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        image(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference) -> GnLinkContent
        """
        return _gnsdk.GnLink_image(self, *args)

    def artist_image(self, *args):
        """
        artist_image(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference, 
            gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        artist_image(self, GNIMAGESIZE imageSize, GNIMAGEPREFERENCE imagePreference) -> GnLinkContent
        """
        return _gnsdk.GnLink_artist_image(self, *args)

    def review(self, item_ord = 1):
        """
        review(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        review(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_review(self, item_ord)

    def biography(self, item_ord = 1):
        """
        biography(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        biography(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_biography(self, item_ord)

    def artist_news(self, item_ord = 1):
        """
        artist_news(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        artist_news(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_artist_news(self, item_ord)

    def lyric_xml(self, item_ord = 1):
        """
        lyric_xml(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        lyric_xml(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_lyric_xml(self, item_ord)

    def lyric_text(self, item_ord = 1):
        """
        lyric_text(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        lyric_text(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_lyric_text(self, item_ord)

    def comments_listener(self, item_ord = 1):
        """
        comments_listener(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        comments_listener(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_comments_listener(self, item_ord)

    def comments_release(self, item_ord = 1):
        """
        comments_release(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        comments_release(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_comments_release(self, item_ord)

    def news(self, item_ord = 1):
        """
        news(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        news(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_news(self, item_ord)

    def dsp_data(self, item_ord = 1):
        """
        dsp_data(self, gnsdk_uint32_t item_ord = 1) -> GnLinkContent
        dsp_data(self) -> GnLinkContent
        """
        return _gnsdk.GnLink_dsp_data(self, item_ord)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnLink_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnLink_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnLink_is_cancelled(self)

GnLink_swigregister = _gnsdk.GnLink_swigregister
GnLink_swigregister(GnLink)

def GnLink_version():
  """GnLink_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnLink_version()

def GnLink_build_date():
  """GnLink_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnLink_build_date()

class GnLinkContent(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLinkContent, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLinkContent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GnLinkContent
        __init__(self, void contentData, gnsdk_size_t dataSize, GNLINKCONTENTTYPE contentType, 
            GNLINKDATATYPE dataType) -> GnLinkContent
        """
        this = _gnsdk.new_GnLinkContent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLinkContent
    __del__ = lambda self : None;
    def data_buffer(self, *args):
        """data_buffer(self, gnsdk_byte_t pre_allocated_byte_buffer)"""
        return _gnsdk.GnLinkContent_data_buffer(self, *args)

    def content_data(self):
        """content_data(self) -> void"""
        return _gnsdk.GnLinkContent_content_data(self)

    def data_size(self):
        """data_size(self) -> unsigned long"""
        return _gnsdk.GnLinkContent_data_size(self)

    def data_type(self):
        """data_type(self) -> GNLINKDATATYPE"""
        return _gnsdk.GnLinkContent_data_type(self)

GnLinkContent_swigregister = _gnsdk.GnLinkContent_swigregister
GnLinkContent_swigregister(GnLinkContent)

class GnStorageSqlite(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnStorageSqlite, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnStorageSqlite, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnStorageSqlite"""
        this = _gnsdk.new_GnStorageSqlite()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnStorageSqlite
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def sqlite_version():
        """sqlite_version() -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_sqlite_version()

    if _newclass:sqlite_version = staticmethod(sqlite_version)
    __swig_getmethods__["sqlite_version"] = lambda x: sqlite_version
    def storage_folder_set(self, *args):
        """storage_folder_set(self, gnsdk_cstr_t folderPath)"""
        return _gnsdk.GnStorageSqlite_storage_folder_set(self, *args)

    def storage_folder_get(self):
        """storage_folder_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_storage_folder_get(self)

    def maximum_size_for_cache_file_set(self, *args):
        """maximum_size_for_cache_file_set(self, gnsdk_cstr_t maxCacheSize)"""
        return _gnsdk.GnStorageSqlite_maximum_size_for_cache_file_set(self, *args)

    def maximum_size_for_cache_file_get(self):
        """maximum_size_for_cache_file_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_maximum_size_for_cache_file_get(self)

    def maximum_memory_size_for_cache_set(self, *args):
        """maximum_memory_size_for_cache_set(self, gnsdk_cstr_t maxMemSize)"""
        return _gnsdk.GnStorageSqlite_maximum_memory_size_for_cache_set(self, *args)

    def maximum_memory_size_for_cache_get(self):
        """maximum_memory_size_for_cache_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_maximum_memory_size_for_cache_get(self)

    def synchronous_option_for_cache_set(self, *args):
        """synchronous_option_for_cache_set(self, gnsdk_cstr_t option)"""
        return _gnsdk.GnStorageSqlite_synchronous_option_for_cache_set(self, *args)

    def synchronous_option_for_cache_get(self):
        """synchronous_option_for_cache_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_synchronous_option_for_cache_get(self)

    def journal_mode_set(self, *args):
        """journal_mode_set(self, gnsdk_cstr_t mode)"""
        return _gnsdk.GnStorageSqlite_journal_mode_set(self, *args)

    def journal_mode_get(self):
        """journal_mode_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnStorageSqlite_journal_mode_get(self)

GnStorageSqlite_swigregister = _gnsdk.GnStorageSqlite_swigregister
GnStorageSqlite_swigregister(GnStorageSqlite)

def GnStorageSqlite_version():
  """GnStorageSqlite_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnStorageSqlite_version()

def GnStorageSqlite_build_date():
  """GnStorageSqlite_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnStorageSqlite_build_date()

def GnStorageSqlite_sqlite_version():
  """GnStorageSqlite_sqlite_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnStorageSqlite_sqlite_version()

kContent = _gnsdk.kContent
kMetadata = _gnsdk.kMetadata
kTOCIndex = _gnsdk.kTOCIndex
KTextIndex = _gnsdk.KTextIndex
kGDBVersion = _gnsdk.kGDBVersion
kImageSize = _gnsdk.kImageSize
class GnLookupLocal(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLookupLocal, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLookupLocal, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLookupLocal"""
        this = _gnsdk.new_GnLookupLocal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLookupLocal
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupLocal_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupLocal_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def storage_compact(self, *args):
        """storage_compact(self, GNLOCALSTORAGENAME storageName)"""
        return _gnsdk.GnLookupLocal_storage_compact(self, *args)

    def storage_location(self, *args):
        """storage_location(self, GNLOCALSTORAGENAME storageName, gnsdk_cstr_t storageLocation)"""
        return _gnsdk.GnLookupLocal_storage_location(self, *args)

    def storage_validate(self, *args):
        """storage_validate(self, GNLOCALSTORAGENAME storageName)"""
        return _gnsdk.GnLookupLocal_storage_validate(self, *args)

    def storage_info(self, *args):
        """
        storage_info(self, GNLOCALSTORAGENAME storageName, GNLOCALSTORAGEINFOKEY storageInfoKey, 
            gnsdk_uint32_t ordinal) -> gnsdk_cstr_t
        """
        return _gnsdk.GnLookupLocal_storage_info(self, *args)

    def storage_info_count(self, *args):
        """storage_info_count(self, GNLOCALSTORAGENAME storageName, GNLOCALSTORAGEINFOKEY storageInfoKey) -> gnsdk_uint32_t"""
        return _gnsdk.GnLookupLocal_storage_info_count(self, *args)

GnLookupLocal_swigregister = _gnsdk.GnLookupLocal_swigregister
GnLookupLocal_swigregister(GnLookupLocal)

def GnLookupLocal_version():
  """GnLookupLocal_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupLocal_version()

def GnLookupLocal_build_date():
  """GnLookupLocal_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupLocal_build_date()

class GnLookupFpLocal(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLookupFpLocal, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLookupFpLocal, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLookupFpLocal"""
        this = _gnsdk.new_GnLookupFpLocal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLookupFpLocal
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupFpLocal_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupFpLocal_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def storage_location(self, *args):
        """storage_location(self, gnsdk_cstr_t name, gnsdk_cstr_t location)"""
        return _gnsdk.GnLookupFpLocal_storage_location(self, *args)

    def bundle_ingest(self, *args):
        """bundle_ingest(self, IGnBundleSource ingestSource)"""
        return _gnsdk.GnLookupFpLocal_bundle_ingest(self, *args)

    def cache_clear_all(self):
        """cache_clear_all(self)"""
        return _gnsdk.GnLookupFpLocal_cache_clear_all(self)

    def cache_delete(self, *args):
        """cache_delete(self, gnsdk_cstr_t bundleId)"""
        return _gnsdk.GnLookupFpLocal_cache_delete(self, *args)

GnLookupFpLocal_swigregister = _gnsdk.GnLookupFpLocal_swigregister
GnLookupFpLocal_swigregister(GnLookupFpLocal)

def GnLookupFpLocal_version():
  """GnLookupFpLocal_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupFpLocal_version()

def GnLookupFpLocal_build_date():
  """GnLookupFpLocal_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupFpLocal_build_date()

kLocalStreamMetadata = _gnsdk.kLocalStreamMetadata
class GnLookupLocalStream(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnLookupLocalStream, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnLookupLocalStream, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnLookupLocalStream"""
        this = _gnsdk.new_GnLookupLocalStream()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnLookupLocalStream
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupLocalStream_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnLookupLocalStream_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def storage_location(self, *args):
        """storage_location(self, GNLOCALSTREAMSTORAGENAME name, gnsdk_cstr_t location)"""
        return _gnsdk.GnLookupLocalStream_storage_location(self, *args)

    def bundle_ingest(self, *args):
        """bundle_ingest(self, IGnBundleSource ingestSource)"""
        return _gnsdk.GnLookupLocalStream_bundle_ingest(self, *args)

    def cache_clear_all(self):
        """cache_clear_all(self)"""
        return _gnsdk.GnLookupLocalStream_cache_clear_all(self)

    def cache_delete(self, *args):
        """cache_delete(self, gnsdk_cstr_t bundleId)"""
        return _gnsdk.GnLookupLocalStream_cache_delete(self, *args)

GnLookupLocalStream_swigregister = _gnsdk.GnLookupLocalStream_swigregister
GnLookupLocalStream_swigregister(GnLookupLocalStream)

def GnLookupLocalStream_version():
  """GnLookupLocalStream_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupLocalStream_version()

def GnLookupLocalStream_build_date():
  """GnLookupLocalStream_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnLookupLocalStream_build_date()

kDspFeatureQualityUnknown = _gnsdk.kDspFeatureQualityUnknown
kDspFeatureQualityStandard = _gnsdk.kDspFeatureQualityStandard
kDspFeatureQualityShort = _gnsdk.kDspFeatureQualityShort
kDspFeatureQualitySilent = _gnsdk.kDspFeatureQualitySilent
kDspFeatureTypeAFX3 = _gnsdk.kDspFeatureTypeAFX3
kDspFeatureTypeChroma = _gnsdk.kDspFeatureTypeChroma
kDspFeatureTypeCantametrixQ = _gnsdk.kDspFeatureTypeCantametrixQ
kDspFeatureTypeCantametrixR = _gnsdk.kDspFeatureTypeCantametrixR
kDspFeatureTypeFEXModule = _gnsdk.kDspFeatureTypeFEXModule
kDspFeatureTypeFraunhofer = _gnsdk.kDspFeatureTypeFraunhofer
kDspFeatureTypeFAPIQ3sLQ = _gnsdk.kDspFeatureTypeFAPIQ3sLQ
kDspFeatureTypeFAPIQ3sMQ = _gnsdk.kDspFeatureTypeFAPIQ3sMQ
kDspFeatureTypeFAPIQ6sMQ = _gnsdk.kDspFeatureTypeFAPIQ6sMQ
kDspFeatureTypeFAPIR = _gnsdk.kDspFeatureTypeFAPIR
kDspFeatureTypeNanoFAPIQ = _gnsdk.kDspFeatureTypeNanoFAPIQ
kDspFeatureTypeMicroFAPIQ = _gnsdk.kDspFeatureTypeMicroFAPIQ
class GnDspFeature(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDspFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnDspFeature, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnDspFeature"""
        this = _gnsdk.new_GnDspFeature()
        try: self.this.append(this)
        except: self.this = this
    def feature_data(self):
        """feature_data(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnDspFeature_feature_data(self)

    def feature_quality(self):
        """feature_quality(self) -> GNDSPFEATUREQUALITY"""
        return _gnsdk.GnDspFeature_feature_quality(self)

    __swig_destroy__ = _gnsdk.delete_GnDspFeature
    __del__ = lambda self : None;
GnDspFeature_swigregister = _gnsdk.GnDspFeature_swigregister
GnDspFeature_swigregister(GnDspFeature)

class GnDsp(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnDsp, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnDsp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, GNDSPFEATURETYPE featureType, gnsdk_uint32_t audioSampleRate, 
            gnsdk_uint32_t audioSampleSize, 
            gnsdk_uint32_t audioChannels) -> GnDsp
        """
        this = _gnsdk.new_GnDsp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnDsp
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnDsp_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnDsp_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def feature_audio_write(self, *args):
        """feature_audio_write(self, gnsdk_byte_t audioData, gnsdk_size_t audioDataBytes) -> bool"""
        return _gnsdk.GnDsp_feature_audio_write(self, *args)

    def feature_end_of_audio_write(self):
        """feature_end_of_audio_write(self)"""
        return _gnsdk.GnDsp_feature_end_of_audio_write(self)

    def feature_retrieve(self):
        """feature_retrieve(self) -> GnDspFeature"""
        return _gnsdk.GnDsp_feature_retrieve(self)

GnDsp_swigregister = _gnsdk.GnDsp_swigregister
GnDsp_swigregister(GnDsp)

def GnDsp_version():
  """GnDsp_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnDsp_version()

def GnDsp_build_date():
  """GnDsp_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnDsp_build_date()

class GnTrackEditProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackEditProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackEditProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackEditProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrackEditProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnTrackEditProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnTrackEditProvider_count(self)
    k_ordinal_start = _gnsdk.GnTrackEditProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnTrackEditProvider_k_count_offset
GnTrackEditProvider_swigregister = _gnsdk.GnTrackEditProvider_swigregister
GnTrackEditProvider_swigregister(GnTrackEditProvider)

class GnTrackEditItertor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackEditItertor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackEditItertor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnTrackEditItertor
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnTrackEditItertor__next(self)
    def has_next(self): return _gnsdk.GnTrackEditItertor_has_next(self)
    def distance(self, *args): return _gnsdk.GnTrackEditItertor_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackEditItertor(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnTrackEditItertor_swigregister = _gnsdk.GnTrackEditItertor_swigregister
GnTrackEditItertor_swigregister(GnTrackEditItertor)

class GnTrackEditIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackEditIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackEditIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTrackEditIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrackEditIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnTrackEditIterable_get_iterator(self)
    def end(self): return _gnsdk.GnTrackEditIterable_end(self)
    def count(self): return _gnsdk.GnTrackEditIterable_count(self)
    def at(self, *args): return _gnsdk.GnTrackEditIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnTrackEditIterable_swigregister = _gnsdk.GnTrackEditIterable_swigregister
GnTrackEditIterable_swigregister(GnTrackEditIterable)

kGnSubmitFeatureSourceName_unknown = _gnsdk.kGnSubmitFeatureSourceName_unknown
kGnSubmitFeatureSourceName_cdda = _gnsdk.kGnSubmitFeatureSourceName_cdda
kGnSubmitFeatureSourceId_unknown = _gnsdk.kGnSubmitFeatureSourceId_unknown
kGnSubmitFeatureSourceId_cdda = _gnsdk.kGnSubmitFeatureSourceId_cdda
kGnSubmitFeatureSourceDescription_unknown = _gnsdk.kGnSubmitFeatureSourceDescription_unknown
kGnSubmitFeatureSourceDescription_cdda = _gnsdk.kGnSubmitFeatureSourceDescription_cdda
kGnSubmitFeatureSourceBitRate_unknown = _gnsdk.kGnSubmitFeatureSourceBitRate_unknown
kGnSubmitFeatureSourceBitRate_1411200 = _gnsdk.kGnSubmitFeatureSourceBitRate_1411200
kGnSubmitFeatureSourceBitRateType_unknown = _gnsdk.kGnSubmitFeatureSourceBitRateType_unknown
kGnSubmitFeatureSourceBitRateType_constant = _gnsdk.kGnSubmitFeatureSourceBitRateType_constant
kSubmitStateUnknown = _gnsdk.kSubmitStateUnknown
kSubmitStateNothingToDo = _gnsdk.kSubmitStateNothingToDo
kSubmitStateReadyForAudio = _gnsdk.kSubmitStateReadyForAudio
kSubmitStateProcessingError = _gnsdk.kSubmitStateProcessingError
kSubmitStateReadyToUpload = _gnsdk.kSubmitStateReadyToUpload
kSubmitStateUploadSucceeded = _gnsdk.kSubmitStateUploadSucceeded
kSubmitStateUploadPartiallySucceeded = _gnsdk.kSubmitStateUploadPartiallySucceeded
kSubmitStateUploadFailed = _gnsdk.kSubmitStateUploadFailed
kSubmitAudioFormat_unknown = _gnsdk.kSubmitAudioFormat_unknown
kSubmitAudioFormat_pcm16 = _gnsdk.kSubmitAudioFormat_pcm16
class GnNameEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnNameEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnNameEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnNameEdit"""
        this = _gnsdk.new_GnNameEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnNameEdit
    __del__ = lambda self : None;
    def gn_name(self):
        """gn_name(self) -> GnName"""
        return _gnsdk.GnNameEdit_gn_name(self)

    def display(self, *args):
        """
        display(self) -> gnsdk_cstr_t
        display(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnNameEdit_display(self, *args)

    def sortable(self, *args):
        """
        sortable(self) -> gnsdk_cstr_t
        sortable(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnNameEdit_sortable(self, *args)

    def language(self, *args):
        """language(self, GnListElement langElement)"""
        return _gnsdk.GnNameEdit_language(self, *args)

GnNameEdit_swigregister = _gnsdk.GnNameEdit_swigregister
GnNameEdit_swigregister(GnNameEdit)

class GnContributorEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContributorEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnContributorEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnContributorEdit"""
        this = _gnsdk.new_GnContributorEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContributorEdit
    __del__ = lambda self : None;
    def gn_contributor(self):
        """gn_contributor(self) -> GnContributor"""
        return _gnsdk.GnContributorEdit_gn_contributor(self)

    def genre(self, *args):
        """genre(self, GnListElement genreElement)"""
        return _gnsdk.GnContributorEdit_genre(self, *args)

    def origin(self, *args):
        """origin(self, GnListElement originElement)"""
        return _gnsdk.GnContributorEdit_origin(self, *args)

    def era(self, *args):
        """era(self, GnListElement eraElement)"""
        return _gnsdk.GnContributorEdit_era(self, *args)

    def artist_type(self, *args):
        """artist_type(self, GnListElement arttypeElement)"""
        return _gnsdk.GnContributorEdit_artist_type(self, *args)

GnContributorEdit_swigregister = _gnsdk.GnContributorEdit_swigregister
GnContributorEdit_swigregister(GnContributorEdit)

class GnCreditEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCreditEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnCreditEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnCreditEdit"""
        this = _gnsdk.new_GnCreditEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCreditEdit
    __del__ = lambda self : None;
    def gn_credit(self):
        """gn_credit(self) -> GnCredit"""
        return _gnsdk.GnCreditEdit_gn_credit(self)

    def role(self, *args):
        """role(self, GnListElement roleElement)"""
        return _gnsdk.GnCreditEdit_role(self, *args)

    def name(self):
        """name(self) -> GnNameEdit"""
        return _gnsdk.GnCreditEdit_name(self)

    def contributor(self):
        """contributor(self) -> GnContributorEdit"""
        return _gnsdk.GnCreditEdit_contributor(self)

GnCreditEdit_swigregister = _gnsdk.GnCreditEdit_swigregister
GnCreditEdit_swigregister(GnCreditEdit)

class GnTitleEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTitleEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTitleEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnTitleEdit"""
        this = _gnsdk.new_GnTitleEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTitleEdit
    __del__ = lambda self : None;
    def gn_title(self):
        """gn_title(self) -> GnTitle"""
        return _gnsdk.GnTitleEdit_gn_title(self)

    def display(self, *args):
        """
        display(self) -> gnsdk_cstr_t
        display(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnTitleEdit_display(self, *args)

    def sortable(self, *args):
        """
        sortable(self) -> gnsdk_cstr_t
        sortable(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnTitleEdit_sortable(self, *args)

    def language(self, *args):
        """language(self, GnListElement langElement)"""
        return _gnsdk.GnTitleEdit_language(self, *args)

GnTitleEdit_swigregister = _gnsdk.GnTitleEdit_swigregister
GnTitleEdit_swigregister(GnTitleEdit)

class GnAudioWorkEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAudioWorkEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAudioWorkEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnAudioWorkEdit"""
        this = _gnsdk.new_GnAudioWorkEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAudioWorkEdit
    __del__ = lambda self : None;
    def gn_audio_work(self):
        """gn_audio_work(self) -> GnAudioWork"""
        return _gnsdk.GnAudioWorkEdit_gn_audio_work(self)

    def title(self):
        """title(self) -> GnTitleEdit"""
        return _gnsdk.GnAudioWorkEdit_title(self)

    def credit_add(self):
        """credit_add(self) -> GnCreditEdit"""
        return _gnsdk.GnAudioWorkEdit_credit_add(self)

    def credit(self, *args):
        """credit(self, gnsdk_uint32_t ord) -> GnCreditEdit"""
        return _gnsdk.GnAudioWorkEdit_credit(self, *args)

    def origin(self, *args):
        """origin(self, GnListElement originElement)"""
        return _gnsdk.GnAudioWorkEdit_origin(self, *args)

    def era(self, *args):
        """era(self, GnListElement eraElement)"""
        return _gnsdk.GnAudioWorkEdit_era(self, *args)

    def composition_form(self, *args):
        """
        composition_form(self) -> gnsdk_cstr_t
        composition_form(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnAudioWorkEdit_composition_form(self, *args)

GnAudioWorkEdit_swigregister = _gnsdk.GnAudioWorkEdit_swigregister
GnAudioWorkEdit_swigregister(GnAudioWorkEdit)

class GnArtistEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnArtistEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnArtistEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnArtistEdit"""
        this = _gnsdk.new_GnArtistEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnArtistEdit
    __del__ = lambda self : None;
    def gn_artist(self):
        """gn_artist(self) -> GnArtist"""
        return _gnsdk.GnArtistEdit_gn_artist(self)

    def name(self):
        """name(self) -> GnNameEdit"""
        return _gnsdk.GnArtistEdit_name(self)

    def contributor(self):
        """contributor(self) -> GnContributorEdit"""
        return _gnsdk.GnArtistEdit_contributor(self)

GnArtistEdit_swigregister = _gnsdk.GnArtistEdit_swigregister
GnArtistEdit_swigregister(GnArtistEdit)

class GnTrackEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTrackEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTrackEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnTrackEdit"""
        this = _gnsdk.new_GnTrackEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTrackEdit
    __del__ = lambda self : None;
    def gn_track(self):
        """gn_track(self) -> GnTrack"""
        return _gnsdk.GnTrackEdit_gn_track(self)

    def title(self):
        """title(self) -> GnTitleEdit"""
        return _gnsdk.GnTrackEdit_title(self)

    def artist(self):
        """artist(self) -> GnArtistEdit"""
        return _gnsdk.GnTrackEdit_artist(self)

    def credit_add(self):
        """credit_add(self) -> GnCreditEdit"""
        return _gnsdk.GnTrackEdit_credit_add(self)

    def credit(self, *args):
        """credit(self, gnsdk_uint32_t ord) -> GnCreditEdit"""
        return _gnsdk.GnTrackEdit_credit(self, *args)

    def audio_work(self):
        """audio_work(self) -> GnAudioWorkEdit"""
        return _gnsdk.GnTrackEdit_audio_work(self)

    def mood(self, *args):
        """mood(self, GnListElement moodElement)"""
        return _gnsdk.GnTrackEdit_mood(self, *args)

    def tempo(self, *args):
        """tempo(self, GnListElement tempoElement)"""
        return _gnsdk.GnTrackEdit_tempo(self, *args)

    def genre(self, *args):
        """genre(self, GnListElement genreElement)"""
        return _gnsdk.GnTrackEdit_genre(self, *args)

    def year(self, *args):
        """
        year(self) -> gnsdk_cstr_t
        year(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnTrackEdit_year(self, *args)

GnTrackEdit_swigregister = _gnsdk.GnTrackEdit_swigregister
GnTrackEdit_swigregister(GnTrackEdit)

class GnAlbumEdit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAlbumEdit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAlbumEdit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnAlbumEdit"""
        this = _gnsdk.new_GnAlbumEdit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAlbumEdit
    __del__ = lambda self : None;
    def gn_album(self):
        """gn_album(self) -> GnAlbum"""
        return _gnsdk.GnAlbumEdit_gn_album(self)

    def genre(self, *args):
        """genre(self, GnListElement genreElement)"""
        return _gnsdk.GnAlbumEdit_genre(self, *args)

    def title(self):
        """title(self) -> GnTitleEdit"""
        return _gnsdk.GnAlbumEdit_title(self)

    def artist(self):
        """artist(self) -> GnArtistEdit"""
        return _gnsdk.GnAlbumEdit_artist(self)

    def language(self, *args):
        """language(self, GnListElement langElement)"""
        return _gnsdk.GnAlbumEdit_language(self, *args)

    def cd_toc(self, *args):
        """
        cd_toc(self) -> gnsdk_cstr_t
        cd_toc(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnAlbumEdit_cd_toc(self, *args)

    def label(self, *args):
        """
        label(self) -> gnsdk_cstr_t
        label(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnAlbumEdit_label(self, *args)

    def disc_in_set(self, *args):
        """
        disc_in_set(self) -> gnsdk_uint32_t
        disc_in_set(self, gnsdk_uint32_t discNumber)
        """
        return _gnsdk.GnAlbumEdit_disc_in_set(self, *args)

    def total_in_set(self, *args):
        """
        total_in_set(self) -> gnsdk_uint32_t
        total_in_set(self, gnsdk_uint32_t totalDiscs)
        """
        return _gnsdk.GnAlbumEdit_total_in_set(self, *args)

    def is_compilation(self, *args):
        """
        is_compilation(self) -> bool
        is_compilation(self, bool bIsCompilation)
        """
        return _gnsdk.GnAlbumEdit_is_compilation(self, *args)

    def is_classical(self, *args):
        """
        is_classical(self) -> bool
        is_classical(self, bool bIsClassical)
        """
        return _gnsdk.GnAlbumEdit_is_classical(self, *args)

    def year(self, *args):
        """
        year(self) -> gnsdk_cstr_t
        year(self, gnsdk_cstr_t value)
        """
        return _gnsdk.GnAlbumEdit_year(self, *args)

    def track(self, *args):
        """track(self, gnsdk_uint32_t trackNum) -> GnTrackEdit"""
        return _gnsdk.GnAlbumEdit_track(self, *args)

    def tracks(self):
        """tracks(self) -> gracenote::gn_iterable_container<(gracenote::submit::trackedit_iterator)>"""
        return _gnsdk.GnAlbumEdit_tracks(self)

    def credit_add(self):
        """credit_add(self) -> GnCreditEdit"""
        return _gnsdk.GnAlbumEdit_credit_add(self)

    def credit(self, *args):
        """credit(self, gnsdk_uint32_t ord) -> GnCreditEdit"""
        return _gnsdk.GnAlbumEdit_credit(self, *args)

GnAlbumEdit_swigregister = _gnsdk.GnAlbumEdit_swigregister
GnAlbumEdit_swigregister(GnAlbumEdit)

class GnSubmit(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnSubmit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnSubmit, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnSubmit
        __init__(self, GnUser user) -> GnSubmit
        """
        this = _gnsdk.new_GnSubmit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnSubmit
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnSubmit_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnSubmit_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def album_edit_from_empty(self, *args):
        """album_edit_from_empty(self, gnsdk_uint32_t numTracks) -> GnAlbumEdit"""
        return _gnsdk.GnSubmit_album_edit_from_empty(self, *args)

    def album_edit(self, *args):
        """album_edit(self, GnAlbum album) -> GnAlbumEdit"""
        return _gnsdk.GnSubmit_album_edit(self, *args)

    def album_edit_from_xml(self, *args):
        """album_edit_from_xml(self, gnsdk_cstr_t albumXml) -> GnAlbumEdit"""
        return _gnsdk.GnSubmit_album_edit_from_xml(self, *args)

    def album_edit_from_cd_toc(self, *args):
        """album_edit_from_cd_toc(self, gnsdk_cstr_t cdtoc) -> GnAlbumEdit"""
        return _gnsdk.GnSubmit_album_edit_from_cd_toc(self, *args)

    def is_audio_process_needed(self, *args):
        """is_audio_process_needed(self, GnAlbum album, bool bSubmitTestMode) -> bool"""
        return _gnsdk.GnSubmit_is_audio_process_needed(self, *args)

    def audio_process_init(self, *args):
        """
        audio_process_init(self, GnTrack track, gnsdk_uint32_t audioRate, GNSUBMITAUDIOFORMAT audioFormat, 
            gnsdk_uint32_t audioChannels)
        """
        return _gnsdk.GnSubmit_audio_process_init(self, *args)

    def audio_source_details(self, *args):
        """
        audio_source_details(self, GnDataObject dataObject, GNSUBMITFEATURESOURCENAME name, 
            GNSUBMITFEATURESOURCEID id, GNSUBMITFEATURESOURCEDESCRIPTION desc, 
            GNSUBMITFEATURESOURCEBITRATE bitrate, 
            GNSUBMITFEATURESOURCEBITRATETYPE bitrate_type)
        """
        return _gnsdk.GnSubmit_audio_source_details(self, *args)

    def audio_process_write(self, *args):
        """audio_process_write(self, GnTrack track, gnsdk_byte_t audioData, gnsdk_size_t audioData_bytes) -> bool"""
        return _gnsdk.GnSubmit_audio_process_write(self, *args)

    def audio_process_finalize(self, *args):
        """audio_process_finalize(self, GnTrack track, bool bAborted)"""
        return _gnsdk.GnSubmit_audio_process_finalize(self, *args)

    def parcel_add(self, *args):
        """parcel_add(self, GnDataObject dataObject)"""
        return _gnsdk.GnSubmit_parcel_add(self, *args)

    def parcel_upload(self, *args):
        """parcel_upload(self, bool bSubmitTestMode) -> GNSUBMITSTATE"""
        return _gnsdk.GnSubmit_parcel_upload(self, *args)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnSubmit_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnSubmit_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnSubmit_is_cancelled(self)

GnSubmit_swigregister = _gnsdk.GnSubmit_swigregister
GnSubmit_swigregister(GnSubmit)

def GnSubmit_version():
  """GnSubmit_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnSubmit_version()

def GnSubmit_build_date():
  """GnSubmit_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnSubmit_build_date()

class GnRating(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnRating, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnRating, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnRating"""
        this = _gnsdk.new_GnRating()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnRating
    __del__ = lambda self : None;
    def rating(self):
        """rating(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating(self)

    def rating_type(self):
        """rating_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_type(self)

    def rating_desc(self):
        """rating_desc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_desc(self)

    def rating_type_id(self):
        """rating_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnRating_rating_type_id(self)

    def rating_reason(self):
        """rating_reason(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_reason(self)

    def rating_mpaa(self):
        """rating_mpaa(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_mpaa(self)

    def rating_mpaatv(self):
        """rating_mpaatv(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_mpaatv(self)

    def rating_fab(self):
        """rating_fab(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_fab(self)

    def rating_chvrs(self):
        """rating_chvrs(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_chvrs(self)

    def rating_canadian_tv(self):
        """rating_canadian_tv(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_canadian_tv(self)

    def rating_bbfc(self):
        """rating_bbfc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_bbfc(self)

    def rating_cbfc(self):
        """rating_cbfc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_cbfc(self)

    def rating_oflc(self):
        """rating_oflc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_oflc(self)

    def rating_hong_kong(self):
        """rating_hong_kong(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_hong_kong(self)

    def rating_finnish(self):
        """rating_finnish(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_finnish(self)

    def rating_kmrb(self):
        """rating_kmrb(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_kmrb(self)

    def rating_dvdparental(self):
        """rating_dvdparental(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_dvdparental(self)

    def rating_eirin(self):
        """rating_eirin(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_eirin(self)

    def rating_incaa(self):
        """rating_incaa(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_incaa(self)

    def rating_djtcq(self):
        """rating_djtcq(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_djtcq(self)

    def rating_quebec(self):
        """rating_quebec(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_quebec(self)

    def rating_france(self):
        """rating_france(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_france(self)

    def rating_fsk(self):
        """rating_fsk(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_fsk(self)

    def rating_italy(self):
        """rating_italy(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_italy(self)

    def rating_spain(self):
        """rating_spain(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnRating_rating_spain(self)

GnRating_swigregister = _gnsdk.GnRating_swigregister
GnRating_swigregister(GnRating)

class GnVideoCredit(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoCredit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnVideoCredit"""
        this = _gnsdk.new_GnVideoCredit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoCredit
    __del__ = lambda self : None;
    def role(self):
        """role(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_role(self)

    def role_id(self):
        """role_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoCredit_role_id(self)

    def role_billing(self):
        """role_billing(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_role_billing(self)

    def character_name(self):
        """character_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_character_name(self)

    def rank(self):
        """rank(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoCredit_rank(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_genre(self, *args)

    def artist_type(self, *args):
        """artist_type(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_artist_type(self, *args)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_origin(self, *args)

    def era(self, *args):
        """era(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoCredit_era(self, *args)

    def official_name(self):
        """official_name(self) -> GnName"""
        return _gnsdk.GnVideoCredit_official_name(self)

    def contributor(self):
        """contributor(self) -> GnContributor"""
        return _gnsdk.GnVideoCredit_contributor(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnVideoCredit_works(self)

    def series(self):
        """series(self) -> gracenote::gn_iterable_container<(gracenote::metadata::series_iterator)>"""
        return _gnsdk.GnVideoCredit_series(self)

    def seasons(self):
        """seasons(self) -> gracenote::gn_iterable_container<(gracenote::metadata::season_iterator)>"""
        return _gnsdk.GnVideoCredit_seasons(self)

GnVideoCredit_swigregister = _gnsdk.GnVideoCredit_swigregister
GnVideoCredit_swigregister(GnVideoCredit)

class GnVideoChapter(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoChapter, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoChapter, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoChapter_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoChapter"""
        return _gnsdk.GnVideoChapter__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnVideoChapter"""
        this = _gnsdk.new_GnVideoChapter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoChapter
    __del__ = lambda self : None;
    def ordinal(self):
        """ordinal(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoChapter_ordinal(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoChapter_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoChapter_duration_units(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoChapter_official_title(self)

    def video_credits(self):
        """video_credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::video_credit_iterator)>"""
        return _gnsdk.GnVideoChapter_video_credits(self)

GnVideoChapter_swigregister = _gnsdk.GnVideoChapter_swigregister
GnVideoChapter_swigregister(GnVideoChapter)

def GnVideoChapter_gn_type():
  """GnVideoChapter_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoChapter_gn_type()

def GnVideoChapter__From(*args):
  """GnVideoChapter__From(GnDataObject obj) -> GnVideoChapter"""
  return _gnsdk.GnVideoChapter__From(*args)

class GnVideoSeason(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeason, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeason, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoSeason"""
        return _gnsdk.GnVideoSeason__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnVideoSeason
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnVideoSeason
        """
        this = _gnsdk.new_GnVideoSeason(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeason
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnVideoSeason_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_tui_tag(self)

    def video_production_type(self):
        """video_production_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_video_production_type(self)

    def video_production_type_id(self):
        """video_production_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_video_production_type_id(self)

    def date_original_release(self):
        """date_original_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_date_original_release(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_duration_units(self)

    def franchise_num(self):
        """franchise_num(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_franchise_num(self)

    def franchise_count(self):
        """franchise_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_franchise_count(self)

    def plot_synopsis(self):
        """plot_synopsis(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_plot_synopsis(self)

    def plot_synopsis_language(self):
        """plot_synopsis_language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_plot_synopsis_language(self)

    def plot_tagline(self):
        """plot_tagline(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_plot_tagline(self)

    def serial_type(self):
        """serial_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_serial_type(self)

    def work_type(self):
        """work_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_work_type(self)

    def audience(self):
        """audience(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_audience(self)

    def video_mood(self):
        """video_mood(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_video_mood(self)

    def story_type(self):
        """story_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_story_type(self)

    def repuataion(self):
        """repuataion(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_repuataion(self)

    def scenario(self):
        """scenario(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_scenario(self)

    def setting_environment(self):
        """setting_environment(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_setting_environment(self)

    def setting_time_period(self):
        """setting_time_period(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_setting_time_period(self)

    def topic(self):
        """topic(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_topic(self)

    def season_number(self):
        """season_number(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_season_number(self)

    def season_count(self):
        """season_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeason_season_count(self)

    def source(self):
        """source(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_source(self)

    def style(self):
        """style(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_style(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_genre(self, *args)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeason_origin(self, *args)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnVideoSeason_rating(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoSeason_official_title(self)

    def franchise_title(self):
        """franchise_title(self) -> GnTitle"""
        return _gnsdk.GnVideoSeason_franchise_title(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnVideoSeason_external_ids(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnVideoSeason_works(self)

    def products(self):
        """products(self) -> gracenote::gn_iterable_container<(gracenote::metadata::product_iterator)>"""
        return _gnsdk.GnVideoSeason_products(self)

    def video_credits(self):
        """video_credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::video_credit_iterator)>"""
        return _gnsdk.GnVideoSeason_video_credits(self)

    def series(self):
        """series(self) -> gracenote::gn_iterable_container<(gracenote::metadata::series_iterator)>"""
        return _gnsdk.GnVideoSeason_series(self)

GnVideoSeason_swigregister = _gnsdk.GnVideoSeason_swigregister
GnVideoSeason_swigregister(GnVideoSeason)

def GnVideoSeason_gn_type():
  """GnVideoSeason_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoSeason_gn_type()

def GnVideoSeason__From(*args):
  """GnVideoSeason__From(GnDataObject obj) -> GnVideoSeason"""
  return _gnsdk.GnVideoSeason__From(*args)

class GnVideoSeries(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeries, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GnVideoSeries
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnVideoSeries
        """
        this = _gnsdk.new_GnVideoSeries(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeries
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnVideoSeries_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_tui_tag(self)

    def video_production_type(self):
        """video_production_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_video_production_type(self)

    def video_production_type_id(self):
        """video_production_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeries_video_production_type_id(self)

    def date_original_release(self):
        """date_original_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_date_original_release(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeries_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_duration_units(self)

    def franchise_num(self):
        """franchise_num(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeries_franchise_num(self)

    def franchise_count(self):
        """franchise_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSeries_franchise_count(self)

    def plot_synopsis(self):
        """plot_synopsis(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_plot_synopsis(self)

    def plot_tagline(self):
        """plot_tagline(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_plot_tagline(self)

    def plot_synopsis_language(self):
        """plot_synopsis_language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_plot_synopsis_language(self)

    def serial_type(self):
        """serial_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_serial_type(self)

    def work_type(self):
        """work_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_work_type(self)

    def audience(self):
        """audience(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_audience(self)

    def video_mood(self):
        """video_mood(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_video_mood(self)

    def story_type(self):
        """story_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_story_type(self)

    def reputation(self):
        """reputation(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_reputation(self)

    def scenario(self):
        """scenario(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_scenario(self)

    def setting_environment(self):
        """setting_environment(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_setting_environment(self)

    def setting_time_period(self):
        """setting_time_period(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_setting_time_period(self)

    def source(self):
        """source(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_source(self)

    def style(self):
        """style(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_style(self)

    def topic(self):
        """topic(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_topic(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_genre(self, *args)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSeries_origin(self, *args)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnVideoSeries_rating(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoSeries_official_title(self)

    def franchise_title(self):
        """franchise_title(self) -> GnTitle"""
        return _gnsdk.GnVideoSeries_franchise_title(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnVideoSeries_external_ids(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnVideoSeries_works(self)

    def products(self):
        """products(self) -> gracenote::gn_iterable_container<(gracenote::metadata::product_iterator)>"""
        return _gnsdk.GnVideoSeries_products(self)

    def seasons(self):
        """seasons(self) -> gracenote::gn_iterable_container<(gracenote::metadata::season_iterator)>"""
        return _gnsdk.GnVideoSeries_seasons(self)

    def video_credits(self):
        """video_credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::video_credit_iterator)>"""
        return _gnsdk.GnVideoSeries_video_credits(self)

GnVideoSeries_swigregister = _gnsdk.GnVideoSeries_swigregister
GnVideoSeries_swigregister(GnVideoSeries)

class GnVideoWork(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoWork, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoWork, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoWork"""
        return _gnsdk.GnVideoWork__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnVideoWork
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnVideoWork
        """
        this = _gnsdk.new_GnVideoWork(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoWork
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnVideoWork_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_tui_tag(self)

    def tui_match_product(self):
        """tui_match_product(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_tui_match_product(self)

    def video_production_type_id(self):
        """video_production_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_video_production_type_id(self)

    def video_production_type(self):
        """video_production_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_video_production_type(self)

    def date_original_release(self):
        """date_original_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_date_original_release(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_duration_units(self)

    def franchise_num(self):
        """franchise_num(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_franchise_num(self)

    def franchise_count(self):
        """franchise_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_franchise_count(self)

    def series_episode(self):
        """series_episode(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_series_episode(self)

    def series_episode_count(self):
        """series_episode_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_series_episode_count(self)

    def season_episode(self):
        """season_episode(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_season_episode(self)

    def season_episode_count(self):
        """season_episode_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_season_episode_count(self)

    def season_count(self):
        """season_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_season_count(self)

    def season_number(self):
        """season_number(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoWork_season_number(self)

    def plot_synopsis(self):
        """plot_synopsis(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_plot_synopsis(self)

    def plot_tagline(self):
        """plot_tagline(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_plot_tagline(self)

    def plot_synopsis_language(self):
        """plot_synopsis_language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_plot_synopsis_language(self)

    def serial_type(self):
        """serial_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_serial_type(self)

    def work_type(self):
        """work_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_work_type(self)

    def audience(self):
        """audience(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_audience(self)

    def video_mood(self):
        """video_mood(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_video_mood(self)

    def story_type(self):
        """story_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_story_type(self)

    def scenario(self):
        """scenario(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_scenario(self)

    def setting_environment(self):
        """setting_environment(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_setting_environment(self)

    def setting_time_period(self):
        """setting_time_period(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_setting_time_period(self)

    def source(self):
        """source(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_source(self)

    def style(self):
        """style(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_style(self)

    def topic(self):
        """topic(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_topic(self)

    def reputation(self):
        """reputation(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_reputation(self)

    def origin(self, *args):
        """origin(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_origin(self, *args)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoWork_genre(self, *args)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnVideoWork_rating(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoWork_official_title(self)

    def franchise_title(self):
        """franchise_title(self) -> GnTitle"""
        return _gnsdk.GnVideoWork_franchise_title(self)

    def series_title(self):
        """series_title(self) -> GnTitle"""
        return _gnsdk.GnVideoWork_series_title(self)

    def products(self):
        """products(self) -> gracenote::gn_iterable_container<(gracenote::metadata::product_iterator)>"""
        return _gnsdk.GnVideoWork_products(self)

    def video_credits(self):
        """video_credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::video_credit_iterator)>"""
        return _gnsdk.GnVideoWork_video_credits(self)

    def seasons(self):
        """seasons(self) -> gracenote::gn_iterable_container<(gracenote::metadata::season_iterator)>"""
        return _gnsdk.GnVideoWork_seasons(self)

    def series(self):
        """series(self) -> gracenote::gn_iterable_container<(gracenote::metadata::series_iterator)>"""
        return _gnsdk.GnVideoWork_series(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnVideoWork_external_ids(self)

GnVideoWork_swigregister = _gnsdk.GnVideoWork_swigregister
GnVideoWork_swigregister(GnVideoWork)

def GnVideoWork_gn_type():
  """GnVideoWork_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoWork_gn_type()

def GnVideoWork__From(*args):
  """GnVideoWork__From(GnDataObject obj) -> GnVideoWork"""
  return _gnsdk.GnVideoWork__From(*args)

class GnVideoFeature(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoFeature, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoFeature"""
        return _gnsdk.GnVideoFeature__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnVideoFeature"""
        this = _gnsdk.new_GnVideoFeature()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoFeature
    __del__ = lambda self : None;
    def ordinal(self):
        """ordinal(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoFeature_ordinal(self)

    def matched(self):
        """matched(self) -> bool"""
        return _gnsdk.GnVideoFeature_matched(self)

    def video_feature_type(self):
        """video_feature_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_video_feature_type(self)

    def video_production_type(self):
        """video_production_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_video_production_type(self)

    def video_production_type_id(self):
        """video_production_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoFeature_video_production_type_id(self)

    def date_release(self):
        """date_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_date_release(self)

    def date_original_release(self):
        """date_original_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_date_original_release(self)

    def notes(self):
        """notes(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_notes(self)

    def aspect_ratio(self):
        """aspect_ratio(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_aspect_ratio(self)

    def aspect_ratio_type(self):
        """aspect_ratio_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_aspect_ratio_type(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoFeature_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_duration_units(self)

    def plot_summary(self):
        """plot_summary(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_plot_summary(self)

    def plot_synopsis(self):
        """plot_synopsis(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_plot_synopsis(self)

    def plot_tagline(self):
        """plot_tagline(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_plot_tagline(self)

    def plot_synopsis_language(self):
        """plot_synopsis_language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_plot_synopsis_language(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoFeature_genre(self, *args)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoFeature_official_title(self)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnVideoFeature_rating(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnVideoFeature_works(self)

    def chapters(self):
        """chapters(self) -> gracenote::gn_iterable_container<(gracenote::metadata::chapter_iterator)>"""
        return _gnsdk.GnVideoFeature_chapters(self)

    def video_credits(self):
        """video_credits(self) -> gracenote::gn_iterable_container<(gracenote::metadata::video_credit_iterator)>"""
        return _gnsdk.GnVideoFeature_video_credits(self)

GnVideoFeature_swigregister = _gnsdk.GnVideoFeature_swigregister
GnVideoFeature_swigregister(GnVideoFeature)

def GnVideoFeature_gn_type():
  """GnVideoFeature_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoFeature_gn_type()

def GnVideoFeature__From(*args):
  """GnVideoFeature__From(GnDataObject obj) -> GnVideoFeature"""
  return _gnsdk.GnVideoFeature__From(*args)

class GnVideoLayer(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoLayer, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoLayer"""
        return _gnsdk.GnVideoLayer__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnVideoLayer"""
        this = _gnsdk.new_GnVideoLayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoLayer
    __del__ = lambda self : None;
    def ordinal(self):
        """ordinal(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoLayer_ordinal(self)

    def matched(self):
        """matched(self) -> bool"""
        return _gnsdk.GnVideoLayer_matched(self)

    def aspect_ratio(self):
        """aspect_ratio(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_aspect_ratio(self)

    def aspect_ratio_type(self):
        """aspect_ratio_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_aspect_ratio_type(self)

    def tv_system(self):
        """tv_system(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_tv_system(self)

    def region_code(self):
        """region_code(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_region_code(self)

    def video_region(self):
        """video_region(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_video_region(self)

    def video_region_desc(self):
        """video_region_desc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_video_region_desc(self)

    def media_type(self):
        """media_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoLayer_media_type(self)

    def features(self):
        """features(self) -> gracenote::gn_iterable_container<(gracenote::metadata::feature_iterator)>"""
        return _gnsdk.GnVideoLayer_features(self)

GnVideoLayer_swigregister = _gnsdk.GnVideoLayer_swigregister
GnVideoLayer_swigregister(GnVideoLayer)

def GnVideoLayer_gn_type():
  """GnVideoLayer_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoLayer_gn_type()

def GnVideoLayer__From(*args):
  """GnVideoLayer__From(GnDataObject obj) -> GnVideoLayer"""
  return _gnsdk.GnVideoLayer__From(*args)

class GnVideoSide(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSide, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSide, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnVideoSide"""
        this = _gnsdk.new_GnVideoSide()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSide
    __del__ = lambda self : None;
    def ordinal(self):
        """ordinal(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoSide_ordinal(self)

    def matched(self):
        """matched(self) -> bool"""
        return _gnsdk.GnVideoSide_matched(self)

    def notes(self):
        """notes(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoSide_notes(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoSide_official_title(self)

    def layers(self):
        """layers(self) -> gracenote::gn_iterable_container<(gracenote::metadata::layer_iterator)>"""
        return _gnsdk.GnVideoSide_layers(self)

GnVideoSide_swigregister = _gnsdk.GnVideoSide_swigregister
GnVideoSide_swigregister(GnVideoSide)

class GnVideoDisc(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoDisc, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoDisc, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoDisc"""
        return _gnsdk.GnVideoDisc__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnVideoDisc
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnVideoDisc
        """
        this = _gnsdk.new_GnVideoDisc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoDisc
    __del__ = lambda self : None;
    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_tui_tag(self)

    def ordinal(self):
        """ordinal(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoDisc_ordinal(self)

    def matched(self):
        """matched(self) -> bool"""
        return _gnsdk.GnVideoDisc_matched(self)

    def notes(self):
        """notes(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoDisc_notes(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoDisc_official_title(self)

    def sides(self):
        """sides(self) -> gracenote::gn_iterable_container<(gracenote::metadata::side_iterator)>"""
        return _gnsdk.GnVideoDisc_sides(self)

GnVideoDisc_swigregister = _gnsdk.GnVideoDisc_swigregister
GnVideoDisc_swigregister(GnVideoDisc)

def GnVideoDisc_gn_type():
  """GnVideoDisc_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoDisc_gn_type()

def GnVideoDisc__From(*args):
  """GnVideoDisc__From(GnDataObject obj) -> GnVideoDisc"""
  return _gnsdk.GnVideoDisc__From(*args)

class GnVideoProduct(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoProduct, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnVideoProduct"""
        return _gnsdk.GnVideoProduct__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnVideoProduct
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnVideoProduct
        """
        this = _gnsdk.new_GnVideoProduct(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoProduct
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnVideoProduct_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_tui_tag(self)

    def package_language_display(self):
        """package_language_display(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_package_language_display(self)

    def package_language(self):
        """package_language(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_package_language(self)

    def video_production_type(self):
        """video_production_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_video_production_type(self)

    def video_production_type_id(self):
        """video_production_type_id(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoProduct_video_production_type_id(self)

    def date_original_release(self):
        """date_original_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_date_original_release(self)

    def date_release(self):
        """date_release(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_date_release(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnVideoProduct_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_duration_units(self)

    def aspect_ratio(self):
        """aspect_ratio(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_aspect_ratio(self)

    def aspect_ratio_type(self):
        """aspect_ratio_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_aspect_ratio_type(self)

    def video_region(self):
        """video_region(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_video_region(self)

    def video_region_desc(self):
        """video_region_desc(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_video_region_desc(self)

    def notes(self):
        """notes(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_notes(self)

    def commerce_type(self):
        """commerce_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_commerce_type(self)

    def genre(self, *args):
        """genre(self, GNDATALEVEL level) -> gnsdk_cstr_t"""
        return _gnsdk.GnVideoProduct_genre(self, *args)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnVideoProduct_rating(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnVideoProduct_official_title(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnVideoProduct_external_ids(self)

    def discs(self):
        """discs(self) -> gracenote::gn_iterable_container<(gracenote::metadata::disc_iterator)>"""
        return _gnsdk.GnVideoProduct_discs(self)

GnVideoProduct_swigregister = _gnsdk.GnVideoProduct_swigregister
GnVideoProduct_swigregister(GnVideoProduct)

def GnVideoProduct_gn_type():
  """GnVideoProduct_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideoProduct_gn_type()

def GnVideoProduct__From(*args):
  """GnVideoProduct__From(GnDataObject obj) -> GnVideoProduct"""
  return _gnsdk.GnVideoProduct__From(*args)

class GnTVProgram(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVProgram, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnTVProgram"""
        return _gnsdk.GnTVProgram__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self, *args): 
        """
        __init__(self) -> GnTVProgram
        __init__(self, gnsdk_cstr_t id, gnsdk_cstr_t idTag) -> GnTVProgram
        """
        this = _gnsdk.new_GnTVProgram(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVProgram
    __del__ = lambda self : None;
    def is_full_result(self):
        """is_full_result(self) -> bool"""
        return _gnsdk.GnTVProgram_is_full_result(self)

    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVProgram_tui_tag(self)

    def credit(self):
        """credit(self) -> GnCredit"""
        return _gnsdk.GnTVProgram_credit(self)

    def work(self):
        """work(self) -> GnVideoWork"""
        return _gnsdk.GnTVProgram_work(self)

GnTVProgram_swigregister = _gnsdk.GnTVProgram_swigregister
GnTVProgram_swigregister(GnTVProgram)

def GnTVProgram_gn_type():
  """GnTVProgram_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnTVProgram_gn_type()

def GnTVProgram__From(*args):
  """GnTVProgram__From(GnDataObject obj) -> GnTVProgram"""
  return _gnsdk.GnTVProgram__From(*args)

class GnTVChannel(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVChannel, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnTVChannel"""
        return _gnsdk.GnTVChannel__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnTVChannel"""
        this = _gnsdk.new_GnTVChannel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVChannel
    __del__ = lambda self : None;
    def gn_id(self):
        """gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_gn_id(self)

    def gn_uid(self):
        """gn_uid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_gn_uid(self)

    def product_id(self):
        """product_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_product_id(self)

    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_tui_tag(self)

    def rank(self):
        """rank(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_rank(self)

    def channel_number(self):
        """channel_number(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_channel_number(self)

    def channel_name(self):
        """channel_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_channel_name(self)

    def channel_callsign(self):
        """channel_callsign(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_channel_callsign(self)

    def identifier(self):
        """identifier(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_identifier(self)

    def on_id(self):
        """on_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_on_id(self)

    def tsid(self):
        """tsid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_tsid(self)

    def sid(self):
        """sid(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVChannel_sid(self)

    def external_ids(self):
        """external_ids(self) -> gracenote::gn_iterable_container<(gracenote::metadata::externalid_iterator)>"""
        return _gnsdk.GnTVChannel_external_ids(self)

GnTVChannel_swigregister = _gnsdk.GnTVChannel_swigregister
GnTVChannel_swigregister(GnTVChannel)

def GnTVChannel_gn_type():
  """GnTVChannel_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnTVChannel_gn_type()

def GnTVChannel__From(*args):
  """GnTVChannel__From(GnDataObject obj) -> GnTVChannel"""
  return _gnsdk.GnTVChannel__From(*args)

class GnTVAiring(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVAiring, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVAiring, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnTVAiring"""
        this = _gnsdk.new_GnTVAiring()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVAiring
    __del__ = lambda self : None;
    def tui(self):
        """tui(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_tui(self)

    def tui_tag(self):
        """tui_tag(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_tui_tag(self)

    def date_start(self):
        """date_start(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_date_start(self)

    def date_end(self):
        """date_end(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_date_end(self)

    def duration(self):
        """duration(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnTVAiring_duration(self)

    def duration_units(self):
        """duration_units(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_duration_units(self)

    def epg_viewing_type(self):
        """epg_viewing_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_epg_viewing_type(self)

    def epg_audio_type(self):
        """epg_audio_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_epg_audio_type(self)

    def epg_video_type(self):
        """epg_video_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_epg_video_type(self)

    def epg_caption_type(self):
        """epg_caption_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnTVAiring_epg_caption_type(self)

    def rating(self):
        """rating(self) -> GnRating"""
        return _gnsdk.GnTVAiring_rating(self)

    def tvprogram(self):
        """tvprogram(self) -> gracenote::gn_iterable_container<(gracenote::metadata::tvprogram_iterator)>"""
        return _gnsdk.GnTVAiring_tvprogram(self)

    def tvchannel(self):
        """tvchannel(self) -> gracenote::gn_iterable_container<(gracenote::metadata::tvchannel_iterator)>"""
        return _gnsdk.GnTVAiring_tvchannel(self)

GnTVAiring_swigregister = _gnsdk.GnTVAiring_swigregister
GnTVAiring_swigregister(GnTVAiring)

class GnAcrMatch(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcrMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcrMatch, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnAcrMatch"""
        this = _gnsdk.new_GnAcrMatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAcrMatch
    __del__ = lambda self : None;
    def channel_number(self):
        """channel_number(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcrMatch_channel_number(self)

    def channel_name(self):
        """channel_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcrMatch_channel_name(self)

    def channel_gn_id(self):
        """channel_gn_id(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcrMatch_channel_gn_id(self)

    def match_position(self):
        """match_position(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcrMatch_match_position(self)

    def official_title(self):
        """official_title(self) -> GnTitle"""
        return _gnsdk.GnAcrMatch_official_title(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnAcrMatch_works(self)

    def tvairing(self):
        """tvairing(self) -> gracenote::gn_iterable_container<(gracenote::metadata::tvairing_iterator)>"""
        return _gnsdk.GnAcrMatch_tvairing(self)

GnAcrMatch_swigregister = _gnsdk.GnAcrMatch_swigregister
GnAcrMatch_swigregister(GnAcrMatch)

class GnResponseVideoSuggestions(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoSuggestions, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoSuggestions, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSuggestions_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoSuggestions"""
        return _gnsdk.GnResponseVideoSuggestions__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoSuggestions"""
        this = _gnsdk.new_GnResponseVideoSuggestions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoSuggestions
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSuggestions_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSuggestions_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSuggestions_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSuggestions_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoSuggestions_needs_decision(self)

    def suggestion_text(self):
        """suggestion_text(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSuggestions_suggestion_text(self)

    def suggestion_title(self, *args):
        """suggestion_title(self, gnsdk_uint32_t ordinal) -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSuggestions_suggestion_title(self, *args)

    def suggestion_type(self):
        """suggestion_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSuggestions_suggestion_type(self)

GnResponseVideoSuggestions_swigregister = _gnsdk.GnResponseVideoSuggestions_swigregister
GnResponseVideoSuggestions_swigregister(GnResponseVideoSuggestions)

def GnResponseVideoSuggestions_gn_type():
  """GnResponseVideoSuggestions_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoSuggestions_gn_type()

def GnResponseVideoSuggestions__From(*args):
  """GnResponseVideoSuggestions__From(GnDataObject obj) -> GnResponseVideoSuggestions"""
  return _gnsdk.GnResponseVideoSuggestions__From(*args)

class GnResponseVideoObjects(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoObjects, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoObjects, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoObjects_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoObjects"""
        return _gnsdk.GnResponseVideoObjects__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoObjects"""
        this = _gnsdk.new_GnResponseVideoObjects()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoObjects
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoObjects_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoObjects_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoObjects_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoObjects_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoObjects_needs_decision(self)

    def products(self):
        """products(self) -> gracenote::gn_iterable_container<(gracenote::metadata::product_iterator)>"""
        return _gnsdk.GnResponseVideoObjects_products(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnResponseVideoObjects_works(self)

    def seasons(self):
        """seasons(self) -> gracenote::gn_iterable_container<(gracenote::metadata::season_iterator)>"""
        return _gnsdk.GnResponseVideoObjects_seasons(self)

    def series(self):
        """series(self) -> gracenote::gn_iterable_container<(gracenote::metadata::series_iterator)>"""
        return _gnsdk.GnResponseVideoObjects_series(self)

    def contributors(self):
        """contributors(self) -> gracenote::gn_iterable_container<(gracenote::metadata::contributor_iterator)>"""
        return _gnsdk.GnResponseVideoObjects_contributors(self)

GnResponseVideoObjects_swigregister = _gnsdk.GnResponseVideoObjects_swigregister
GnResponseVideoObjects_swigregister(GnResponseVideoObjects)

def GnResponseVideoObjects_gn_type():
  """GnResponseVideoObjects_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoObjects_gn_type()

def GnResponseVideoObjects__From(*args):
  """GnResponseVideoObjects__From(GnDataObject obj) -> GnResponseVideoObjects"""
  return _gnsdk.GnResponseVideoObjects__From(*args)

class GnResponseVideoProgram(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoProgram, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnResponseVideoProgram"""
        this = _gnsdk.new_GnResponseVideoProgram()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoProgram
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProgram_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProgram_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProgram_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProgram_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoProgram_needs_decision(self)

    def tvprogram(self):
        """tvprogram(self) -> gracenote::gn_iterable_container<(gracenote::metadata::tvprogram_iterator)>"""
        return _gnsdk.GnResponseVideoProgram_tvprogram(self)

GnResponseVideoProgram_swigregister = _gnsdk.GnResponseVideoProgram_swigregister
GnResponseVideoProgram_swigregister(GnResponseVideoProgram)

class GnResponseContributors(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseContributors, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseContributors, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnResponseContributors"""
        this = _gnsdk.new_GnResponseContributors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseContributors
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseContributors_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseContributors_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseContributors_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseContributors_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseContributors_needs_decision(self)

    def contributors(self):
        """contributors(self) -> gracenote::gn_iterable_container<(gracenote::metadata::contributor_iterator)>"""
        return _gnsdk.GnResponseContributors_contributors(self)

GnResponseContributors_swigregister = _gnsdk.GnResponseContributors_swigregister
GnResponseContributors_swigregister(GnResponseContributors)

class GnResponseVideoSeries(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoSeries, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoSeries, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSeries_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoSeries"""
        return _gnsdk.GnResponseVideoSeries__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoSeries"""
        this = _gnsdk.new_GnResponseVideoSeries()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoSeries
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeries_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeries_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeries_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeries_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoSeries_needs_decision(self)

    def series(self):
        """series(self) -> gracenote::gn_iterable_container<(gracenote::metadata::series_iterator)>"""
        return _gnsdk.GnResponseVideoSeries_series(self)

GnResponseVideoSeries_swigregister = _gnsdk.GnResponseVideoSeries_swigregister
GnResponseVideoSeries_swigregister(GnResponseVideoSeries)

def GnResponseVideoSeries_gn_type():
  """GnResponseVideoSeries_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoSeries_gn_type()

def GnResponseVideoSeries__From(*args):
  """GnResponseVideoSeries__From(GnDataObject obj) -> GnResponseVideoSeries"""
  return _gnsdk.GnResponseVideoSeries__From(*args)

class GnResponseVideoSeasons(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoSeasons, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoSeasons, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoSeasons_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoSeasons"""
        return _gnsdk.GnResponseVideoSeasons__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoSeasons"""
        this = _gnsdk.new_GnResponseVideoSeasons()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoSeasons
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeasons_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeasons_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeasons_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoSeasons_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoSeasons_needs_decision(self)

    def seasons(self):
        """seasons(self) -> gracenote::gn_iterable_container<(gracenote::metadata::season_iterator)>"""
        return _gnsdk.GnResponseVideoSeasons_seasons(self)

GnResponseVideoSeasons_swigregister = _gnsdk.GnResponseVideoSeasons_swigregister
GnResponseVideoSeasons_swigregister(GnResponseVideoSeasons)

def GnResponseVideoSeasons_gn_type():
  """GnResponseVideoSeasons_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoSeasons_gn_type()

def GnResponseVideoSeasons__From(*args):
  """GnResponseVideoSeasons__From(GnDataObject obj) -> GnResponseVideoSeasons"""
  return _gnsdk.GnResponseVideoSeasons__From(*args)

class GnResponseVideoWork(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoWork, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoWork, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoWork_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoWork"""
        return _gnsdk.GnResponseVideoWork__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoWork"""
        this = _gnsdk.new_GnResponseVideoWork()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoWork
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoWork_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoWork_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoWork_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoWork_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoWork_needs_decision(self)

    def works(self):
        """works(self) -> gracenote::gn_iterable_container<(gracenote::metadata::works_iterator)>"""
        return _gnsdk.GnResponseVideoWork_works(self)

GnResponseVideoWork_swigregister = _gnsdk.GnResponseVideoWork_swigregister
GnResponseVideoWork_swigregister(GnResponseVideoWork)

def GnResponseVideoWork_gn_type():
  """GnResponseVideoWork_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoWork_gn_type()

def GnResponseVideoWork__From(*args):
  """GnResponseVideoWork__From(GnDataObject obj) -> GnResponseVideoWork"""
  return _gnsdk.GnResponseVideoWork__From(*args)

class GnResponseVideoProduct(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseVideoProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseVideoProduct, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseVideoProduct_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseVideoProduct"""
        return _gnsdk.GnResponseVideoProduct__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseVideoProduct"""
        this = _gnsdk.new_GnResponseVideoProduct()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseVideoProduct
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProduct_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProduct_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProduct_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseVideoProduct_range_total(self)

    def needs_decision(self):
        """needs_decision(self) -> bool"""
        return _gnsdk.GnResponseVideoProduct_needs_decision(self)

    def products(self):
        """products(self) -> gracenote::gn_iterable_container<(gracenote::metadata::product_iterator)>"""
        return _gnsdk.GnResponseVideoProduct_products(self)

GnResponseVideoProduct_swigregister = _gnsdk.GnResponseVideoProduct_swigregister
GnResponseVideoProduct_swigregister(GnResponseVideoProduct)

def GnResponseVideoProduct_gn_type():
  """GnResponseVideoProduct_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseVideoProduct_gn_type()

def GnResponseVideoProduct__From(*args):
  """GnResponseVideoProduct__From(GnDataObject obj) -> GnResponseVideoProduct"""
  return _gnsdk.GnResponseVideoProduct__From(*args)

class GnResponseAcrMatch(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnResponseAcrMatch, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnResponseAcrMatch, name)
    __repr__ = _swig_repr
    def gn_type():
        """gn_type() -> gnsdk_cstr_t"""
        return _gnsdk.GnResponseAcrMatch_gn_type()

    if _newclass:gn_type = staticmethod(gn_type)
    __swig_getmethods__["gn_type"] = lambda x: gn_type
    def _From(*args):
        """_From(GnDataObject obj) -> GnResponseAcrMatch"""
        return _gnsdk.GnResponseAcrMatch__From(*args)

    if _newclass:_From = staticmethod(_From)
    __swig_getmethods__["_From"] = lambda x: _From
    def __init__(self): 
        """__init__(self) -> GnResponseAcrMatch"""
        this = _gnsdk.new_GnResponseAcrMatch()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnResponseAcrMatch
    __del__ = lambda self : None;
    def result_count(self):
        """result_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAcrMatch_result_count(self)

    def range_start(self):
        """range_start(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAcrMatch_range_start(self)

    def range_end(self):
        """range_end(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAcrMatch_range_end(self)

    def range_total(self):
        """range_total(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnResponseAcrMatch_range_total(self)

    def acr_match(self):
        """acr_match(self) -> gracenote::gn_iterable_container<(gracenote::metadata::acr_iterator)>"""
        return _gnsdk.GnResponseAcrMatch_acr_match(self)

GnResponseAcrMatch_swigregister = _gnsdk.GnResponseAcrMatch_swigregister
GnResponseAcrMatch_swigregister(GnResponseAcrMatch)

def GnResponseAcrMatch_gn_type():
  """GnResponseAcrMatch_gn_type() -> gnsdk_cstr_t"""
  return _gnsdk.GnResponseAcrMatch_gn_type()

def GnResponseAcrMatch__From(*args):
  """GnResponseAcrMatch__From(GnDataObject obj) -> GnResponseAcrMatch"""
  return _gnsdk.GnResponseAcrMatch__From(*args)

class GnVideoProductProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoProductProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoProductProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoProductProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoProductProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoProductProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoProductProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoProductProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoProductProvider_k_count_offset
GnVideoProductProvider_swigregister = _gnsdk.GnVideoProductProvider_swigregister
GnVideoProductProvider_swigregister(GnVideoProductProvider)

class GnVideoWorkProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoWorkProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoWorkProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoWorkProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoWorkProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoWorkProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoWorkProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoWorkProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoWorkProvider_k_count_offset
GnVideoWorkProvider_swigregister = _gnsdk.GnVideoWorkProvider_swigregister
GnVideoWorkProvider_swigregister(GnVideoWorkProvider)

class GnVideoSeasonProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeasonProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeasonProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeasonProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeasonProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoSeasonProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoSeasonProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoSeasonProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoSeasonProvider_k_count_offset
GnVideoSeasonProvider_swigregister = _gnsdk.GnVideoSeasonProvider_swigregister
GnVideoSeasonProvider_swigregister(GnVideoSeasonProvider)

class GnVideoSeriesProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeriesProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeriesProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeriesProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeriesProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoSeriesProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoSeriesProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoSeriesProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoSeriesProvider_k_count_offset
GnVideoSeriesProvider_swigregister = _gnsdk.GnVideoSeriesProvider_swigregister
GnVideoSeriesProvider_swigregister(GnVideoSeriesProvider)

class GnVideoDiscProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoDiscProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoDiscProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoDiscProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoDiscProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoDiscProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoDiscProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoDiscProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoDiscProvider_k_count_offset
GnVideoDiscProvider_swigregister = _gnsdk.GnVideoDiscProvider_swigregister
GnVideoDiscProvider_swigregister(GnVideoDiscProvider)

class GnVideoSideProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSideProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSideProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSideProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSideProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoSideProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoSideProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoSideProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoSideProvider_k_count_offset
GnVideoSideProvider_swigregister = _gnsdk.GnVideoSideProvider_swigregister
GnVideoSideProvider_swigregister(GnVideoSideProvider)

class GnVideoLayerProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoLayerProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoLayerProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoLayerProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoLayerProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoLayerProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoLayerProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoLayerProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoLayerProvider_k_count_offset
GnVideoLayerProvider_swigregister = _gnsdk.GnVideoLayerProvider_swigregister
GnVideoLayerProvider_swigregister(GnVideoLayerProvider)

class GnVideoFeatureProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoFeatureProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoFeatureProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoFeatureProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoFeatureProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoFeatureProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoFeatureProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoFeatureProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoFeatureProvider_k_count_offset
GnVideoFeatureProvider_swigregister = _gnsdk.GnVideoFeatureProvider_swigregister
GnVideoFeatureProvider_swigregister(GnVideoFeatureProvider)

class GnVideoChapterProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoChapterProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoChapterProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoChapterProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoChapterProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoChapterProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoChapterProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoChapterProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoChapterProvider_k_count_offset
GnVideoChapterProvider_swigregister = _gnsdk.GnVideoChapterProvider_swigregister
GnVideoChapterProvider_swigregister(GnVideoChapterProvider)

class GnVideoCreditProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoCreditProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoCreditProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoCreditProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoCreditProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnVideoCreditProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnVideoCreditProvider_count(self)
    k_ordinal_start = _gnsdk.GnVideoCreditProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnVideoCreditProvider_k_count_offset
GnVideoCreditProvider_swigregister = _gnsdk.GnVideoCreditProvider_swigregister
GnVideoCreditProvider_swigregister(GnVideoCreditProvider)

class GnTVProgramProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVProgramProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVProgramProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVProgramProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVProgramProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnTVProgramProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnTVProgramProvider_count(self)
    k_ordinal_start = _gnsdk.GnTVProgramProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnTVProgramProvider_k_count_offset
GnTVProgramProvider_swigregister = _gnsdk.GnTVProgramProvider_swigregister
GnTVProgramProvider_swigregister(GnTVProgramProvider)

class GnVideoProductIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoProductIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoProductIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoProductIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoProductIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoProductIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoProductIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoProductIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoProductIterator_swigregister = _gnsdk.GnVideoProductIterator_swigregister
GnVideoProductIterator_swigregister(GnVideoProductIterator)

class GnVideoWorkIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoWorkIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoWorkIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoWorkIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoWorkIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoWorkIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoWorkIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoWorkIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoWorkIterator_swigregister = _gnsdk.GnVideoWorkIterator_swigregister
GnVideoWorkIterator_swigregister(GnVideoWorkIterator)

class GnVideoSeasonIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeasonIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeasonIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoSeasonIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoSeasonIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoSeasonIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoSeasonIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeasonIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoSeasonIterator_swigregister = _gnsdk.GnVideoSeasonIterator_swigregister
GnVideoSeasonIterator_swigregister(GnVideoSeasonIterator)

class GnVideoSeriesIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeriesIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeriesIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoSeriesIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoSeriesIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoSeriesIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoSeriesIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeriesIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoSeriesIterator_swigregister = _gnsdk.GnVideoSeriesIterator_swigregister
GnVideoSeriesIterator_swigregister(GnVideoSeriesIterator)

class GnVideoDiscIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoDiscIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoDiscIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoDiscIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoDiscIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoDiscIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoDiscIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoDiscIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoDiscIterator_swigregister = _gnsdk.GnVideoDiscIterator_swigregister
GnVideoDiscIterator_swigregister(GnVideoDiscIterator)

class GnVideoSideIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSideIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSideIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoSideIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoSideIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoSideIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoSideIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSideIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoSideIterator_swigregister = _gnsdk.GnVideoSideIterator_swigregister
GnVideoSideIterator_swigregister(GnVideoSideIterator)

class GnVideoLayerIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoLayerIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoLayerIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoLayerIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoLayerIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoLayerIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoLayerIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoLayerIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoLayerIterator_swigregister = _gnsdk.GnVideoLayerIterator_swigregister
GnVideoLayerIterator_swigregister(GnVideoLayerIterator)

class GnVideoFeatureIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoFeatureIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoFeatureIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoFeatureIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoFeatureIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoFeatureIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoFeatureIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoFeatureIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoFeatureIterator_swigregister = _gnsdk.GnVideoFeatureIterator_swigregister
GnVideoFeatureIterator_swigregister(GnVideoFeatureIterator)

class GnVideoChapterIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoChapterIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoChapterIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoChapterIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoChapterIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoChapterIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoChapterIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoChapterIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoChapterIterator_swigregister = _gnsdk.GnVideoChapterIterator_swigregister
GnVideoChapterIterator_swigregister(GnVideoChapterIterator)

class GnVideoCreditIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoCreditIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoCreditIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnVideoCreditIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnVideoCreditIterator__next(self)
    def has_next(self): return _gnsdk.GnVideoCreditIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnVideoCreditIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoCreditIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnVideoCreditIterator_swigregister = _gnsdk.GnVideoCreditIterator_swigregister
GnVideoCreditIterator_swigregister(GnVideoCreditIterator)

class GnTVProgramIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVProgramIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVProgramIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnTVProgramIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnTVProgramIterator__next(self)
    def has_next(self): return _gnsdk.GnTVProgramIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnTVProgramIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVProgramIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnTVProgramIterator_swigregister = _gnsdk.GnTVProgramIterator_swigregister
GnTVProgramIterator_swigregister(GnTVProgramIterator)

class GnContributorIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContributorIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContributorIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnContributorIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnContributorIterator__next(self)
    def has_next(self): return _gnsdk.GnContributorIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnContributorIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnContributorIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnContributorIterator_swigregister = _gnsdk.GnContributorIterator_swigregister
GnContributorIterator_swigregister(GnContributorIterator)

class GnVideoProductIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoProductIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoProductIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoProductIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoProductIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoProductIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoProductIterable_end(self)
    def count(self): return _gnsdk.GnVideoProductIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoProductIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoProductIterable_swigregister = _gnsdk.GnVideoProductIterable_swigregister
GnVideoProductIterable_swigregister(GnVideoProductIterable)

class GnVideoWorkIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoWorkIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoWorkIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoWorkIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoWorkIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoWorkIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoWorkIterable_end(self)
    def count(self): return _gnsdk.GnVideoWorkIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoWorkIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoWorkIterable_swigregister = _gnsdk.GnVideoWorkIterable_swigregister
GnVideoWorkIterable_swigregister(GnVideoWorkIterable)

class GnVideoSeasonIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeasonIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeasonIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeasonIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeasonIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoSeasonIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoSeasonIterable_end(self)
    def count(self): return _gnsdk.GnVideoSeasonIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoSeasonIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoSeasonIterable_swigregister = _gnsdk.GnVideoSeasonIterable_swigregister
GnVideoSeasonIterable_swigregister(GnVideoSeasonIterable)

class GnVideoSeriesIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSeriesIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSeriesIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSeriesIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSeriesIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoSeriesIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoSeriesIterable_end(self)
    def count(self): return _gnsdk.GnVideoSeriesIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoSeriesIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoSeriesIterable_swigregister = _gnsdk.GnVideoSeriesIterable_swigregister
GnVideoSeriesIterable_swigregister(GnVideoSeriesIterable)

class GnVideoDiscIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoDiscIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoDiscIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoDiscIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoDiscIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoDiscIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoDiscIterable_end(self)
    def count(self): return _gnsdk.GnVideoDiscIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoDiscIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoDiscIterable_swigregister = _gnsdk.GnVideoDiscIterable_swigregister
GnVideoDiscIterable_swigregister(GnVideoDiscIterable)

class GnVideoSideIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoSideIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoSideIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoSideIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoSideIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoSideIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoSideIterable_end(self)
    def count(self): return _gnsdk.GnVideoSideIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoSideIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoSideIterable_swigregister = _gnsdk.GnVideoSideIterable_swigregister
GnVideoSideIterable_swigregister(GnVideoSideIterable)

class GnVideoLayerIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoLayerIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoLayerIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoLayerIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoLayerIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoLayerIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoLayerIterable_end(self)
    def count(self): return _gnsdk.GnVideoLayerIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoLayerIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoLayerIterable_swigregister = _gnsdk.GnVideoLayerIterable_swigregister
GnVideoLayerIterable_swigregister(GnVideoLayerIterable)

class GnVideoFeatureIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoFeatureIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoFeatureIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoFeatureIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoFeatureIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoFeatureIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoFeatureIterable_end(self)
    def count(self): return _gnsdk.GnVideoFeatureIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoFeatureIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoFeatureIterable_swigregister = _gnsdk.GnVideoFeatureIterable_swigregister
GnVideoFeatureIterable_swigregister(GnVideoFeatureIterable)

class GnVideoChapterIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoChapterIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoChapterIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoChapterIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoChapterIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoChapterIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoChapterIterable_end(self)
    def count(self): return _gnsdk.GnVideoChapterIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoChapterIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoChapterIterable_swigregister = _gnsdk.GnVideoChapterIterable_swigregister
GnVideoChapterIterable_swigregister(GnVideoChapterIterable)

class GnVideoCreditIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoCreditIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoCreditIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnVideoCreditIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideoCreditIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnVideoCreditIterable_get_iterator(self)
    def end(self): return _gnsdk.GnVideoCreditIterable_end(self)
    def count(self): return _gnsdk.GnVideoCreditIterable_count(self)
    def at(self, *args): return _gnsdk.GnVideoCreditIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnVideoCreditIterable_swigregister = _gnsdk.GnVideoCreditIterable_swigregister
GnVideoCreditIterable_swigregister(GnVideoCreditIterable)

class GnTVProgramIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVProgramIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVProgramIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVProgramIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVProgramIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnTVProgramIterable_get_iterator(self)
    def end(self): return _gnsdk.GnTVProgramIterable_end(self)
    def count(self): return _gnsdk.GnTVProgramIterable_count(self)
    def at(self, *args): return _gnsdk.GnTVProgramIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnTVProgramIterable_swigregister = _gnsdk.GnTVProgramIterable_swigregister
GnTVProgramIterable_swigregister(GnTVProgramIterable)

class GnContributorIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContributorIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContributorIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnContributorIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContributorIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnContributorIterable_get_iterator(self)
    def end(self): return _gnsdk.GnContributorIterable_end(self)
    def count(self): return _gnsdk.GnContributorIterable_count(self)
    def at(self, *args): return _gnsdk.GnContributorIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnContributorIterable_swigregister = _gnsdk.GnContributorIterable_swigregister
GnContributorIterable_swigregister(GnContributorIterable)

class GnContributorProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnContributorProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnContributorProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnContributorProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnContributorProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnContributorProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnContributorProvider_count(self)
    k_ordinal_start = _gnsdk.GnContributorProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnContributorProvider_k_count_offset
GnContributorProvider_swigregister = _gnsdk.GnContributorProvider_swigregister
GnContributorProvider_swigregister(GnContributorProvider)

kSearchTypeUnknown = _gnsdk.kSearchTypeUnknown
kSearchTypeAnchored = _gnsdk.kSearchTypeAnchored
kSearchTypeDefault = _gnsdk.kSearchTypeDefault
kSearchFieldContributorName = _gnsdk.kSearchFieldContributorName
kSearchFieldCharacterName = _gnsdk.kSearchFieldCharacterName
kSearchFieldWorkFranchise = _gnsdk.kSearchFieldWorkFranchise
kSearchFieldWorkSeries = _gnsdk.kSearchFieldWorkSeries
kSearchFieldWorkTitle = _gnsdk.kSearchFieldWorkTitle
kSearchFieldProductTitle = _gnsdk.kSearchFieldProductTitle
kSearchFieldSeriesTitle = _gnsdk.kSearchFieldSeriesTitle
kSearchFieldAll = _gnsdk.kSearchFieldAll
kTOCFlagDefault = _gnsdk.kTOCFlagDefault
kTOCFlagPal = _gnsdk.kTOCFlagPal
kTOCFlagAngles = _gnsdk.kTOCFlagAngles
kListElementFilterGenre = _gnsdk.kListElementFilterGenre
kListElementFilterProductionType = _gnsdk.kListElementFilterProductionType
kListElementFilterSerialType = _gnsdk.kListElementFilterSerialType
kListElementFilterOrigin = _gnsdk.kListElementFilterOrigin
kFilterSeasonNumber = _gnsdk.kFilterSeasonNumber
kFilterSeasonEpisodeNumber = _gnsdk.kFilterSeasonEpisodeNumber
kFilterSeriesEpisodeNumber = _gnsdk.kFilterSeriesEpisodeNumber
kExternalIdTypeUPC = _gnsdk.kExternalIdTypeUPC
kExternalIdTypeISAN = _gnsdk.kExternalIdTypeISAN
class GnVideoOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideoOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideoOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def result_prefer_language(self, *args):
        """result_prefer_language(self, GNLANGUAGE preferredLanguage)"""
        return _gnsdk.GnVideoOptions_result_prefer_language(self, *args)

    def result_range_start(self, *args):
        """result_range_start(self, gnsdk_uint32_t resultStart)"""
        return _gnsdk.GnVideoOptions_result_range_start(self, *args)

    def result_count(self, *args):
        """result_count(self, gnsdk_uint32_t resultCount)"""
        return _gnsdk.GnVideoOptions_result_count(self, *args)

    def lookup_data(self, *args):
        """lookup_data(self, GNLOOKUPDATA lookupData, bool bEnable)"""
        return _gnsdk.GnVideoOptions_lookup_data(self, *args)

    def query_no_cache(self, *args):
        """query_no_cache(self, bool bNoCache)"""
        return _gnsdk.GnVideoOptions_query_no_cache(self, *args)

    def query_commerce_type(self, *args):
        """query_commerce_type(self, bool bEnableCommerceType)"""
        return _gnsdk.GnVideoOptions_query_commerce_type(self, *args)

    def result_filter(self, *args):
        """
        result_filter(self, GNVIDEOLISTELEMENTFILTERTYPE listElementFilterType, 
            GnListElement listElement, bool bInclude)
        result_filter(self, GNVIDEOFILTERTYPE filterType, gnsdk_cstr_t filterValue)
        """
        return _gnsdk.GnVideoOptions_result_filter(self, *args)

    def custom(self, *args):
        """custom(self, gnsdk_cstr_t optionKey, gnsdk_cstr_t value)"""
        return _gnsdk.GnVideoOptions_custom(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnVideoOptions
    __del__ = lambda self : None;
GnVideoOptions_swigregister = _gnsdk.GnVideoOptions_swigregister
GnVideoOptions_swigregister(GnVideoOptions)

class GnVideo(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnVideo, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnVideo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnVideo
        __init__(self, GnUser user) -> GnVideo
        __init__(self, GnUser user, GnLocale locale, IGnStatusEvents pEventHandler = (0)) -> GnVideo
        __init__(self, GnUser user, GnLocale locale) -> GnVideo
        """
        this = _gnsdk.new_GnVideo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnVideo
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideo_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnVideo_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def options(self):
        """options(self) -> GnVideoOptions"""
        return _gnsdk.GnVideo_options(self)

    def find_products(self, *args):
        """
        find_products(self, gnsdk_cstr_t videoTOC, GNVIDEOTOCFLAG TOCFlag) -> GnResponseVideoProduct
        find_products(self, GnDataObject gnObj) -> GnResponseVideoProduct
        find_products(self, gnsdk_cstr_t textInput, GNVIDEOSEARCHFIELD searchField, 
            GNVIDEOSEARCHTYPE searchType) -> GnResponseVideoProduct
        find_products(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoProduct
        """
        return _gnsdk.GnVideo_find_products(self, *args)

    def find_works(self, *args):
        """
        find_works(self, GnDataObject gnObj) -> GnResponseVideoWork
        find_works(self, gnsdk_cstr_t textInput, GNVIDEOSEARCHFIELD searchField, 
            GNVIDEOSEARCHTYPE searchType) -> GnResponseVideoWork
        find_works(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoWork
        """
        return _gnsdk.GnVideo_find_works(self, *args)

    def find_seasons(self, *args):
        """
        find_seasons(self, GnDataObject gnObj) -> GnResponseVideoSeasons
        find_seasons(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoSeasons
        """
        return _gnsdk.GnVideo_find_seasons(self, *args)

    def find_series(self, *args):
        """
        find_series(self, GnDataObject gnObj) -> GnResponseVideoSeries
        find_series(self, gnsdk_cstr_t textInput, GNVIDEOSEARCHTYPE searchType) -> GnResponseVideoSeries
        find_series(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoSeries
        """
        return _gnsdk.GnVideo_find_series(self, *args)

    def find_contributors(self, *args):
        """
        find_contributors(self, GnDataObject gnObj) -> GnResponseContributors
        find_contributors(self, gnsdk_cstr_t textInput, GNVIDEOSEARCHTYPE searchType) -> GnResponseContributors
        find_contributors(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseContributors
        """
        return _gnsdk.GnVideo_find_contributors(self, *args)

    def find_programs(self, *args):
        """
        find_programs(self, GnDataObject gnObj) -> GnResponseVideoProgram
        find_programs(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoProgram
        """
        return _gnsdk.GnVideo_find_programs(self, *args)

    def find_objects(self, *args):
        """
        find_objects(self, GnDataObject gnObj) -> GnResponseVideoObjects
        find_objects(self, gnsdk_cstr_t externalId, GNVIDEOEXTERNALIDTYPE externalIdType) -> GnResponseVideoObjects
        """
        return _gnsdk.GnVideo_find_objects(self, *args)

    def find_suggestions(self, *args):
        """
        find_suggestions(self, GnDataObject gnObj) -> GnResponseVideoSuggestions
        find_suggestions(self, gnsdk_cstr_t search_text, GNVIDEOSEARCHFIELD searchField, 
            GNVIDEOSEARCHTYPE searchType) -> GnResponseVideoSuggestions
        """
        return _gnsdk.GnVideo_find_suggestions(self, *args)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnVideo_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnVideo_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnVideo_is_cancelled(self)

GnVideo_swigregister = _gnsdk.GnVideo_swigregister
GnVideo_swigregister(GnVideo)

def GnVideo_version():
  """GnVideo_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideo_version()

def GnVideo_build_date():
  """GnVideo_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnVideo_build_date()

class GnPlaylistCollectionIdentIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistCollectionIdentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistCollectionIdentIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnPlaylistCollectionIdentIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnPlaylistCollectionIdentIterator___ref__(self)
    def _next(self): return _gnsdk.GnPlaylistCollectionIdentIterator__next(self)
    def has_next(self): return _gnsdk.GnPlaylistCollectionIdentIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnPlaylistCollectionIdentIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistCollectionIdentIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnPlaylistCollectionIdentIterator_swigregister = _gnsdk.GnPlaylistCollectionIdentIterator_swigregister
GnPlaylistCollectionIdentIterator_swigregister(GnPlaylistCollectionIdentIterator)

class GnPlaylistCollectionIdentIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistCollectionIdentIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistCollectionIdentIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistCollectionIdentIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistCollectionIdentIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnPlaylistCollectionIdentIterable_begin(self)
    def end(self): return _gnsdk.GnPlaylistCollectionIdentIterable_end(self)
    def count(self): return _gnsdk.GnPlaylistCollectionIdentIterable_count(self)
    def at(self, *args): return _gnsdk.GnPlaylistCollectionIdentIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnPlaylistCollectionIdentIterable_swigregister = _gnsdk.GnPlaylistCollectionIdentIterable_swigregister
GnPlaylistCollectionIdentIterable_swigregister(GnPlaylistCollectionIdentIterable)

class GnPlaylistResultIdentIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistResultIdentIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistResultIdentIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnPlaylistResultIdentIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnPlaylistResultIdentIterator___ref__(self)
    def _next(self): return _gnsdk.GnPlaylistResultIdentIterator__next(self)
    def has_next(self): return _gnsdk.GnPlaylistResultIdentIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnPlaylistResultIdentIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistResultIdentIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnPlaylistResultIdentIterator_swigregister = _gnsdk.GnPlaylistResultIdentIterator_swigregister
GnPlaylistResultIdentIterator_swigregister(GnPlaylistResultIdentIterator)

class GnPlaylistResultIdentIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistResultIdentIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistResultIdentIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistResultIdentIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistResultIdentIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnPlaylistResultIdentIterable_begin(self)
    def end(self): return _gnsdk.GnPlaylistResultIdentIterable_end(self)
    def count(self): return _gnsdk.GnPlaylistResultIdentIterable_count(self)
    def at(self, *args): return _gnsdk.GnPlaylistResultIdentIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnPlaylistResultIdentIterable_swigregister = _gnsdk.GnPlaylistResultIdentIterable_swigregister
GnPlaylistResultIdentIterable_swigregister(GnPlaylistResultIdentIterable)

class GnPlaylistJoinIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistJoinIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistJoinIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnPlaylistJoinIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnPlaylistJoinIterator___ref__(self)
    def _next(self): return _gnsdk.GnPlaylistJoinIterator__next(self)
    def has_next(self): return _gnsdk.GnPlaylistJoinIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnPlaylistJoinIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistJoinIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnPlaylistJoinIterator_swigregister = _gnsdk.GnPlaylistJoinIterator_swigregister
GnPlaylistJoinIterator_swigregister(GnPlaylistJoinIterator)

class GnPlaylistJoinIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistJoinIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistJoinIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnPlaylistJoinIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistJoinIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnPlaylistJoinIterable_begin(self)
    def end(self): return _gnsdk.GnPlaylistJoinIterable_end(self)
    def count(self): return _gnsdk.GnPlaylistJoinIterable_count(self)
    def at(self, *args): return _gnsdk.GnPlaylistJoinIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnPlaylistJoinIterable_swigregister = _gnsdk.GnPlaylistJoinIterable_swigregister
GnPlaylistJoinIterable_swigregister(GnPlaylistJoinIterable)

class GnPlaylistIdentifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistIdentifier, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnPlaylistIdentifier"""
        this = _gnsdk.new_GnPlaylistIdentifier()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistIdentifier
    __del__ = lambda self : None;
    def media_identifier(self):
        """media_identifier(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistIdentifier_media_identifier(self)

    def collection_name(self):
        """collection_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistIdentifier_collection_name(self)

GnPlaylistIdentifier_swigregister = _gnsdk.GnPlaylistIdentifier_swigregister
GnPlaylistIdentifier_swigregister(GnPlaylistIdentifier)

class GnPlaylistMetadata(GnDataObject):
    __swig_setmethods__ = {}
    for _s in [GnDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistMetadata, name, value)
    __swig_getmethods__ = {}
    for _s in [GnDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistMetadata, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnPlaylistMetadata"""
        this = _gnsdk.new_GnPlaylistMetadata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistMetadata
    __del__ = lambda self : None;
    def album_name(self):
        """album_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_album_name(self)

    def artist_name(self):
        """artist_name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_artist_name(self)

    def artist_type(self):
        """artist_type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_artist_type(self)

    def era(self):
        """era(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_era(self)

    def genre(self):
        """genre(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_genre(self)

    def origin(self):
        """origin(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_origin(self)

    def mood(self):
        """mood(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_mood(self)

    def tempo(self):
        """tempo(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistMetadata_tempo(self)

GnPlaylistMetadata_swigregister = _gnsdk.GnPlaylistMetadata_swigregister
GnPlaylistMetadata_swigregister(GnPlaylistMetadata)

class ResultProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_ResultProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_ResultProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.ResultProvider_get_data(self, *args)
    def count(self): return _gnsdk.ResultProvider_count(self)
ResultProvider_swigregister = _gnsdk.ResultProvider_swigregister
ResultProvider_swigregister(ResultProvider)

class CollectionIdentProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionIdentProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionIdentProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_CollectionIdentProvider()
        try: self.this.append(this)
        except: self.this = this
    def get_data(self, *args): return _gnsdk.CollectionIdentProvider_get_data(self, *args)
    __swig_destroy__ = _gnsdk.delete_CollectionIdentProvider
    __del__ = lambda self : None;
CollectionIdentProvider_swigregister = _gnsdk.CollectionIdentProvider_swigregister
CollectionIdentProvider_swigregister(CollectionIdentProvider)

class CollectionJoinProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionJoinProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionJoinProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_CollectionJoinProvider()
        try: self.this.append(this)
        except: self.this = this
    def get_data(self, *args): return _gnsdk.CollectionJoinProvider_get_data(self, *args)
    __swig_destroy__ = _gnsdk.delete_CollectionJoinProvider
    __del__ = lambda self : None;
CollectionJoinProvider_swigregister = _gnsdk.CollectionJoinProvider_swigregister
CollectionJoinProvider_swigregister(CollectionJoinProvider)

class CollectionStorageProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollectionStorageProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CollectionStorageProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _gnsdk.new_CollectionStorageProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_CollectionStorageProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.CollectionStorageProvider_get_data(self, *args)
CollectionStorageProvider_swigregister = _gnsdk.CollectionStorageProvider_swigregister
CollectionStorageProvider_swigregister(CollectionStorageProvider)

kMoreLikeThisMaxTracks = _gnsdk.kMoreLikeThisMaxTracks
kMoreLikeThisMaxPerArtist = _gnsdk.kMoreLikeThisMaxPerArtist
kMoreLikeThisMaxPerAlbum = _gnsdk.kMoreLikeThisMaxPerAlbum
kMoreLikeThisRandom = _gnsdk.kMoreLikeThisRandom
class GnPlaylistResult(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistResult, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistResult, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnPlaylistResult"""
        this = _gnsdk.new_GnPlaylistResult()
        try: self.this.append(this)
        except: self.this = this
    def identifiers(self):
        """identifiers(self) -> gracenote::gn_iterable_container<(gracenote::playlist::result_iterator)>"""
        return _gnsdk.GnPlaylistResult_identifiers(self)

    __swig_destroy__ = _gnsdk.delete_GnPlaylistResult
    __del__ = lambda self : None;
GnPlaylistResult_swigregister = _gnsdk.GnPlaylistResult_swigregister
GnPlaylistResult_swigregister(GnPlaylistResult)

class GnPlaylistCollectionOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistCollectionOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistCollectionOptions, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def more_like_this(self, *args):
        """
        more_like_this(self, GNPLAYLISTMORELIKETHISOPTION moreLikeThisOption, gnsdk_uint32_t optionValue)
        more_like_this(self, GNPLAYLISTMORELIKETHISOPTION moreLikeThisOption) -> gnsdk_uint32_t
        """
        return _gnsdk.GnPlaylistCollectionOptions_more_like_this(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnPlaylistCollectionOptions
    __del__ = lambda self : None;
GnPlaylistCollectionOptions_swigregister = _gnsdk.GnPlaylistCollectionOptions_swigregister
GnPlaylistCollectionOptions_swigregister(GnPlaylistCollectionOptions)

class GnPlaylistCollection(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistCollection, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistCollection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnPlaylistCollection"""
        this = _gnsdk.new_GnPlaylistCollection()
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylistCollection_name(self)

    def add(self, *args):
        """
        add(self, gnsdk_cstr_t mediaIdentifier, GnAlbum album)
        add(self, gnsdk_cstr_t mediaIdentifier, GnTrack track)
        add(self, gnsdk_cstr_t mediaIdentifier, GnContributor contributor)
        add(self, gnsdk_cstr_t mediaIdentifier, GnPlaylistMetadata playlistMetadata)
        add(self, gnsdk_cstr_t mediaIdentifier, GnListElement listElement)
        """
        return _gnsdk.GnPlaylistCollection_add(self, *args)

    def remove(self, *args):
        """remove(self, gnsdk_cstr_t mediaIdentifier)"""
        return _gnsdk.GnPlaylistCollection_remove(self, *args)

    def contains(self, *args):
        """contains(self, gnsdk_cstr_t mediaIdentifier) -> bool"""
        return _gnsdk.GnPlaylistCollection_contains(self, *args)

    def find(self, *args):
        """find(self, gnsdk_cstr_t mediaIdentifier, gnsdk_uint32_t start) -> ident_iterator"""
        return _gnsdk.GnPlaylistCollection_find(self, *args)

    def metadata(self, *args):
        """
        metadata(self, GnUser user, GnPlaylistIdentifier mediaIdentifier) -> GnPlaylistMetadata
        metadata(self, GnUser user, gnsdk_cstr_t mediaIdentifier, gnsdk_cstr_t collectionName) -> GnPlaylistMetadata
        """
        return _gnsdk.GnPlaylistCollection_metadata(self, *args)

    def statement_validate(self, *args):
        """statement_validate(self, gnsdk_cstr_t pdlStatement) -> GnError"""
        return _gnsdk.GnPlaylistCollection_statement_validate(self, *args)

    def statement_requires_seed(self, *args):
        """statement_requires_seed(self, gnsdk_cstr_t pdlStatement) -> bool"""
        return _gnsdk.GnPlaylistCollection_statement_requires_seed(self, *args)

    def generate_playlist(self, *args):
        """
        generate_playlist(self, GnUser user, gnsdk_cstr_t pdlStatement, GnDataObject playlistSeed) -> GnPlaylistResult
        generate_playlist(self, GnUser user, gnsdk_cstr_t pdlStatement) -> GnPlaylistResult
        """
        return _gnsdk.GnPlaylistCollection_generate_playlist(self, *args)

    def generate_more_like_this(self, *args):
        """generate_more_like_this(self, GnUser user, GnDataObject musicDataObj) -> GnPlaylistResult"""
        return _gnsdk.GnPlaylistCollection_generate_more_like_this(self, *args)

    def media_identifiers(self):
        """media_identifiers(self) -> gracenote::gn_iterable_container<(gracenote::playlist::ident_iterator)>"""
        return _gnsdk.GnPlaylistCollection_media_identifiers(self)

    def joins(self):
        """joins(self) -> gracenote::gn_iterable_container<(gracenote::playlist::join_iterator)>"""
        return _gnsdk.GnPlaylistCollection_joins(self)

    def join_find_by_name(self, *args):
        """join_find_by_name(self, gnsdk_cstr_t collectionName) -> GnPlaylistCollection"""
        return _gnsdk.GnPlaylistCollection_join_find_by_name(self, *args)

    def join(self, *args):
        """join(self, GnPlaylistCollection toJoin)"""
        return _gnsdk.GnPlaylistCollection_join(self, *args)

    def join_remove(self, *args):
        """join_remove(self, GnPlaylistCollection toRemove)"""
        return _gnsdk.GnPlaylistCollection_join_remove(self, *args)

    def serialize(self, *args):
        """serialize(self, gnsdk_byte_t buffer, gnsdk_size_t buffer_sz) -> gnsdk_size_t"""
        return _gnsdk.GnPlaylistCollection_serialize(self, *args)

    def serialize_size(self):
        """serialize_size(self) -> gnsdk_size_t"""
        return _gnsdk.GnPlaylistCollection_serialize_size(self)

    def sync_process_add(self, *args):
        """sync_process_add(self, gnsdk_cstr_t mediaIdentifier)"""
        return _gnsdk.GnPlaylistCollection_sync_process_add(self, *args)

    def sync_process_execute(self, *args):
        """sync_process_execute(self, GnPlaylistCollectionSyncEventsDelegate syncEvents)"""
        return _gnsdk.GnPlaylistCollection_sync_process_execute(self, *args)

    def options(self):
        """options(self) -> GnPlaylistCollectionOptions"""
        return _gnsdk.GnPlaylistCollection_options(self)

    __swig_destroy__ = _gnsdk.delete_GnPlaylistCollection
    __del__ = lambda self : None;
GnPlaylistCollection_swigregister = _gnsdk.GnPlaylistCollection_swigregister
GnPlaylistCollection_swigregister(GnPlaylistCollection)

kIdentifierStatusUnknown = _gnsdk.kIdentifierStatusUnknown
kIdentifierStatusNew = _gnsdk.kIdentifierStatusNew
kIdentifierStatusOld = _gnsdk.kIdentifierStatusOld
class GnPlaylistCollectionSyncEventsDelegate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistCollectionSyncEventsDelegate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistCollectionSyncEventsDelegate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnPlaylistCollectionSyncEventsDelegate
    __del__ = lambda self : None;
    def on_update(self, *args):
        """
        on_update(self, GnPlaylistCollection collection, GnPlaylistIdentifier identifier, 
            GNPLAYLISTEVENTSIDENTIFERSTATUS status, 
            IGnCancellable canceller)
        """
        return _gnsdk.GnPlaylistCollectionSyncEventsDelegate_on_update(self, *args)

    def __init__(self): 
        if self.__class__ == GnPlaylistCollectionSyncEventsDelegate:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_GnPlaylistCollectionSyncEventsDelegate(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_GnPlaylistCollectionSyncEventsDelegate(self)
        return weakref_proxy(self)
GnPlaylistCollectionSyncEventsDelegate_swigregister = _gnsdk.GnPlaylistCollectionSyncEventsDelegate_swigregister
GnPlaylistCollectionSyncEventsDelegate_swigregister(GnPlaylistCollectionSyncEventsDelegate)

class GnPlaylistStorage(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylistStorage, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylistStorage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnPlaylistStorage"""
        this = _gnsdk.new_GnPlaylistStorage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPlaylistStorage
    __del__ = lambda self : None;
    def is_valid(self):
        """is_valid(self) -> GnError"""
        return _gnsdk.GnPlaylistStorage_is_valid(self)

    def compact(self):
        """compact(self)"""
        return _gnsdk.GnPlaylistStorage_compact(self)

    def store(self, *args):
        """store(self, GnPlaylistCollection collection)"""
        return _gnsdk.GnPlaylistStorage_store(self, *args)

    def load(self, *args):
        """
        load(self, storage_iterator itr) -> GnPlaylistCollection
        load(self, gnsdk_cstr_t collectionName) -> GnPlaylistCollection
        """
        return _gnsdk.GnPlaylistStorage_load(self, *args)

    def remove(self, *args):
        """
        remove(self, GnPlaylistCollection collection)
        remove(self, gnsdk_cstr_t collectionName)
        """
        return _gnsdk.GnPlaylistStorage_remove(self, *args)

    def location(self, *args):
        """location(self, gnsdk_cstr_t location)"""
        return _gnsdk.GnPlaylistStorage_location(self, *args)

    def name_count(self):
        """name_count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnPlaylistStorage_name_count(self)

    def name_at(self, *args):
        """name_at(self, gnsdk_uint32_t index) -> char"""
        return _gnsdk.GnPlaylistStorage_name_at(self, *args)

GnPlaylistStorage_swigregister = _gnsdk.GnPlaylistStorage_swigregister
GnPlaylistStorage_swigregister(GnPlaylistStorage)

class GnPlaylist(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPlaylist, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnPlaylist, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylist_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnPlaylist_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def collection_create(*args):
        """collection_create(gnsdk_cstr_t collectionName) -> GnPlaylistCollection"""
        return _gnsdk.GnPlaylist_collection_create(*args)

    if _newclass:collection_create = staticmethod(collection_create)
    __swig_getmethods__["collection_create"] = lambda x: collection_create
    def collection_deserialize(*args):
        """collection_deserialize(gnsdk_byte_t buffer, gnsdk_size_t buffer_sz) -> GnPlaylistCollection"""
        return _gnsdk.GnPlaylist_collection_deserialize(*args)

    if _newclass:collection_deserialize = staticmethod(collection_deserialize)
    __swig_getmethods__["collection_deserialize"] = lambda x: collection_deserialize
    def collection_storage():
        """collection_storage() -> GnPlaylistStorage"""
        return _gnsdk.GnPlaylist_collection_storage()

    if _newclass:collection_storage = staticmethod(collection_storage)
    __swig_getmethods__["collection_storage"] = lambda x: collection_storage
    __swig_destroy__ = _gnsdk.delete_GnPlaylist
    __del__ = lambda self : None;
GnPlaylist_swigregister = _gnsdk.GnPlaylist_swigregister
GnPlaylist_swigregister(GnPlaylist)

def GnPlaylist_version():
  """GnPlaylist_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnPlaylist_version()

def GnPlaylist_build_date():
  """GnPlaylist_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnPlaylist_build_date()

def GnPlaylist_collection_create(*args):
  """GnPlaylist_collection_create(gnsdk_cstr_t collectionName) -> GnPlaylistCollection"""
  return _gnsdk.GnPlaylist_collection_create(*args)

def GnPlaylist_collection_deserialize(*args):
  """GnPlaylist_collection_deserialize(gnsdk_byte_t buffer, gnsdk_size_t buffer_sz) -> GnPlaylistCollection"""
  return _gnsdk.GnPlaylist_collection_deserialize(*args)

def GnPlaylist_collection_storage():
  """GnPlaylist_collection_storage() -> GnPlaylistStorage"""
  return _gnsdk.GnPlaylist_collection_storage()

class GnMoodgridResultEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridResultEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridResultEnumerator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMoodgridResultEnumerator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnMoodgridResultEnumerator___ref__(self)
    def _next(self): return _gnsdk.GnMoodgridResultEnumerator__next(self)
    def has_next(self): return _gnsdk.GnMoodgridResultEnumerator_has_next(self)
    def distance(self, *args): return _gnsdk.GnMoodgridResultEnumerator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridResultEnumerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnMoodgridResultEnumerator_swigregister = _gnsdk.GnMoodgridResultEnumerator_swigregister
GnMoodgridResultEnumerator_swigregister(GnMoodgridResultEnumerator)

class GnMoodgridResultEnumerable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridResultEnumerable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridResultEnumerable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridResultEnumerable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMoodgridResultEnumerable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnMoodgridResultEnumerable_begin(self)
    def end(self): return _gnsdk.GnMoodgridResultEnumerable_end(self)
    def count(self): return _gnsdk.GnMoodgridResultEnumerable_count(self)
    def at(self, *args): return _gnsdk.GnMoodgridResultEnumerable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnMoodgridResultEnumerable_swigregister = _gnsdk.GnMoodgridResultEnumerable_swigregister
GnMoodgridResultEnumerable_swigregister(GnMoodgridResultEnumerable)

class GnMoodgridPresentationDataEnumerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridPresentationDataEnumerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridPresentationDataEnumerator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMoodgridPresentationDataEnumerator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnMoodgridPresentationDataEnumerator___ref__(self)
    def _next(self): return _gnsdk.GnMoodgridPresentationDataEnumerator__next(self)
    def has_next(self): return _gnsdk.GnMoodgridPresentationDataEnumerator_has_next(self)
    def distance(self, *args): return _gnsdk.GnMoodgridPresentationDataEnumerator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridPresentationDataEnumerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnMoodgridPresentationDataEnumerator_swigregister = _gnsdk.GnMoodgridPresentationDataEnumerator_swigregister
GnMoodgridPresentationDataEnumerator_swigregister(GnMoodgridPresentationDataEnumerator)

class GnMoodgridPresentationDataEnumerable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridPresentationDataEnumerable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridPresentationDataEnumerable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridPresentationDataEnumerable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMoodgridPresentationDataEnumerable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnMoodgridPresentationDataEnumerable_begin(self)
    def end(self): return _gnsdk.GnMoodgridPresentationDataEnumerable_end(self)
    def count(self): return _gnsdk.GnMoodgridPresentationDataEnumerable_count(self)
    def at(self, *args): return _gnsdk.GnMoodgridPresentationDataEnumerable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnMoodgridPresentationDataEnumerable_swigregister = _gnsdk.GnMoodgridPresentationDataEnumerable_swigregister
GnMoodgridPresentationDataEnumerable_swigregister(GnMoodgridPresentationDataEnumerable)

class GnMoodgridProviderIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridProviderIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridProviderIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridProviderIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMoodgridProviderIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnMoodgridProviderIterable_begin(self)
    def end(self): return _gnsdk.GnMoodgridProviderIterable_end(self)
    def count(self): return _gnsdk.GnMoodgridProviderIterable_count(self)
    def at(self, *args): return _gnsdk.GnMoodgridProviderIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnMoodgridProviderIterable_swigregister = _gnsdk.GnMoodgridProviderIterable_swigregister
GnMoodgridProviderIterable_swigregister(GnMoodgridProviderIterable)

class GnMoodgridProviderIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridProviderIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridProviderIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnMoodgridProviderIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnMoodgridProviderIterator___ref__(self)
    def _next(self): return _gnsdk.GnMoodgridProviderIterator__next(self)
    def has_next(self): return _gnsdk.GnMoodgridProviderIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnMoodgridProviderIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnMoodgridProviderIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnMoodgridProviderIterator_swigregister = _gnsdk.GnMoodgridProviderIterator_swigregister
GnMoodgridProviderIterator_swigregister(GnMoodgridProviderIterator)

class GnMoodgridDataPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridDataPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridDataPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _gnsdk.GnMoodgridDataPoint_x_set
    __swig_getmethods__["x"] = _gnsdk.GnMoodgridDataPoint_x_get
    if _newclass:x = _swig_property(_gnsdk.GnMoodgridDataPoint_x_get, _gnsdk.GnMoodgridDataPoint_x_set)
    __swig_setmethods__["y"] = _gnsdk.GnMoodgridDataPoint_y_set
    __swig_getmethods__["y"] = _gnsdk.GnMoodgridDataPoint_y_get
    if _newclass:y = _swig_property(_gnsdk.GnMoodgridDataPoint_y_get, _gnsdk.GnMoodgridDataPoint_y_set)
    def __init__(self): 
        this = _gnsdk.new_GnMoodgridDataPoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMoodgridDataPoint
    __del__ = lambda self : None;
GnMoodgridDataPoint_swigregister = _gnsdk.GnMoodgridDataPoint_swigregister
GnMoodgridDataPoint_swigregister(GnMoodgridDataPoint)

kMoodgridPresentationType5x5 = _gnsdk.kMoodgridPresentationType5x5
kMoodgridPresentationType10x10 = _gnsdk.kMoodgridPresentationType10x10
kMoodgridCoordinateTopLeft = _gnsdk.kMoodgridCoordinateTopLeft
kMoodgridCoordinateBottomLeft = _gnsdk.kMoodgridCoordinateBottomLeft
class GnMoodgridIdentifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridIdentifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridIdentifier, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMoodgridIdentifier"""
        this = _gnsdk.new_GnMoodgridIdentifier()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnMoodgridIdentifier
    __del__ = lambda self : None;
    def media_identifier(self):
        """media_identifier(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridIdentifier_media_identifier(self)

    def group(self):
        """group(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridIdentifier_group(self)

GnMoodgridIdentifier_swigregister = _gnsdk.GnMoodgridIdentifier_swigregister
GnMoodgridIdentifier_swigregister(GnMoodgridIdentifier)

class MoodgridResultProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoodgridResultProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoodgridResultProvider, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_MoodgridResultProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.MoodgridResultProvider_get_data(self, *args)
    def count(self): return _gnsdk.MoodgridResultProvider_count(self)
MoodgridResultProvider_swigregister = _gnsdk.MoodgridResultProvider_swigregister
MoodgridResultProvider_swigregister(MoodgridResultProvider)

class GnMoodgridResult(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridResult, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridResult, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMoodgridResult"""
        this = _gnsdk.new_GnMoodgridResult()
        try: self.this.append(this)
        except: self.this = this
    def count(self):
        """count(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnMoodgridResult_count(self)

    def identifiers(self):
        """identifiers(self) -> gracenote::gn_iterable_container<(gracenote::moodgrid::result_iterator)>"""
        return _gnsdk.GnMoodgridResult_identifiers(self)

    __swig_destroy__ = _gnsdk.delete_GnMoodgridResult
    __del__ = lambda self : None;
GnMoodgridResult_swigregister = _gnsdk.GnMoodgridResult_swigregister
GnMoodgridResult_swigregister(GnMoodgridResult)

class GnMoodgridProvider(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridProvider, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridProvider, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMoodgridProvider"""
        this = _gnsdk.new_GnMoodgridProvider()
        try: self.this.append(this)
        except: self.this = this
    def name(self):
        """name(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridProvider_name(self)

    def type(self):
        """type(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridProvider_type(self)

    def requires_network(self):
        """requires_network(self) -> bool"""
        return _gnsdk.GnMoodgridProvider_requires_network(self)

    __swig_destroy__ = _gnsdk.delete_GnMoodgridProvider
    __del__ = lambda self : None;
GnMoodgridProvider_swigregister = _gnsdk.GnMoodgridProvider_swigregister
GnMoodgridProvider_swigregister(GnMoodgridProvider)

class MoodgridProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoodgridProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoodgridProvider, name)
    __repr__ = _swig_repr
    def get_data(self, *args): return _gnsdk.MoodgridProvider_get_data(self, *args)
    def count(self): return _gnsdk.MoodgridProvider_count(self)
    def __init__(self): 
        this = _gnsdk.new_MoodgridProvider()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_MoodgridProvider
    __del__ = lambda self : None;
MoodgridProvider_swigregister = _gnsdk.MoodgridProvider_swigregister
MoodgridProvider_swigregister(MoodgridProvider)

class PresentationDataProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PresentationDataProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PresentationDataProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_PresentationDataProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_data(self, *args): return _gnsdk.PresentationDataProvider_get_data(self, *args)
    def count(self): return _gnsdk.PresentationDataProvider_count(self)
    __swig_destroy__ = _gnsdk.delete_PresentationDataProvider
    __del__ = lambda self : None;
PresentationDataProvider_swigregister = _gnsdk.PresentationDataProvider_swigregister
PresentationDataProvider_swigregister(PresentationDataProvider)

kConditionTypeInclude = _gnsdk.kConditionTypeInclude
kConditionTypeExclude = _gnsdk.kConditionTypeExclude
kMoodgridListTypeGenre = _gnsdk.kMoodgridListTypeGenre
kMoodgridListTypeOrigins = _gnsdk.kMoodgridListTypeOrigins
kMoodgridListTypeEras = _gnsdk.kMoodgridListTypeEras
class GnMoodgridPresentation(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgridPresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgridPresentation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMoodgridPresentation"""
        this = _gnsdk.new_GnMoodgridPresentation()
        try: self.this.append(this)
        except: self.this = this
    def moods(self):
        """moods(self) -> gracenote::gn_iterable_container<(gracenote::moodgrid::data_iterator)>"""
        return _gnsdk.GnMoodgridPresentation_moods(self)

    def layout_type(self):
        """layout_type(self) -> GNMOODGRIDPRESENTATIONTYPE"""
        return _gnsdk.GnMoodgridPresentation_layout_type(self)

    def coordinate_type(self):
        """coordinate_type(self) -> GNMOODGRIDCOORDINATETYPE"""
        return _gnsdk.GnMoodgridPresentation_coordinate_type(self)

    def add_filter(self, *args):
        """
        add_filter(self, gnsdk_cstr_t uniqueIndentfier, GNMOODGRIDFILTERLISTTYPE elistType, 
            gnsdk_cstr_t strValueId, GNMOODGRIDFILTERCONDITIONTYPE eConditionType)
        """
        return _gnsdk.GnMoodgridPresentation_add_filter(self, *args)

    def remove_filter(self, *args):
        """remove_filter(self, gnsdk_cstr_t uniqueIndentfier)"""
        return _gnsdk.GnMoodgridPresentation_remove_filter(self, *args)

    def remove_all_filters(self):
        """remove_all_filters(self)"""
        return _gnsdk.GnMoodgridPresentation_remove_all_filters(self)

    def mood_name(self, *args):
        """mood_name(self, GnMoodgridDataPoint position) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridPresentation_mood_name(self, *args)

    def mood_id(self, *args):
        """mood_id(self, GnMoodgridDataPoint position) -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgridPresentation_mood_id(self, *args)

    def find_recommendations(self, *args):
        """find_recommendations(self, GnMoodgridProvider provider, GnMoodgridDataPoint position) -> GnMoodgridResult"""
        return _gnsdk.GnMoodgridPresentation_find_recommendations(self, *args)

    def find_recommendations_estimate(self, *args):
        """find_recommendations_estimate(self, GnMoodgridProvider provider, GnMoodgridDataPoint position) -> gnsdk_uint32_t"""
        return _gnsdk.GnMoodgridPresentation_find_recommendations_estimate(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMoodgridPresentation
    __del__ = lambda self : None;
GnMoodgridPresentation_swigregister = _gnsdk.GnMoodgridPresentation_swigregister
GnMoodgridPresentation_swigregister(GnMoodgridPresentation)

class GnMoodgrid(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnMoodgrid, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnMoodgrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnMoodgrid"""
        this = _gnsdk.new_GnMoodgrid()
        try: self.this.append(this)
        except: self.this = this
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgrid_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnMoodgrid_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def providers(self):
        """providers(self) -> gracenote::gn_iterable_container<(gracenote::moodgrid::provider_iterator)>"""
        return _gnsdk.GnMoodgrid_providers(self)

    def create_presentation(self, *args):
        """create_presentation(self, GnUser user, GNMOODGRIDPRESENTATIONTYPE type, GNMOODGRIDCOORDINATETYPE coordinate) -> GnMoodgridPresentation"""
        return _gnsdk.GnMoodgrid_create_presentation(self, *args)

    def dimensions(self, *args):
        """dimensions(self, GNMOODGRIDPRESENTATIONTYPE type) -> GnMoodgridDataPoint"""
        return _gnsdk.GnMoodgrid_dimensions(self, *args)

    __swig_destroy__ = _gnsdk.delete_GnMoodgrid
    __del__ = lambda self : None;
GnMoodgrid_swigregister = _gnsdk.GnMoodgrid_swigregister
GnMoodgrid_swigregister(GnMoodgrid)

def GnMoodgrid_version():
  """GnMoodgrid_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnMoodgrid_version()

def GnMoodgrid_build_date():
  """GnMoodgrid_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnMoodgrid_build_date()

class GnAcrMatchProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcrMatchProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcrMatchProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAcrMatchProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAcrMatchProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnAcrMatchProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnAcrMatchProvider_count(self)
    k_ordinal_start = _gnsdk.GnAcrMatchProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnAcrMatchProvider_k_count_offset
GnAcrMatchProvider_swigregister = _gnsdk.GnAcrMatchProvider_swigregister
GnAcrMatchProvider_swigregister(GnAcrMatchProvider)

class GnTVAiringProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVAiringProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVAiringProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVAiringProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVAiringProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnTVAiringProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnTVAiringProvider_count(self)
    k_ordinal_start = _gnsdk.GnTVAiringProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnTVAiringProvider_k_count_offset
GnTVAiringProvider_swigregister = _gnsdk.GnTVAiringProvider_swigregister
GnTVAiringProvider_swigregister(GnTVAiringProvider)

class GnTVChannelProvider(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVChannelProvider, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVChannelProvider, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVChannelProvider(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVChannelProvider
    __del__ = lambda self : None;
    def get_data(self, *args): return _gnsdk.GnTVChannelProvider_get_data(self, *args)
    def count(self): return _gnsdk.GnTVChannelProvider_count(self)
    k_ordinal_start = _gnsdk.GnTVChannelProvider_k_ordinal_start
    k_count_offset = _gnsdk.GnTVChannelProvider_k_count_offset
GnTVChannelProvider_swigregister = _gnsdk.GnTVChannelProvider_swigregister
GnTVChannelProvider_swigregister(GnTVChannelProvider)

class GnAcrMatchIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcrMatchIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcrMatchIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnAcrMatchIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnAcrMatchIterator__next(self)
    def has_next(self): return _gnsdk.GnAcrMatchIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnAcrMatchIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnAcrMatchIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnAcrMatchIterator_swigregister = _gnsdk.GnAcrMatchIterator_swigregister
GnAcrMatchIterator_swigregister(GnAcrMatchIterator)

class GnTVAiringIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVAiringIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVAiringIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnTVAiringIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnTVAiringIterator__next(self)
    def has_next(self): return _gnsdk.GnTVAiringIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnTVAiringIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVAiringIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnTVAiringIterator_swigregister = _gnsdk.GnTVAiringIterator_swigregister
GnTVAiringIterator_swigregister(GnTVAiringIterator)

class GnTVChannelIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVChannelIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVChannelIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnTVChannelIterator
    __del__ = lambda self : None;
    def _next(self): return _gnsdk.GnTVChannelIterator__next(self)
    def has_next(self): return _gnsdk.GnTVChannelIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnTVChannelIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVChannelIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnTVChannelIterator_swigregister = _gnsdk.GnTVChannelIterator_swigregister
GnTVChannelIterator_swigregister(GnTVChannelIterator)

class GnAcrMatchIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcrMatchIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcrMatchIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnAcrMatchIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAcrMatchIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnAcrMatchIterable_get_iterator(self)
    def end(self): return _gnsdk.GnAcrMatchIterable_end(self)
    def count(self): return _gnsdk.GnAcrMatchIterable_count(self)
    def at(self, *args): return _gnsdk.GnAcrMatchIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnAcrMatchIterable_swigregister = _gnsdk.GnAcrMatchIterable_swigregister
GnAcrMatchIterable_swigregister(GnAcrMatchIterable)

class GnTVAiringIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVAiringIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVAiringIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVAiringIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVAiringIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnTVAiringIterable_get_iterator(self)
    def end(self): return _gnsdk.GnTVAiringIterable_end(self)
    def count(self): return _gnsdk.GnTVAiringIterable_count(self)
    def at(self, *args): return _gnsdk.GnTVAiringIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnTVAiringIterable_swigregister = _gnsdk.GnTVAiringIterable_swigregister
GnTVAiringIterable_swigregister(GnTVAiringIterable)

class GnTVChannelIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnTVChannelIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnTVChannelIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnTVChannelIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnTVChannelIterable
    __del__ = lambda self : None;
    def get_iterator(self): return _gnsdk.GnTVChannelIterable_get_iterator(self)
    def end(self): return _gnsdk.GnTVChannelIterable_end(self)
    def count(self): return _gnsdk.GnTVChannelIterable_count(self)
    def at(self, *args): return _gnsdk.GnTVChannelIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnTVChannelIterable_swigregister = _gnsdk.GnTVChannelIterable_swigregister
GnTVChannelIterable_swigregister(GnTVChannelIterable)

kAcrAudioAlgUnknown = _gnsdk.kAcrAudioAlgUnknown
kAcrAudioAlg13Svlq = _gnsdk.kAcrAudioAlg13Svlq
kAcrAudioAlg13Smq = _gnsdk.kAcrAudioAlg13Smq
kAcrAudioSampleFormatPcm8 = _gnsdk.kAcrAudioSampleFormatPcm8
kAcrAudioSampleFormatPcm16 = _gnsdk.kAcrAudioSampleFormatPcm16
kAcrStatusDebug = _gnsdk.kAcrStatusDebug
kAcrStatusQueryBegin = _gnsdk.kAcrStatusQueryBegin
kAcrStatusConnecting = _gnsdk.kAcrStatusConnecting
kAcrStatusSending = _gnsdk.kAcrStatusSending
kAcrStatusReceiving = _gnsdk.kAcrStatusReceiving
kAcrStatusAudioFpStarted = _gnsdk.kAcrStatusAudioFpStarted
kAcrStatusAudioFpGenerated = _gnsdk.kAcrStatusAudioFpGenerated
kAcrStatusAudioSilent = _gnsdk.kAcrStatusAudioSilent
kAcrStatusSilenceRatio = _gnsdk.kAcrStatusSilenceRatio
kAcrStatusNonPitched = _gnsdk.kAcrStatusNonPitched
kAcrStatusMusic = _gnsdk.kAcrStatusMusic
kAcrStatusSpeech = _gnsdk.kAcrStatusSpeech
kAcrStatusQueryCompleteLocal = _gnsdk.kAcrStatusQueryCompleteLocal
kAcrStatusQueryCompleteOnline = _gnsdk.kAcrStatusQueryCompleteOnline
kAcrStatusNormalMatchMode = _gnsdk.kAcrStatusNormalMatchMode
kAcrStatusNoMatchMode = _gnsdk.kAcrStatusNoMatchMode
kAcrStatusError = _gnsdk.kAcrStatusError
kAcrStatusTransition = _gnsdk.kAcrStatusTransition
kAcrOptimizationDefault = _gnsdk.kAcrOptimizationDefault
kAcrOptimizationAccuracy = _gnsdk.kAcrOptimizationAccuracy
kAcrOptimizationSpeed = _gnsdk.kAcrOptimizationSpeed
kAcrOptimizationAdaptive = _gnsdk.kAcrOptimizationAdaptive
class GnAcrEventsDelegate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcrEventsDelegate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcrEventsDelegate, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnAcrEventsDelegate
    __del__ = lambda self : None;
    def acr_status_event(self, *args):
        """acr_status_event(self, GNACRSTATUS acrStatus)"""
        return _gnsdk.GnAcrEventsDelegate_acr_status_event(self, *args)

    def acr_result_event(self, *args):
        """acr_result_event(self, GnResponseAcrMatch responseAcrMatch)"""
        return _gnsdk.GnAcrEventsDelegate_acr_result_event(self, *args)

    def __init__(self): 
        if self.__class__ == GnAcrEventsDelegate:
            _self = None
        else:
            _self = self
        this = _gnsdk.new_GnAcrEventsDelegate(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _gnsdk.disown_GnAcrEventsDelegate(self)
        return weakref_proxy(self)
GnAcrEventsDelegate_swigregister = _gnsdk.GnAcrEventsDelegate_swigregister
GnAcrEventsDelegate_swigregister(GnAcrEventsDelegate)

class GnAcr(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnAcr, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnAcr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GnUser user, GnAcrEventsDelegate pEventHandler = (0)) -> GnAcr
        __init__(self, GnUser user) -> GnAcr
        """
        this = _gnsdk.new_GnAcr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnAcr
    __del__ = lambda self : None;
    def version():
        """version() -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_version()

    if _newclass:version = staticmethod(version)
    __swig_getmethods__["version"] = lambda x: version
    def build_date():
        """build_date() -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_build_date()

    if _newclass:build_date = staticmethod(build_date)
    __swig_getmethods__["build_date"] = lambda x: build_date
    def option_optimize_set(self, *args):
        """option_optimize_set(self, GNACROPTIMIZATION optimize)"""
        return _gnsdk.GnAcr_option_optimize_set(self, *args)

    def option_optimize_get(self):
        """option_optimize_get(self) -> GNACROPTIMIZATION"""
        return _gnsdk.GnAcr_option_optimize_get(self)

    def option_max_delay_set(self, *args):
        """option_max_delay_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_max_delay_set(self, *args)

    def option_max_delay_get(self):
        """option_max_delay_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_max_delay_get(self)

    def option_max_local_delay_set(self, *args):
        """option_max_local_delay_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_max_local_delay_set(self, *args)

    def option_max_local_delay_get(self):
        """option_max_local_delay_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_max_local_delay_get(self)

    def option_transition_sensitivity_set(self, *args):
        """option_transition_sensitivity_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_transition_sensitivity_set(self, *args)

    def option_transition_sensitivity_get(self):
        """option_transition_sensitivity_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_transition_sensitivity_get(self)

    def option_no_match_count_set(self, *args):
        """option_no_match_count_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_no_match_count_set(self, *args)

    def option_no_match_count_get(self):
        """option_no_match_count_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_no_match_count_get(self)

    def option_no_match_time_inc_set(self, *args):
        """option_no_match_time_inc_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_no_match_time_inc_set(self, *args)

    def option_no_match_time_inc_get(self):
        """option_no_match_time_inc_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_no_match_time_inc_get(self)

    def option_no_match_max_time_set(self, *args):
        """option_no_match_max_time_set(self, gnsdk_cstr_t value)"""
        return _gnsdk.GnAcr_option_no_match_max_time_set(self, *args)

    def option_no_match_max_time_get(self):
        """option_no_match_max_time_get(self) -> gnsdk_cstr_t"""
        return _gnsdk.GnAcr_option_no_match_max_time_get(self)

    def option_lookup_cache_only_set(self, *args):
        """option_lookup_cache_only_set(self, bool cacheOnly)"""
        return _gnsdk.GnAcr_option_lookup_cache_only_set(self, *args)

    def option_lookup_cache_only_get(self):
        """option_lookup_cache_only_get(self) -> bool"""
        return _gnsdk.GnAcr_option_lookup_cache_only_get(self)

    def acr_begin(self, *args):
        """
        acr_begin(self, GNACRAUDIOALG audioAlg, gnsdk_uint32_t audioSampleRate, 
            GNACRAUDIOSAMPLEFORMAT audioSampleFormat, 
            gnsdk_uint32_t audioChannels)
        """
        return _gnsdk.GnAcr_acr_begin(self, *args)

    def acr_write(self, *args):
        """acr_write(self, gnsdk_byte_t audioData, gnsdk_size_t dataSize)"""
        return _gnsdk.GnAcr_acr_write(self, *args)

    def acr_end(self):
        """acr_end(self)"""
        return _gnsdk.GnAcr_acr_end(self)

    def acr_manual_lookup(self):
        """acr_manual_lookup(self)"""
        return _gnsdk.GnAcr_acr_manual_lookup(self)

GnAcr_swigregister = _gnsdk.GnAcr_swigregister
GnAcr_swigregister(GnAcr)

def GnAcr_version():
  """GnAcr_version() -> gnsdk_cstr_t"""
  return _gnsdk.GnAcr_version()

def GnAcr_build_date():
  """GnAcr_build_date() -> gnsdk_cstr_t"""
  return _gnsdk.GnAcr_build_date()

kCorrelateTypeInvalid = _gnsdk.kCorrelateTypeInvalid
kCorrelateTypeGenres = _gnsdk.kCorrelateTypeGenres
kCorrelateTypeOrigins = _gnsdk.kCorrelateTypeOrigins
kCorrelateTypeEras = _gnsdk.kCorrelateTypeEras
kCorrelateTypeArtistTypes = _gnsdk.kCorrelateTypeArtistTypes
kCorrelateTypeMoods = _gnsdk.kCorrelateTypeMoods
class GnCorrelateSet(GnObject):
    __swig_setmethods__ = {}
    for _s in [GnObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCorrelateSet, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnCorrelateSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> GnCorrelateSet"""
        this = _gnsdk.new_GnCorrelateSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCorrelateSet
    __del__ = lambda self : None;
    def correlation(self, *args):
        """correlation(self, gnsdk_uint32_t master_id) -> gnsdk_int32_t"""
        return _gnsdk.GnCorrelateSet_correlation(self, *args)

GnCorrelateSet_swigregister = _gnsdk.GnCorrelateSet_swigregister
GnCorrelateSet_swigregister(GnCorrelateSet)

class GnCorrelates(GnObject,IGnCancellable):
    __swig_setmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnCorrelates, name, value)
    __swig_getmethods__ = {}
    for _s in [GnObject,IGnCancellable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GnCorrelates, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, GNCORRELATETYPE correlateType, GnUser user, IGnStatusEvents pEventHandler = (0)) -> GnCorrelates
        __init__(self, GNCORRELATETYPE correlateType, GnUser user) -> GnCorrelates
        """
        this = _gnsdk.new_GnCorrelates(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnCorrelates
    __del__ = lambda self : None;
    def correlates_for_id(self, *args):
        """correlates_for_id(self, gnsdk_uint32_t master_id) -> GnCorrelateSet"""
        return _gnsdk.GnCorrelates_correlates_for_id(self, *args)

    def render_set_to_xml(self, *args):
        """render_set_to_xml(self, gnsdk_uint32_t master_id) -> GnString"""
        return _gnsdk.GnCorrelates_render_set_to_xml(self, *args)

    def type(self):
        """type(self) -> GNCORRELATETYPE"""
        return _gnsdk.GnCorrelates_type(self)

    def revision(self):
        """revision(self) -> gnsdk_uint32_t"""
        return _gnsdk.GnCorrelates_revision(self)

    def event_handler(self):
        """event_handler(self) -> IGnStatusEvents"""
        return _gnsdk.GnCorrelates_event_handler(self)

    def set_cancel(self, *args):
        """set_cancel(self, bool bCancel)"""
        return _gnsdk.GnCorrelates_set_cancel(self, *args)

    def is_cancelled(self):
        """is_cancelled(self) -> bool"""
        return _gnsdk.GnCorrelates_is_cancelled(self)

GnCorrelates_swigregister = _gnsdk.GnCorrelates_swigregister
GnCorrelates_swigregister(GnCorrelates)

class GnPersonaChannelIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPersonaChannelIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPersonaChannelIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gnsdk.delete_GnPersonaChannelIterator
    __del__ = lambda self : None;
    def __ref__(self): return _gnsdk.GnPersonaChannelIterator___ref__(self)
    def _next(self): return _gnsdk.GnPersonaChannelIterator__next(self)
    def has_next(self): return _gnsdk.GnPersonaChannelIterator_has_next(self)
    def distance(self, *args): return _gnsdk.GnPersonaChannelIterator_distance(self, *args)
    def __init__(self, *args): 
        this = _gnsdk.new_GnPersonaChannelIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        if self.has_next():
            return self._next()
        else:
            raise StopIteration
GnPersonaChannelIterator_swigregister = _gnsdk.GnPersonaChannelIterator_swigregister
GnPersonaChannelIterator_swigregister(GnPersonaChannelIterator)

class GnPersonaChannelIterable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GnPersonaChannelIterable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GnPersonaChannelIterable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _gnsdk.new_GnPersonaChannelIterable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _gnsdk.delete_GnPersonaChannelIterable
    __del__ = lambda self : None;
    def begin(self): return _gnsdk.GnPersonaChannelIterable_begin(self)
    def end(self): return _gnsdk.GnPersonaChannelIterable_end(self)
    def count(self): return _gnsdk.GnPersonaChannelIterable_count(self)
    def at(self, *args): return _gnsdk.GnPersonaChannelIterable_at(self, *args)
    def __len__(self):
        return self.count()
    def __getitem__(self, index):
        if index >= len(self):
            raise IndexError("list index out of range")
        else:
            return self.at(index)._next()
    def __iter__(self):
        try:
            return self.begin()
        except:
            return self.get_iterator()
GnPersonaChannelIterable_swigregister = _gnsdk.GnPersonaChannelIterable_swigregister
GnPersonaChannelIterable_swigregister(GnPersonaChannelIterable)

# This file is compatible with both classic and new-style classes.


